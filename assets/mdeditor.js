'use strict';



;define('mdeditor/adapters/application', ['exports', 'ember-local-storage/adapters/adapter'], function (exports, _adapter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _adapter.default.extend({
    // //timestamp updates
    // updateRecord(store, type, snapshot) {
    //   //let date = new Date();
    //
    //   //snapshot.record.set('dateUpdated', date.toISOString());
    //   return this._super.apply(this,[store, type, snapshot]);
    // }
  });
});
;define('mdeditor/app', ['exports', 'mdeditor/resolver', 'ember-load-initializers', 'mdeditor/config/environment'], function (exports, _resolver, _emberLoadInitializers, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  let App;
  let events = {
    // add support for the blur event
    blur: 'blur'

    //Ember.MODEL_FACTORY_INJECTIONS = true;

  };App = Ember.Application.extend({
    modulePrefix: _environment.default.modulePrefix,
    podModulePrefix: _environment.default.podModulePrefix,
    Resolver: _resolver.default,
    customEvents: events
  });

  // window.mdProfile = {
  //   // record:{},contact:{},dictionary:{}
  // };

  (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);

  //for bootstrap
  Ember.LinkComponent.reopen({
    attributeBindings: ['data-toggle', 'data-placement']
  });
  //for crumbly
  Ember.Route.reopen({
    //breadCrumb: null
    currentRouteModel: function currentRouteModel() {
      return this.modelFor(this.routeName);
    }
  });
  //for profiles
  Ember.Component.reopen({
    init() {
      this._super(...arguments);

      let profile = Ember.get(this, 'profile');
      let path = Ember.get(this, 'profilePath');
      let visibility = Ember.get(this, 'visibility');
      let isVisible = Ember.isNone(visibility) ? true : visibility;

      if (path !== undefined) {
        (true && !(path.charAt(0) !== '.') && Ember.assert(`${path} is not a profile path!`, path.charAt(0) !== '.'));


        // generate profile definition
        // path.split('.').reduce((acc, curr, idx) => {
        //   let pp = idx ? `${acc}.${curr}` : curr;
        //   window.console.log(pp);
        //   if(!get(window.mdProfile, pp)) {
        //     set(window.mdProfile, pp, {
        //       //visible: true
        //     });
        //   }
        //   return pp;
        // }, '');

        Ember.defineProperty(this, 'isVisible', Ember.computed('profile.active', function () {
          if (!profile.activeComponents) {
            return isVisible;
          }

          return Ember.getWithDefault(profile.activeComponents, path, isVisible);
        }));
      }
    }
  });
  exports.default = App;
});
;define("mdeditor/components/-lf-get-outlet-state", ["exports", "liquid-fire/components/-lf-get-outlet-state"], function (exports, _lfGetOutletState) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _lfGetOutletState.default;
    }
  });
});
;define('mdeditor/components/array-path-layer', ['exports', 'ember-leaflet/components/array-path-layer'], function (exports, _arrayPathLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _arrayPathLayer.default;
    }
  });
});
;define('mdeditor/components/base-layer', ['exports', 'ember-leaflet/components/base-layer'], function (exports, _baseLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _baseLayer.default;
    }
  });
});
;define('mdeditor/components/basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown'], function (exports, _basicDropdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _basicDropdown.default;
    }
  });
});
;define('mdeditor/components/basic-dropdown/content-element', ['exports', 'ember-basic-dropdown/components/basic-dropdown/content-element'], function (exports, _contentElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _contentElement.default;
    }
  });
});
;define('mdeditor/components/basic-dropdown/content', ['exports', 'ember-basic-dropdown/components/basic-dropdown/content'], function (exports, _content) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _content.default;
    }
  });
});
;define('mdeditor/components/basic-dropdown/trigger', ['exports', 'ember-basic-dropdown/components/basic-dropdown/trigger'], function (exports, _trigger) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
;define('mdeditor/components/bread-crumb', ['exports', 'ember-crumbly/components/bread-crumb'], function (exports, _breadCrumb) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _breadCrumb.default;
    }
  });
});
;define('mdeditor/components/bread-crumbs', ['exports', 'ember-crumbly/components/bread-crumbs'], function (exports, _breadCrumbs) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _breadCrumbs.default;
    }
  });
});
;define('mdeditor/components/bs-datetimepicker', ['exports', 'ember-cli-bootstrap-datetimepicker/components/bs-datetimepicker', 'mdeditor/config/environment'], function (exports, _bsDatetimepicker, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _bsDatetimepicker.default.extend({
    config: _environment.default['ember-cli-bootstrap-datetimepicker']
  });
});
;define('mdeditor/components/circle-layer', ['exports', 'ember-leaflet/components/circle-layer'], function (exports, _circleLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _circleLayer.default;
    }
  });
});
;define('mdeditor/components/circle-marker-layer', ['exports', 'ember-leaflet/components/circle-marker-layer'], function (exports, _circleMarkerLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _circleMarkerLayer.default;
    }
  });
});
;define('mdeditor/components/container-layer', ['exports', 'ember-leaflet/components/container-layer'], function (exports, _containerLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _containerLayer.default;
    }
  });
});
;define('mdeditor/components/div-overlay-layer', ['exports', 'ember-leaflet/components/div-overlay-layer'], function (exports, _divOverlayLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _divOverlayLayer.default;
    }
  });
});
;define('mdeditor/components/draggable-object-target', ['exports', 'ember-drag-drop/components/draggable-object-target'], function (exports, _draggableObjectTarget) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _draggableObjectTarget.default;
});
;define('mdeditor/components/draggable-object', ['exports', 'ember-drag-drop/components/draggable-object'], function (exports, _draggableObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _draggableObject.default;
});
;define('mdeditor/components/ember-load-remover', ['exports', 'ember-load/components/ember-load-remover'], function (exports, _emberLoadRemover) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberLoadRemover.default;
    }
  });
});
;define('mdeditor/components/ember-modal-dialog-positioned-container', ['exports', 'ember-modal-dialog/components/positioned-container'], function (exports, _positionedContainer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _positionedContainer.default;
    }
  });
});
;define('mdeditor/components/ember-modal-dialog/-basic-dialog', ['exports', 'ember-modal-dialog/components/basic-dialog'], function (exports, _basicDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _basicDialog.default;
    }
  });
});
;define('mdeditor/components/ember-modal-dialog/-in-place-dialog', ['exports', 'ember-modal-dialog/components/in-place-dialog'], function (exports, _inPlaceDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _inPlaceDialog.default;
    }
  });
});
;define('mdeditor/components/ember-modal-dialog/-liquid-dialog', ['exports', 'ember-modal-dialog/components/liquid-dialog'], function (exports, _liquidDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidDialog.default;
    }
  });
});
;define('mdeditor/components/ember-modal-dialog/-liquid-tether-dialog', ['exports', 'ember-modal-dialog/components/liquid-tether-dialog'], function (exports, _liquidTetherDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidTetherDialog.default;
    }
  });
});
;define('mdeditor/components/ember-modal-dialog/-tether-dialog', ['exports', 'ember-modal-dialog/components/tether-dialog'], function (exports, _tetherDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tetherDialog.default;
    }
  });
});
;define('mdeditor/components/ember-popover', ['exports', 'ember-tooltips/components/ember-popover'], function (exports, _emberPopover) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPopover.default;
    }
  });
});
;define('mdeditor/components/ember-tether', ['exports', 'ember-tether/components/ember-tether'], function (exports, _emberTether) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberTether.default;
    }
  });
});
;define('mdeditor/components/ember-tooltip', ['exports', 'ember-tooltips/components/ember-tooltip'], function (exports, _emberTooltip) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberTooltip.default;
    }
  });
});
;define('mdeditor/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormhole) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberWormhole.default;
    }
  });
});
;define('mdeditor/components/fa-icon', ['exports', 'ember-font-awesome/components/fa-icon'], function (exports, _faIcon) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _faIcon.default;
    }
  });
});
;define('mdeditor/components/fa-list', ['exports', 'ember-font-awesome/components/fa-list'], function (exports, _faList) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _faList.default;
    }
  });
});
;define('mdeditor/components/fa-stack', ['exports', 'ember-font-awesome/components/fa-stack'], function (exports, _faStack) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _faStack.default;
    }
  });
});
;define('mdeditor/components/feature-form', ['exports', 'ember-leaflet-table/components/feature-form'], function (exports, _featureForm) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _featureForm.default;
    }
  });
});
;define('mdeditor/components/feature-group', ['exports', 'ember-leaflet-table/components/feature-group'], function (exports, _featureGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _featureGroup.default;
    }
  });
});
;define('mdeditor/components/feature-table', ['exports', 'ember-leaflet-table/components/feature-table'], function (exports, _featureTable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _featureTable.default;
    }
  });
});
;define('mdeditor/components/file-picker', ['exports', 'ember-cli-file-picker/components/file-picker'], function (exports, _filePicker) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _filePicker.default;
    }
  });
});
;define('mdeditor/components/flash-message', ['exports', 'ember-cli-flash/components/flash-message'], function (exports, _flashMessage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flashMessage.default;
    }
  });
});
;define('mdeditor/components/from-elsewhere', ['exports', 'ember-elsewhere/components/from-elsewhere'], function (exports, _fromElsewhere) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _fromElsewhere.default;
    }
  });
});
;define('mdeditor/components/geojson-layer', ['exports', 'ember-leaflet/components/geojson-layer'], function (exports, _geojsonLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _geojsonLayer.default;
    }
  });
});
;define('mdeditor/components/head-content', ['exports', 'mdeditor/templates/head'], function (exports, _head) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: '',
    model: Ember.inject.service('head-data'),
    layout: _head.default
  });
});
;define('mdeditor/components/head-layout', ['exports', 'ember-cli-head/components/head-layout'], function (exports, _headLayout) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _headLayout.default;
    }
  });
});
;define("mdeditor/components/illiquid-model", ["exports", "liquid-fire/components/illiquid-model"], function (exports, _illiquidModel) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _illiquidModel.default;
    }
  });
});
;define('mdeditor/components/image-layer', ['exports', 'ember-leaflet/components/image-layer'], function (exports, _imageLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _imageLayer.default;
    }
  });
});
;define('mdeditor/components/interactive-layer', ['exports', 'ember-leaflet/components/interactive-layer'], function (exports, _interactiveLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _interactiveLayer.default;
    }
  });
});
;define('mdeditor/components/layer-control', ['exports', 'ember-leaflet-layer-control/components/layer-control'], function (exports, _layerControl) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _layerControl.default;
    }
  });
});
;define('mdeditor/components/layer-group', ['exports', 'ember-leaflet-layer-control/components/layer-group'], function (exports, _layerGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _layerGroup.default;
    }
  });
});
;define('mdeditor/components/leaflet-draw', ['exports', 'ember-leaflet-table/components/leaflet-draw'], function (exports, _leafletDraw) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _leafletDraw.default;
    }
  });
});
;define('mdeditor/components/leaflet-map', ['exports', 'ember-leaflet/components/leaflet-map'], function (exports, _leafletMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _leafletMap.default;
    }
  });
});
;define('mdeditor/components/leaflet-table-row-actions', ['exports', 'ember-leaflet-table/components/leaflet-table-row-actions'], function (exports, _leafletTableRowActions) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _leafletTableRowActions.default;
    }
  });
});
;define('mdeditor/components/leaflet-table-row', ['exports', 'ember-leaflet-table/components/leaflet-table-row'], function (exports, _leafletTableRow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _leafletTableRow.default;
    }
  });
});
;define('mdeditor/components/leaflet-table', ['exports', 'ember-leaflet-table/components/leaflet-table'], function (exports, _leafletTable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _leafletTable.default;
    }
  });
});
;define('mdeditor/components/lgeojson-layer', ['exports', 'ember-leaflet-table/components/lgeojson-layer'], function (exports, _lgeojsonLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lgeojsonLayer.default;
    }
  });
});
;define("mdeditor/components/liquid-bind", ["exports", "liquid-fire/components/liquid-bind"], function (exports, _liquidBind) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidBind.default;
    }
  });
});
;define("mdeditor/components/liquid-child", ["exports", "liquid-fire/components/liquid-child"], function (exports, _liquidChild) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidChild.default;
    }
  });
});
;define("mdeditor/components/liquid-container", ["exports", "liquid-fire/components/liquid-container"], function (exports, _liquidContainer) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidContainer.default;
    }
  });
});
;define("mdeditor/components/liquid-if", ["exports", "liquid-fire/components/liquid-if"], function (exports, _liquidIf) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidIf.default;
    }
  });
});
;define("mdeditor/components/liquid-measured", ["exports", "liquid-fire/components/liquid-measured"], function (exports, _liquidMeasured) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.default;
    }
  });
  Object.defineProperty(exports, "measure", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.measure;
    }
  });
});
;define("mdeditor/components/liquid-outlet", ["exports", "liquid-fire/components/liquid-outlet"], function (exports, _liquidOutlet) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidOutlet.default;
    }
  });
});
;define("mdeditor/components/liquid-spacer", ["exports", "liquid-fire/components/liquid-spacer"], function (exports, _liquidSpacer) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidSpacer.default;
    }
  });
});
;define('mdeditor/components/liquid-sync', ['exports', 'liquid-fire/components/liquid-sync'], function (exports, _liquidSync) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidSync.default;
    }
  });
});
;define("mdeditor/components/liquid-unless", ["exports", "liquid-fire/components/liquid-unless"], function (exports, _liquidUnless) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidUnless.default;
    }
  });
});
;define("mdeditor/components/liquid-versions", ["exports", "liquid-fire/components/liquid-versions"], function (exports, _liquidVersions) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidVersions.default;
    }
  });
});
;define('mdeditor/components/marker-layer', ['exports', 'ember-leaflet/components/marker-layer'], function (exports, _markerLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _markerLayer.default;
    }
  });
});
;define('mdeditor/components/modal-dialog-overlay', ['exports', 'ember-modal-dialog/components/modal-dialog-overlay'], function (exports, _modalDialogOverlay) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _modalDialogOverlay.default;
    }
  });
});
;define('mdeditor/components/modal-dialog', ['exports', 'ember-modal-dialog/components/modal-dialog'], function (exports, _modalDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _modalDialog.default;
    }
  });
});
;define('mdeditor/components/models-table-server-paginated', ['exports', 'ember-models-table/components/models-table-server-paginated'], function (exports, _modelsTableServerPaginated) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _modelsTableServerPaginated.default;
    }
  });
});
;define('mdeditor/components/models-table', ['exports', 'ember-models-table/components/models-table'], function (exports, _modelsTable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _modelsTable.default;
});
;define('mdeditor/components/models-table/cell-column-summary', ['exports', 'ember-models-table/components/models-table/cell-column-summary'], function (exports, _cellColumnSummary) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cellColumnSummary.default;
    }
  });
});
;define('mdeditor/components/models-table/cell-content-display', ['exports', 'ember-models-table/components/models-table/cell-content-display'], function (exports, _cellContentDisplay) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cellContentDisplay.default;
    }
  });
});
;define('mdeditor/components/models-table/cell-content-edit', ['exports', 'ember-models-table/components/models-table/cell-content-edit'], function (exports, _cellContentEdit) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cellContentEdit.default;
    }
  });
});
;define('mdeditor/components/models-table/cell-edit-toggle', ['exports', 'ember-models-table/components/models-table/cell-edit-toggle'], function (exports, _cellEditToggle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cellEditToggle.default;
    }
  });
});
;define('mdeditor/components/models-table/cell', ['exports', 'ember-models-table/components/models-table/cell'], function (exports, _cell) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cell.default;
    }
  });
});
;define('mdeditor/components/models-table/columns-dropdown', ['exports', 'ember-models-table/components/models-table/columns-dropdown'], function (exports, _columnsDropdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _columnsDropdown.default;
    }
  });
});
;define('mdeditor/components/models-table/columns-hidden', ['exports', 'ember-models-table/components/models-table/columns-hidden'], function (exports, _columnsHidden) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _columnsHidden.default;
    }
  });
});
;define('mdeditor/components/models-table/data-group-by-select', ['exports', 'ember-models-table/components/models-table/data-group-by-select'], function (exports, _dataGroupBySelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dataGroupBySelect.default;
    }
  });
});
;define('mdeditor/components/models-table/footer', ['exports', 'ember-models-table/components/models-table/footer'], function (exports, _footer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _footer.default;
    }
  });
});
;define('mdeditor/components/models-table/global-filter', ['exports', 'ember-models-table/components/models-table/global-filter'], function (exports, _globalFilter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _globalFilter.default;
    }
  });
});
;define('mdeditor/components/models-table/group-summary-row', ['exports', 'ember-models-table/components/models-table/group-summary-row'], function (exports, _groupSummaryRow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _groupSummaryRow.default;
    }
  });
});
;define('mdeditor/components/models-table/grouped-header', ['exports', 'ember-models-table/components/models-table/grouped-header'], function (exports, _groupedHeader) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _groupedHeader.default;
    }
  });
});
;define('mdeditor/components/models-table/no-data', ['exports', 'ember-models-table/components/models-table/no-data'], function (exports, _noData) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _noData.default;
    }
  });
});
;define('mdeditor/components/models-table/page-size-select', ['exports', 'ember-models-table/components/models-table/page-size-select'], function (exports, _pageSizeSelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pageSizeSelect.default;
    }
  });
});
;define('mdeditor/components/models-table/pagination-numeric', ['exports', 'ember-models-table/components/models-table/pagination-numeric'], function (exports, _paginationNumeric) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _paginationNumeric.default;
    }
  });
});
;define('mdeditor/components/models-table/pagination-simple', ['exports', 'ember-models-table/components/models-table/pagination-simple'], function (exports, _paginationSimple) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _paginationSimple.default;
    }
  });
});
;define('mdeditor/components/models-table/row-expand', ['exports', 'ember-models-table/components/models-table/row-expand'], function (exports, _rowExpand) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowExpand.default;
    }
  });
});
;define('mdeditor/components/models-table/row-filtering-cell', ['exports', 'ember-models-table/components/models-table/row-filtering-cell'], function (exports, _rowFilteringCell) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowFilteringCell.default;
    }
  });
});
;define('mdeditor/components/models-table/row-filtering', ['exports', 'ember-models-table/components/models-table/row-filtering'], function (exports, _rowFiltering) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowFiltering.default;
    }
  });
});
;define('mdeditor/components/models-table/row-group-toggle', ['exports', 'ember-models-table/components/models-table/row-group-toggle'], function (exports, _rowGroupToggle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowGroupToggle.default;
    }
  });
});
;define('mdeditor/components/models-table/row-grouping', ['exports', 'ember-models-table/components/models-table/row-grouping'], function (exports, _rowGrouping) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowGrouping.default;
    }
  });
});
;define('mdeditor/components/models-table/row-sorting-cell', ['exports', 'ember-models-table/components/models-table/row-sorting-cell'], function (exports, _rowSortingCell) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowSortingCell.default;
    }
  });
});
;define('mdeditor/components/models-table/row-sorting', ['exports', 'ember-models-table/components/models-table/row-sorting'], function (exports, _rowSorting) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowSorting.default;
    }
  });
});
;define('mdeditor/components/models-table/row', ['exports', 'ember-models-table/components/models-table/row'], function (exports, _row) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _row.default;
    }
  });
});
;define('mdeditor/components/models-table/select', ['exports', 'ember-models-table/components/models-table/select'], function (exports, _select) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _select.default;
    }
  });
});
;define('mdeditor/components/models-table/summary', ['exports', 'ember-models-table/components/models-table/summary'], function (exports, _summary) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _summary.default;
    }
  });
});
;define('mdeditor/components/models-table/table-body', ['exports', 'ember-models-table/components/models-table/table-body'], function (exports, _tableBody) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tableBody.default;
    }
  });
});
;define('mdeditor/components/models-table/table-footer', ['exports', 'ember-models-table/components/models-table/table-footer'], function (exports, _tableFooter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tableFooter.default;
    }
  });
});
;define('mdeditor/components/models-table/table-header', ['exports', 'ember-models-table/components/models-table/table-header'], function (exports, _tableHeader) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tableHeader.default;
    }
  });
});
;define('mdeditor/components/models-table/table', ['exports', 'ember-models-table/components/models-table/table'], function (exports, _table) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _table.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/bootstrap4/columns-dropdown', ['exports', 'ember-models-table/components/models-table/themes/bootstrap4/columns-dropdown'], function (exports, _columnsDropdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _columnsDropdown.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/bootstrap4/data-group-by-select', ['exports', 'ember-models-table/components/models-table/themes/bootstrap4/data-group-by-select'], function (exports, _dataGroupBySelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dataGroupBySelect.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/bootstrap4/global-filter', ['exports', 'ember-models-table/components/models-table/themes/bootstrap4/global-filter'], function (exports, _globalFilter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _globalFilter.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/bootstrap4/row-filtering-cell', ['exports', 'ember-models-table/components/models-table/themes/bootstrap4/row-filtering-cell'], function (exports, _rowFilteringCell) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowFilteringCell.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v3/columns-dropdown', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v3/columns-dropdown'], function (exports, _columnsDropdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _columnsDropdown.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v3/data-group-by-select', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v3/data-group-by-select'], function (exports, _dataGroupBySelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dataGroupBySelect.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v3/global-filter', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v3/global-filter'], function (exports, _globalFilter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _globalFilter.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v3/row-filtering-cell', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v3/row-filtering-cell'], function (exports, _rowFilteringCell) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowFilteringCell.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v3/summary', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v3/summary'], function (exports, _summary) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _summary.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v4/columns-dropdown', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v4/columns-dropdown'], function (exports, _columnsDropdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _columnsDropdown.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v4/data-group-by-select', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v4/data-group-by-select'], function (exports, _dataGroupBySelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dataGroupBySelect.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v4/global-filter', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v4/global-filter'], function (exports, _globalFilter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _globalFilter.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v4/row-filtering-cell', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v4/row-filtering-cell'], function (exports, _rowFilteringCell) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowFilteringCell.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-bootstrap-v4/summary', ['exports', 'ember-models-table/components/models-table/themes/ember-bootstrap-v4/summary'], function (exports, _summary) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _summary.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-semanticui/row-filtering-cell', ['exports', 'ember-models-table/components/models-table/themes/ember-semanticui/row-filtering-cell'], function (exports, _rowFilteringCell) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowFilteringCell.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/ember-semanticui/select', ['exports', 'ember-models-table/components/models-table/themes/ember-semanticui/select'], function (exports, _select) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _select.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/semanticui/columns-dropdown', ['exports', 'ember-models-table/components/models-table/themes/semanticui/columns-dropdown'], function (exports, _columnsDropdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _columnsDropdown.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/semanticui/data-group-by-select', ['exports', 'ember-models-table/components/models-table/themes/semanticui/data-group-by-select'], function (exports, _dataGroupBySelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dataGroupBySelect.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/semanticui/global-filter', ['exports', 'ember-models-table/components/models-table/themes/semanticui/global-filter'], function (exports, _globalFilter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _globalFilter.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/semanticui/pagination-numeric', ['exports', 'ember-models-table/components/models-table/themes/semanticui/pagination-numeric'], function (exports, _paginationNumeric) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _paginationNumeric.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/semanticui/pagination-simple', ['exports', 'ember-models-table/components/models-table/themes/semanticui/pagination-simple'], function (exports, _paginationSimple) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _paginationSimple.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/semanticui/row-filtering-cell', ['exports', 'ember-models-table/components/models-table/themes/semanticui/row-filtering-cell'], function (exports, _rowFilteringCell) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rowFilteringCell.default;
    }
  });
});
;define('mdeditor/components/models-table/themes/semanticui/select', ['exports', 'ember-models-table/components/models-table/themes/semanticui/select'], function (exports, _select) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _select.default;
    }
  });
});
;define('mdeditor/components/multiple-from-elsewhere', ['exports', 'ember-elsewhere/components/multiple-from-elsewhere'], function (exports, _multipleFromElsewhere) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _multipleFromElsewhere.default;
    }
  });
});
;define('mdeditor/components/multiselect-checkboxes', ['exports', 'ember-multiselect-checkboxes/components/multiselect-checkboxes'], function (exports, _multiselectCheckboxes) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _multiselectCheckboxes.default;
    }
  });
});
;define('mdeditor/components/nestable-draggable-object', ['exports', 'ember-json-tree/components/nestable-draggable-object'], function (exports, _nestableDraggableObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _nestableDraggableObject.default;
    }
  });
});
;define('mdeditor/components/object-bin', ['exports', 'ember-drag-drop/components/object-bin'], function (exports, _objectBin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _objectBin.default;
});
;define('mdeditor/components/path-layer', ['exports', 'ember-leaflet/components/path-layer'], function (exports, _pathLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pathLayer.default;
    }
  });
});
;define('mdeditor/components/point-path-layer', ['exports', 'ember-leaflet/components/point-path-layer'], function (exports, _pointPathLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pointPathLayer.default;
    }
  });
});
;define('mdeditor/components/polygon-layer', ['exports', 'ember-leaflet/components/polygon-layer'], function (exports, _polygonLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _polygonLayer.default;
    }
  });
});
;define('mdeditor/components/polyline-layer', ['exports', 'ember-leaflet/components/polyline-layer'], function (exports, _polylineLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _polylineLayer.default;
    }
  });
});
;define('mdeditor/components/popup-layer', ['exports', 'ember-leaflet/components/popup-layer'], function (exports, _popupLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _popupLayer.default;
    }
  });
});
;define('mdeditor/components/power-select-multiple-with-create', ['exports', 'ember-power-select-with-create/components/power-select-multiple-with-create'], function (exports, _powerSelectMultipleWithCreate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelectMultipleWithCreate.default;
    }
  });
});
;define('mdeditor/components/power-select-multiple', ['exports', 'ember-power-select/components/power-select-multiple'], function (exports, _powerSelectMultiple) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelectMultiple.default;
    }
  });
});
;define('mdeditor/components/power-select-multiple/trigger', ['exports', 'ember-power-select/components/power-select-multiple/trigger'], function (exports, _trigger) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
;define('mdeditor/components/power-select-with-create', ['exports', 'ember-power-select-with-create/components/power-select-with-create'], function (exports, _powerSelectWithCreate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelectWithCreate.default;
    }
  });
});
;define('mdeditor/components/power-select-with-create/suggested-option', ['exports', 'ember-power-select-with-create/components/power-select-with-create/suggested-option'], function (exports, _suggestedOption) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _suggestedOption.default;
    }
  });
});
;define('mdeditor/components/power-select', ['exports', 'ember-power-select/components/power-select'], function (exports, _powerSelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelect.default;
    }
  });
});
;define('mdeditor/components/power-select/before-options', ['exports', 'ember-power-select/components/power-select/before-options'], function (exports, _beforeOptions) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _beforeOptions.default;
    }
  });
});
;define('mdeditor/components/power-select/options', ['exports', 'ember-power-select/components/power-select/options'], function (exports, _options) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _options.default;
    }
  });
});
;define('mdeditor/components/power-select/placeholder', ['exports', 'ember-power-select/components/power-select/placeholder'], function (exports, _placeholder) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _placeholder.default;
    }
  });
});
;define('mdeditor/components/power-select/power-select-group', ['exports', 'ember-power-select/components/power-select/power-select-group'], function (exports, _powerSelectGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelectGroup.default;
    }
  });
});
;define('mdeditor/components/power-select/search-message', ['exports', 'ember-power-select/components/power-select/search-message'], function (exports, _searchMessage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _searchMessage.default;
    }
  });
});
;define('mdeditor/components/power-select/trigger', ['exports', 'ember-power-select/components/power-select/trigger'], function (exports, _trigger) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
;define('mdeditor/components/sb-publisher', ['exports', 'mdeditor-sciencebase/components/sb-publisher'], function (exports, _sbPublisher) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sbPublisher.default;
    }
  });
});
;define('mdeditor/components/sb-settings', ['exports', 'mdeditor-sciencebase/components/sb-settings'], function (exports, _sbSettings) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sbSettings.default;
    }
  });
});
;define('mdeditor/components/sb-tree-label', ['exports', 'mdeditor-sciencebase/components/sb-tree-label'], function (exports, _sbTreeLabel) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sbTreeLabel.default;
    }
  });
});
;define('mdeditor/components/sb-tree', ['exports', 'mdeditor-sciencebase/components/sb-tree'], function (exports, _sbTree) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sbTree.default;
    }
  });
});
;define('mdeditor/components/simple-mde', ['exports', 'ember-simplemde/components/simple-mde'], function (exports, _simpleMde) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _simpleMde.default;
    }
  });
});
;define('mdeditor/components/sortable-objects', ['exports', 'ember-drag-drop/components/sortable-objects'], function (exports, _sortableObjects) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _sortableObjects.default;
});
;define('mdeditor/components/tether-dialog', ['exports', 'ember-modal-dialog/components/deprecated-tether-dialog'], function (exports, _deprecatedTetherDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _deprecatedTetherDialog.default;
    }
  });
});
;define('mdeditor/components/tile-layer', ['exports', 'ember-leaflet/components/tile-layer'], function (exports, _tileLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tileLayer.default;
    }
  });
});
;define('mdeditor/components/to-elsewhere', ['exports', 'ember-elsewhere/components/to-elsewhere'], function (exports, _toElsewhere) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toElsewhere.default;
    }
  });
});
;define('mdeditor/components/tooltip-layer', ['exports', 'ember-leaflet/components/tooltip-layer'], function (exports, _tooltipLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tooltipLayer.default;
    }
  });
});
;define('mdeditor/components/tree-branch', ['exports', 'ember-json-tree/components/tree-branch'], function (exports, _treeBranch) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _treeBranch.default;
    }
  });
});
;define('mdeditor/components/tree-label', ['exports', 'ember-json-tree/components/tree-label'], function (exports, _treeLabel) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _treeLabel.default;
    }
  });
});
;define('mdeditor/components/tree-leaf', ['exports', 'ember-json-tree/components/tree-leaf'], function (exports, _treeLeaf) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _treeLeaf.default;
    }
  });
});
;define('mdeditor/components/tree-search', ['exports', 'ember-json-tree/components/tree-search'], function (exports, _treeSearch) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _treeSearch.default;
    }
  });
});
;define('mdeditor/components/tree-view', ['exports', 'ember-json-tree/components/tree-view'], function (exports, _treeView) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _treeView.default;
    }
  });
});
;define('mdeditor/components/video-layer', ['exports', 'ember-leaflet/components/video-layer'], function (exports, _videoLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _videoLayer.default;
    }
  });
});
;define('mdeditor/components/welcome-page', ['exports', 'ember-welcome-page/components/welcome-page'], function (exports, _welcomePage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _welcomePage.default;
    }
  });
});
;define('mdeditor/components/wms-tile-layer', ['exports', 'ember-leaflet/components/wms-tile-layer'], function (exports, _wmsTileLayer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _wmsTileLayer.default;
    }
  });
});
;define('mdeditor/components/x-toggle-label', ['exports', 'ember-toggle/components/x-toggle-label/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _component.default;
    }
  });
});
;define('mdeditor/components/x-toggle-switch', ['exports', 'ember-toggle/components/x-toggle-switch/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _component.default;
    }
  });
});
;define('mdeditor/components/x-toggle', ['exports', 'ember-toggle/components/x-toggle/component', 'mdeditor/config/environment'], function (exports, _component, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const config = _environment.default['ember-toggle'] || {};

  exports.default = _component.default.extend({
    /* eslint-disable ember/avoid-leaking-state-in-ember-objects */
    theme: config.defaultTheme || 'default',
    defaultOffLabel: config.defaultOffLabel || 'Off::off',
    defaultOnLabel: config.defaultOnLabel || 'On::on',
    showLabels: config.defaultShowLabels || false,
    size: config.defaultSize || 'medium'
  });
});
;define('mdeditor/csv2geojson', ['exports', 'csv2geojson'], function (exports, _csv2geojson) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.csv2geojson = undefined;
  exports.csv2geojson = _csv2geojson.default;
});
;define('mdeditor/ember-gestures/recognizers/pan', ['exports', 'ember-gestures/recognizers/pan'], function (exports, _pan) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _pan.default;
});
;define('mdeditor/ember-gestures/recognizers/pinch', ['exports', 'ember-gestures/recognizers/pinch'], function (exports, _pinch) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _pinch.default;
});
;define('mdeditor/ember-gestures/recognizers/press', ['exports', 'ember-gestures/recognizers/press'], function (exports, _press) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _press.default;
});
;define('mdeditor/ember-gestures/recognizers/rotate', ['exports', 'ember-gestures/recognizers/rotate'], function (exports, _rotate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _rotate.default;
});
;define('mdeditor/ember-gestures/recognizers/swipe', ['exports', 'ember-gestures/recognizers/swipe'], function (exports, _swipe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _swipe.default;
});
;define('mdeditor/ember-gestures/recognizers/tap', ['exports', 'ember-gestures/recognizers/tap'], function (exports, _tap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tap.default;
    }
  });
});
;define('mdeditor/ember-gestures/recognizers/vertical-pan', ['exports', 'ember-gestures/recognizers/vertical-pan'], function (exports, _verticalPan) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _verticalPan.default;
    }
  });
});
;define('mdeditor/ember-gestures/recognizers/vertical-swipe', ['exports', 'ember-gestures/recognizers/vertical-swipe'], function (exports, _verticalSwipe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _verticalSwipe.default;
    }
  });
});
;define('mdeditor/ember-json-tree/tests/addon.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | addon');

  QUnit.test('addon/components/nestable-draggable-object.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/nestable-draggable-object.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/tree-branch.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/tree-branch.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/tree-label.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/tree-label.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/tree-leaf.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/tree-leaf.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/tree-search.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/tree-search.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/tree-view.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/tree-view.js should pass ESLint\n\n');
  });

  QUnit.test('addon/helpers/make-range.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/helpers/make-range.js should pass ESLint\n\n');
  });
});
;define('mdeditor/ember-json-tree/tests/app.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | app');

  QUnit.test('app/components/nestable-draggable-object.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/nestable-draggable-object.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/tree-branch.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/tree-branch.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/tree-label.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/tree-label.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/tree-leaf.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/tree-leaf.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/tree-search.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/tree-search.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/tree-view.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/tree-view.js should pass ESLint\n\n');
  });

  QUnit.test('app/helpers/make-range.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/helpers/make-range.js should pass ESLint\n\n');
  });
});
;define('mdeditor/ember-json-tree/tests/templates.template.lint-test', [], function () {
  'use strict';

  QUnit.module('TemplateLint');

  QUnit.test('addon/templates/components/tree-branch.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/tree-branch.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/tree-label.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/tree-label.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/tree-leaf.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/tree-leaf.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/tree-search.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/tree-search.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/tree-view.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/tree-view.hbs should pass TemplateLint.\n\n');
  });
});
;define('mdeditor/ember-leaflet-table/tests/addon.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | addon');

  QUnit.test('addon/components/feature-form.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/feature-form.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/feature-group.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/feature-group.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/feature-table.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/feature-table.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/leaflet-draw.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/leaflet-draw.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/leaflet-table-row-actions.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/leaflet-table-row-actions.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/leaflet-table-row.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/leaflet-table-row.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/leaflet-table.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/leaflet-table.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/lgeojson-layer.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/lgeojson-layer.js should pass ESLint\n\n');
  });
});
;define('mdeditor/ember-leaflet-table/tests/app.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | app');

  QUnit.test('app/components/feature-form.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/feature-form.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/feature-group.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/feature-group.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/feature-table.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/feature-table.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/leaflet-draw.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/leaflet-draw.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/leaflet-table-row-actions.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/leaflet-table-row-actions.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/leaflet-table-row.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/leaflet-table-row.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/leaflet-table.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/leaflet-table.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/lgeojson-layer.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/lgeojson-layer.js should pass ESLint\n\n');
  });

  QUnit.test('app/csv2geojson.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/csv2geojson.js should pass ESLint\n\n');
  });

  QUnit.test('app/geojsoncoords.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/geojsoncoords.js should pass ESLint\n\n');
  });

  QUnit.test('app/shapefile.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/shapefile.js should pass ESLint\n\n');
  });

  QUnit.test('app/togeojson.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/togeojson.js should pass ESLint\n\n');
  });

  QUnit.test('app/uuid.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/uuid.js should pass ESLint\n\n');
  });
});
;define('mdeditor/ember-leaflet-table/tests/templates.template.lint-test', [], function () {
  'use strict';

  QUnit.module('TemplateLint');

  QUnit.test('addon/templates/components/feature-form.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/feature-form.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/leaflet-draw.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/leaflet-draw.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/leaflet-table-row-actions.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/leaflet-table-row-actions.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/leaflet-table.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/leaflet-table.hbs should pass TemplateLint.\n\n');
  });
});
;define('mdeditor/event_dispatcher', ['exports', 'ember-gestures/event_dispatcher', 'mdeditor/config/environment'], function (exports, _event_dispatcher, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const assign = Ember.assign || Ember.merge;

  let gestures = assign({}, {
    emberUseCapture: false,
    removeTracking: false,
    useFastPaths: false
  });
  gestures = assign(gestures, _environment.default.gestures);

  exports.default = _event_dispatcher.default.extend({
    useCapture: gestures.emberUseCapture,
    removeTracking: gestures.removeTracking,
    useFastPaths: gestures.useFastPaths
  });
});
;define('mdeditor/flash/object', ['exports', 'ember-cli-flash/flash/object'], function (exports, _object) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _object.default;
    }
  });
});
;define('mdeditor/formats', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    time: {
      hhmmss: {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric'
      }
    },
    date: {
      hhmmss: {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric'
      }
    },
    number: {
      EUR: {
        style: 'currency',
        currency: 'EUR',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      },
      USD: {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }
    }
  };
});
;define('mdeditor/geojsoncoords', ['exports', 'geojson-coords'], function (exports, _geojsonCoords) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.geojsonCoords = undefined;
  exports.geojsonCoords = _geojsonCoords.default;
});
;define('mdeditor/helpers/abs', ['exports', 'ember-math-helpers/helpers/abs'], function (exports, _abs) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _abs.default;
    }
  });
  Object.defineProperty(exports, 'abs', {
    enumerable: true,
    get: function () {
      return _abs.abs;
    }
  });
});
;define('mdeditor/helpers/acos', ['exports', 'ember-math-helpers/helpers/acos'], function (exports, _acos) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _acos.default;
    }
  });
  Object.defineProperty(exports, 'acos', {
    enumerable: true,
    get: function () {
      return _acos.acos;
    }
  });
});
;define('mdeditor/helpers/acosh', ['exports', 'ember-math-helpers/helpers/acosh'], function (exports, _acosh) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _acosh.default;
    }
  });
  Object.defineProperty(exports, 'acosh', {
    enumerable: true,
    get: function () {
      return _acosh.acosh;
    }
  });
});
;define('mdeditor/helpers/add-em', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addEm = addEm;
  function addEm(params) {
    return params.reduce((a, b) => Number(a) + Number(b));
  }

  exports.default = Ember.Helper.helper(addEm);
});
;define('mdeditor/helpers/add', ['exports', 'ember-math-helpers/helpers/add'], function (exports, _add) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _add.default;
    }
  });
  Object.defineProperty(exports, 'add', {
    enumerable: true,
    get: function () {
      return _add.add;
    }
  });
});
;define('mdeditor/helpers/and', ['exports', 'ember-truth-helpers/helpers/and'], function (exports, _and) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _and.default;
    }
  });
  Object.defineProperty(exports, 'and', {
    enumerable: true,
    get: function () {
      return _and.and;
    }
  });
});
;define('mdeditor/helpers/app-version', ['exports', 'mdeditor/config/environment', 'ember-cli-app-version/utils/regexp'], function (exports, _environment, _regexp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.appVersion = appVersion;
  function appVersion(_, hash = {}) {
    const version = _environment.default.APP.version;
    // e.g. 1.0.0-alpha.1+4jds75hf

    // Allow use of 'hideSha' and 'hideVersion' For backwards compatibility
    let versionOnly = hash.versionOnly || hash.hideSha;
    let shaOnly = hash.shaOnly || hash.hideVersion;

    let match = null;

    if (versionOnly) {
      if (hash.showExtended) {
        match = version.match(_regexp.versionExtendedRegExp); // 1.0.0-alpha.1
      }
      // Fallback to just version
      if (!match) {
        match = version.match(_regexp.versionRegExp); // 1.0.0
      }
    }

    if (shaOnly) {
      match = version.match(_regexp.shaRegExp); // 4jds75hf
    }

    return match ? match[0] : version;
  }

  exports.default = Ember.Helper.helper(appVersion);
});
;define('mdeditor/helpers/append', ['exports', 'ember-composable-helpers/helpers/append'], function (exports, _append) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _append.default;
    }
  });
  Object.defineProperty(exports, 'append', {
    enumerable: true,
    get: function () {
      return _append.append;
    }
  });
});
;define('mdeditor/helpers/array', ['exports', 'ember-composable-helpers/helpers/array'], function (exports, _array) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _array.default;
    }
  });
  Object.defineProperty(exports, 'array', {
    enumerable: true,
    get: function () {
      return _array.array;
    }
  });
});
;define('mdeditor/helpers/asin', ['exports', 'ember-math-helpers/helpers/asin'], function (exports, _asin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _asin.default;
    }
  });
  Object.defineProperty(exports, 'asin', {
    enumerable: true,
    get: function () {
      return _asin.asin;
    }
  });
});
;define('mdeditor/helpers/asinh', ['exports', 'ember-math-helpers/helpers/asinh'], function (exports, _asinh) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _asinh.default;
    }
  });
  Object.defineProperty(exports, 'asinh', {
    enumerable: true,
    get: function () {
      return _asinh.asinh;
    }
  });
});
;define('mdeditor/helpers/atan', ['exports', 'ember-math-helpers/helpers/atan'], function (exports, _atan) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _atan.default;
    }
  });
  Object.defineProperty(exports, 'atan', {
    enumerable: true,
    get: function () {
      return _atan.atan;
    }
  });
});
;define('mdeditor/helpers/atan2', ['exports', 'ember-math-helpers/helpers/atan2'], function (exports, _atan) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _atan.default;
    }
  });
  Object.defineProperty(exports, 'atan2', {
    enumerable: true,
    get: function () {
      return _atan.atan2;
    }
  });
});
;define('mdeditor/helpers/atanh', ['exports', 'ember-math-helpers/helpers/atanh'], function (exports, _atanh) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _atanh.default;
    }
  });
  Object.defineProperty(exports, 'atanh', {
    enumerable: true,
    get: function () {
      return _atanh.atanh;
    }
  });
});
;define('mdeditor/helpers/bbox-to-poly', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.bboxToPoly = bboxToPoly;
  function bboxToPoly(params /*, hash*/) {
    let bbox = params[0];

    if (!(bbox.southLatitude && bbox.westLongitude && bbox.northLatitude && bbox.eastLongitude)) {
      return null;
    }

    return [[bbox.southLatitude, bbox.westLongitude], [bbox.northLatitude, bbox.westLongitude], [bbox.northLatitude, bbox.eastLongitude], [bbox.southLatitude, bbox.eastLongitude]];
  }

  exports.default = Ember.Helper.helper(bboxToPoly);
});
;define('mdeditor/helpers/camelize', ['exports', 'ember-cli-string-helpers/helpers/camelize'], function (exports, _camelize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _camelize.default;
    }
  });
  Object.defineProperty(exports, 'camelize', {
    enumerable: true,
    get: function () {
      return _camelize.camelize;
    }
  });
});
;define('mdeditor/helpers/cancel-all', ['exports', 'ember-concurrency/helpers/cancel-all'], function (exports, _cancelAll) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cancelAll.default;
    }
  });
});
;define('mdeditor/helpers/capitalize', ['exports', 'ember-cli-string-helpers/helpers/capitalize'], function (exports, _capitalize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _capitalize.default;
    }
  });
  Object.defineProperty(exports, 'capitalize', {
    enumerable: true,
    get: function () {
      return _capitalize.capitalize;
    }
  });
});
;define('mdeditor/helpers/cbrt', ['exports', 'ember-math-helpers/helpers/cbrt'], function (exports, _cbrt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cbrt.default;
    }
  });
  Object.defineProperty(exports, 'cbrt', {
    enumerable: true,
    get: function () {
      return _cbrt.cbrt;
    }
  });
});
;define('mdeditor/helpers/ceil', ['exports', 'ember-math-helpers/helpers/ceil'], function (exports, _ceil) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ceil.default;
    }
  });
  Object.defineProperty(exports, 'ceil', {
    enumerable: true,
    get: function () {
      return _ceil.ceil;
    }
  });
});
;define('mdeditor/helpers/chunk', ['exports', 'ember-composable-helpers/helpers/chunk'], function (exports, _chunk) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _chunk.default;
    }
  });
  Object.defineProperty(exports, 'chunk', {
    enumerable: true,
    get: function () {
      return _chunk.chunk;
    }
  });
});
;define('mdeditor/helpers/classify', ['exports', 'ember-cli-string-helpers/helpers/classify'], function (exports, _classify) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _classify.default;
    }
  });
  Object.defineProperty(exports, 'classify', {
    enumerable: true,
    get: function () {
      return _classify.classify;
    }
  });
});
;define('mdeditor/helpers/clz32', ['exports', 'ember-math-helpers/helpers/clz32'], function (exports, _clz) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _clz.default;
    }
  });
  Object.defineProperty(exports, 'clz32', {
    enumerable: true,
    get: function () {
      return _clz.clz32;
    }
  });
});
;define('mdeditor/helpers/compact', ['exports', 'ember-composable-helpers/helpers/compact'], function (exports, _compact) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _compact.default;
    }
  });
});
;define('mdeditor/helpers/compute', ['exports', 'ember-composable-helpers/helpers/compute'], function (exports, _compute) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _compute.default;
    }
  });
  Object.defineProperty(exports, 'compute', {
    enumerable: true,
    get: function () {
      return _compute.compute;
    }
  });
});
;define('mdeditor/helpers/contains', ['exports', 'ember-composable-helpers/helpers/contains'], function (exports, _contains) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _contains.default;
    }
  });
  Object.defineProperty(exports, 'contains', {
    enumerable: true,
    get: function () {
      return _contains.contains;
    }
  });
});
;define('mdeditor/helpers/cos', ['exports', 'ember-math-helpers/helpers/cos'], function (exports, _cos) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cos.default;
    }
  });
  Object.defineProperty(exports, 'cos', {
    enumerable: true,
    get: function () {
      return _cos.cos;
    }
  });
});
;define('mdeditor/helpers/cosh', ['exports', 'ember-math-helpers/helpers/cosh'], function (exports, _cosh) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cosh.default;
    }
  });
  Object.defineProperty(exports, 'cosh', {
    enumerable: true,
    get: function () {
      return _cosh.cosh;
    }
  });
});
;define('mdeditor/helpers/dasherize', ['exports', 'ember-cli-string-helpers/helpers/dasherize'], function (exports, _dasherize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dasherize.default;
    }
  });
  Object.defineProperty(exports, 'dasherize', {
    enumerable: true,
    get: function () {
      return _dasherize.dasherize;
    }
  });
});
;define('mdeditor/helpers/dec', ['exports', 'ember-composable-helpers/helpers/dec'], function (exports, _dec) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dec.default;
    }
  });
  Object.defineProperty(exports, 'dec', {
    enumerable: true,
    get: function () {
      return _dec.dec;
    }
  });
});
;define('mdeditor/helpers/div-icon', ['exports', 'ember-leaflet/helpers/div-icon'], function (exports, _divIcon) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _divIcon.default;
    }
  });
  Object.defineProperty(exports, 'divIcon', {
    enumerable: true,
    get: function () {
      return _divIcon.divIcon;
    }
  });
});
;define('mdeditor/helpers/div', ['exports', 'ember-math-helpers/helpers/div'], function (exports, _div) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _div.default;
    }
  });
  Object.defineProperty(exports, 'div', {
    enumerable: true,
    get: function () {
      return _div.div;
    }
  });
});
;define('mdeditor/helpers/drop', ['exports', 'ember-composable-helpers/helpers/drop'], function (exports, _drop) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _drop.default;
    }
  });
});
;define('mdeditor/helpers/ember-power-select-is-group', ['exports', 'ember-power-select/helpers/ember-power-select-is-group'], function (exports, _emberPowerSelectIsGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsGroup', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.emberPowerSelectIsGroup;
    }
  });
});
;define('mdeditor/helpers/ember-power-select-is-selected', ['exports', 'ember-power-select/helpers/ember-power-select-is-selected'], function (exports, _emberPowerSelectIsSelected) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsSelected', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.emberPowerSelectIsSelected;
    }
  });
});
;define('mdeditor/helpers/ember-power-select-true-string-if-present', ['exports', 'ember-power-select/helpers/ember-power-select-true-string-if-present'], function (exports, _emberPowerSelectTrueStringIfPresent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectTrueStringIfPresent.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectTrueStringIfPresent', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectTrueStringIfPresent.emberPowerSelectTrueStringIfPresent;
    }
  });
});
;define('mdeditor/helpers/eq', ['exports', 'ember-truth-helpers/helpers/equal'], function (exports, _equal) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _equal.default;
    }
  });
  Object.defineProperty(exports, 'equal', {
    enumerable: true,
    get: function () {
      return _equal.equal;
    }
  });
});
;define('mdeditor/helpers/exists-in', ['exports', 'ember-models-table/helpers/exists-in'], function (exports, _existsIn) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _existsIn.default;
    }
  });
  Object.defineProperty(exports, 'existsIn', {
    enumerable: true,
    get: function () {
      return _existsIn.existsIn;
    }
  });
});
;define('mdeditor/helpers/exp', ['exports', 'ember-math-helpers/helpers/exp'], function (exports, _exp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _exp.default;
    }
  });
  Object.defineProperty(exports, 'exp', {
    enumerable: true,
    get: function () {
      return _exp.exp;
    }
  });
});
;define('mdeditor/helpers/expm1', ['exports', 'ember-math-helpers/helpers/expm1'], function (exports, _expm) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _expm.default;
    }
  });
  Object.defineProperty(exports, 'expm1', {
    enumerable: true,
    get: function () {
      return _expm.expm1;
    }
  });
});
;define('mdeditor/helpers/filter-by', ['exports', 'ember-composable-helpers/helpers/filter-by'], function (exports, _filterBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _filterBy.default;
    }
  });
});
;define('mdeditor/helpers/filter', ['exports', 'ember-composable-helpers/helpers/filter'], function (exports, _filter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _filter.default;
    }
  });
});
;define('mdeditor/helpers/find-by', ['exports', 'ember-composable-helpers/helpers/find-by'], function (exports, _findBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _findBy.default;
    }
  });
});
;define('mdeditor/helpers/flatten', ['exports', 'ember-composable-helpers/helpers/flatten'], function (exports, _flatten) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flatten.default;
    }
  });
  Object.defineProperty(exports, 'flatten', {
    enumerable: true,
    get: function () {
      return _flatten.flatten;
    }
  });
});
;define('mdeditor/helpers/floor', ['exports', 'ember-math-helpers/helpers/floor'], function (exports, _floor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _floor.default;
    }
  });
  Object.defineProperty(exports, 'floor', {
    enumerable: true,
    get: function () {
      return _floor.floor;
    }
  });
});
;define('mdeditor/helpers/fround', ['exports', 'ember-math-helpers/helpers/fround'], function (exports, _fround) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _fround.default;
    }
  });
  Object.defineProperty(exports, 'fround', {
    enumerable: true,
    get: function () {
      return _fround.fround;
    }
  });
});
;define('mdeditor/helpers/gcd', ['exports', 'ember-math-helpers/helpers/gcd'], function (exports, _gcd) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _gcd.default;
    }
  });
  Object.defineProperty(exports, 'gcd', {
    enumerable: true,
    get: function () {
      return _gcd.gcd;
    }
  });
});
;define('mdeditor/helpers/get-dash', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getDash = getDash;
  function getDash(params /*, hash*/) {
    let obj = params[0];
    let prop = params[1].trim();
    let val = null;

    if (obj) {
      val = Ember.get(obj, prop);
    }
    return val || "--";
  }

  exports.default = Ember.Helper.helper(getDash);
});
;define('mdeditor/helpers/get-property', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getProperty = getProperty;
  function getProperty([obj, prop]) {
    let val = null;

    if (obj) {
      val = Ember.get(obj, prop.trim());
    }
    return val || Ember.String.htmlSafe("<em>Not Defined</em>");
  }

  exports.default = Ember.Helper.helper(getProperty);
});
;define('mdeditor/helpers/group-by', ['exports', 'ember-composable-helpers/helpers/group-by'], function (exports, _groupBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _groupBy.default;
    }
  });
});
;define('mdeditor/helpers/gt', ['exports', 'ember-truth-helpers/helpers/gt'], function (exports, _gt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _gt.default;
    }
  });
  Object.defineProperty(exports, 'gt', {
    enumerable: true,
    get: function () {
      return _gt.gt;
    }
  });
});
;define('mdeditor/helpers/gte', ['exports', 'ember-truth-helpers/helpers/gte'], function (exports, _gte) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _gte.default;
    }
  });
  Object.defineProperty(exports, 'gte', {
    enumerable: true,
    get: function () {
      return _gte.gte;
    }
  });
});
;define('mdeditor/helpers/has-next', ['exports', 'ember-composable-helpers/helpers/has-next'], function (exports, _hasNext) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hasNext.default;
    }
  });
  Object.defineProperty(exports, 'hasNext', {
    enumerable: true,
    get: function () {
      return _hasNext.hasNext;
    }
  });
});
;define('mdeditor/helpers/has-previous', ['exports', 'ember-composable-helpers/helpers/has-previous'], function (exports, _hasPrevious) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hasPrevious.default;
    }
  });
  Object.defineProperty(exports, 'hasPrevious', {
    enumerable: true,
    get: function () {
      return _hasPrevious.hasPrevious;
    }
  });
});
;define('mdeditor/helpers/html-safe', ['exports', 'ember-models-table/helpers/html-safe'], function (exports, _htmlSafe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _htmlSafe.default;
    }
  });
  Object.defineProperty(exports, 'htmlSafe', {
    enumerable: true,
    get: function () {
      return _htmlSafe.htmlSafe;
    }
  });
});
;define('mdeditor/helpers/humanize', ['exports', 'ember-cli-string-helpers/helpers/humanize'], function (exports, _humanize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _humanize.default;
    }
  });
  Object.defineProperty(exports, 'humanize', {
    enumerable: true,
    get: function () {
      return _humanize.humanize;
    }
  });
});
;define('mdeditor/helpers/hypot', ['exports', 'ember-math-helpers/helpers/hypot'], function (exports, _hypot) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hypot.default;
    }
  });
  Object.defineProperty(exports, 'hypot', {
    enumerable: true,
    get: function () {
      return _hypot.hypot;
    }
  });
});
;define('mdeditor/helpers/icon', ['exports', 'ember-leaflet/helpers/icon'], function (exports, _icon) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _icon.default;
    }
  });
  Object.defineProperty(exports, 'icon', {
    enumerable: true,
    get: function () {
      return _icon.icon;
    }
  });
});
;define('mdeditor/helpers/ignore-children', ['exports', 'ember-ignore-children-helper/helpers/ignore-children'], function (exports, _ignoreChildren) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ignoreChildren.default;
    }
  });
  Object.defineProperty(exports, 'ignoreChildren', {
    enumerable: true,
    get: function () {
      return _ignoreChildren.ignoreChildren;
    }
  });
});
;define('mdeditor/helpers/imul', ['exports', 'ember-math-helpers/helpers/imul'], function (exports, _imul) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _imul.default;
    }
  });
  Object.defineProperty(exports, 'imul', {
    enumerable: true,
    get: function () {
      return _imul.imul;
    }
  });
});
;define('mdeditor/helpers/inc', ['exports', 'ember-composable-helpers/helpers/inc'], function (exports, _inc) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _inc.default;
    }
  });
  Object.defineProperty(exports, 'inc', {
    enumerable: true,
    get: function () {
      return _inc.inc;
    }
  });
});
;define('mdeditor/helpers/intersect', ['exports', 'ember-composable-helpers/helpers/intersect'], function (exports, _intersect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _intersect.default;
    }
  });
});
;define('mdeditor/helpers/invoke', ['exports', 'ember-composable-helpers/helpers/invoke'], function (exports, _invoke) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _invoke.default;
    }
  });
  Object.defineProperty(exports, 'invoke', {
    enumerable: true,
    get: function () {
      return _invoke.invoke;
    }
  });
});
;define('mdeditor/helpers/is-after', ['exports', 'ember-moment/helpers/is-after'], function (exports, _isAfter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isAfter.default;
    }
  });
});
;define('mdeditor/helpers/is-array', ['exports', 'ember-truth-helpers/helpers/is-array'], function (exports, _isArray) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isArray.default;
    }
  });
  Object.defineProperty(exports, 'isArray', {
    enumerable: true,
    get: function () {
      return _isArray.isArray;
    }
  });
});
;define('mdeditor/helpers/is-before', ['exports', 'ember-moment/helpers/is-before'], function (exports, _isBefore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isBefore.default;
    }
  });
});
;define('mdeditor/helpers/is-between', ['exports', 'ember-moment/helpers/is-between'], function (exports, _isBetween) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isBetween.default;
    }
  });
});
;define('mdeditor/helpers/is-empty', ['exports', 'ember-truth-helpers/helpers/is-empty'], function (exports, _isEmpty) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isEmpty.default;
    }
  });
});
;define('mdeditor/helpers/is-equal', ['exports', 'ember-truth-helpers/helpers/is-equal'], function (exports, _isEqual) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isEqual.default;
    }
  });
  Object.defineProperty(exports, 'isEqual', {
    enumerable: true,
    get: function () {
      return _isEqual.isEqual;
    }
  });
});
;define('mdeditor/helpers/is-same-or-after', ['exports', 'ember-moment/helpers/is-same-or-after'], function (exports, _isSameOrAfter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isSameOrAfter.default;
    }
  });
});
;define('mdeditor/helpers/is-same-or-before', ['exports', 'ember-moment/helpers/is-same-or-before'], function (exports, _isSameOrBefore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isSameOrBefore.default;
    }
  });
});
;define('mdeditor/helpers/is-same', ['exports', 'ember-moment/helpers/is-same'], function (exports, _isSame) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isSame.default;
    }
  });
});
;define('mdeditor/helpers/join', ['exports', 'ember-composable-helpers/helpers/join'], function (exports, _join) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _join.default;
    }
  });
});
;define('mdeditor/helpers/lat-lng-bounds', ['exports', 'ember-leaflet/helpers/lat-lng-bounds'], function (exports, _latLngBounds) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _latLngBounds.default;
    }
  });
  Object.defineProperty(exports, 'latLngBounds', {
    enumerable: true,
    get: function () {
      return _latLngBounds.latLngBounds;
    }
  });
});
;define('mdeditor/helpers/lcm', ['exports', 'ember-math-helpers/helpers/lcm'], function (exports, _lcm) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lcm.default;
    }
  });
  Object.defineProperty(exports, 'lcm', {
    enumerable: true,
    get: function () {
      return _lcm.lcm;
    }
  });
});
;define('mdeditor/helpers/lf-lock-model', ['exports', 'liquid-fire/helpers/lf-lock-model'], function (exports, _lfLockModel) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lfLockModel.default;
    }
  });
  Object.defineProperty(exports, 'lfLockModel', {
    enumerable: true,
    get: function () {
      return _lfLockModel.lfLockModel;
    }
  });
});
;define('mdeditor/helpers/lf-or', ['exports', 'liquid-fire/helpers/lf-or'], function (exports, _lfOr) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lfOr.default;
    }
  });
  Object.defineProperty(exports, 'lfOr', {
    enumerable: true,
    get: function () {
      return _lfOr.lfOr;
    }
  });
});
;define('mdeditor/helpers/log-e', ['exports', 'ember-math-helpers/helpers/log-e'], function (exports, _logE) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _logE.default;
    }
  });
  Object.defineProperty(exports, 'logE', {
    enumerable: true,
    get: function () {
      return _logE.logE;
    }
  });
});
;define('mdeditor/helpers/log10', ['exports', 'ember-math-helpers/helpers/log10'], function (exports, _log) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _log.default;
    }
  });
  Object.defineProperty(exports, 'log10', {
    enumerable: true,
    get: function () {
      return _log.log10;
    }
  });
});
;define('mdeditor/helpers/log1p', ['exports', 'ember-math-helpers/helpers/log1p'], function (exports, _log1p) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _log1p.default;
    }
  });
  Object.defineProperty(exports, 'log1p', {
    enumerable: true,
    get: function () {
      return _log1p.log1p;
    }
  });
});
;define('mdeditor/helpers/log2', ['exports', 'ember-math-helpers/helpers/log2'], function (exports, _log) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _log.default;
    }
  });
  Object.defineProperty(exports, 'log2', {
    enumerable: true,
    get: function () {
      return _log.log2;
    }
  });
});
;define('mdeditor/helpers/lowercase', ['exports', 'ember-cli-string-helpers/helpers/lowercase'], function (exports, _lowercase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lowercase.default;
    }
  });
  Object.defineProperty(exports, 'lowercase', {
    enumerable: true,
    get: function () {
      return _lowercase.lowercase;
    }
  });
});
;define('mdeditor/helpers/lt', ['exports', 'ember-truth-helpers/helpers/lt'], function (exports, _lt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lt.default;
    }
  });
  Object.defineProperty(exports, 'lt', {
    enumerable: true,
    get: function () {
      return _lt.lt;
    }
  });
});
;define('mdeditor/helpers/lte', ['exports', 'ember-truth-helpers/helpers/lte'], function (exports, _lte) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lte.default;
    }
  });
  Object.defineProperty(exports, 'lte', {
    enumerable: true,
    get: function () {
      return _lte.lte;
    }
  });
});
;define('mdeditor/helpers/make-range', ['exports', 'ember-json-tree/helpers/make-range'], function (exports, _makeRange) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _makeRange.default;
    }
  });
  Object.defineProperty(exports, 'makeRange', {
    enumerable: true,
    get: function () {
      return _makeRange.makeRange;
    }
  });
});
;define('mdeditor/helpers/map-by', ['exports', 'ember-composable-helpers/helpers/map-by'], function (exports, _mapBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _mapBy.default;
    }
  });
});
;define('mdeditor/helpers/map', ['exports', 'ember-composable-helpers/helpers/map'], function (exports, _map) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _map.default;
    }
  });
});
;define('mdeditor/helpers/max', ['exports', 'ember-math-helpers/helpers/max'], function (exports, _max) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _max.default;
    }
  });
  Object.defineProperty(exports, 'max', {
    enumerable: true,
    get: function () {
      return _max.max;
    }
  });
});
;define('mdeditor/helpers/md-markdown', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.mdMarkdown = mdMarkdown;


  const marked = window.marked;

  function mdMarkdown(params /*, hash*/) {
    marked.setOptions({
      renderer: new marked.Renderer(),
      gfm: true,
      tables: true,
      breaks: false,
      pedantic: false,
      sanitize: false,
      smartLists: true,
      smartypants: false
    });

    if (params[0]) {
      return Ember.String.htmlSafe(marked(params[0]));
    }

    return params[1] || 'No text supplied.';
  }

  exports.default = Ember.Helper.helper(mdMarkdown);
});
;define('mdeditor/helpers/min', ['exports', 'ember-math-helpers/helpers/min'], function (exports, _min) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _min.default;
    }
  });
  Object.defineProperty(exports, 'min', {
    enumerable: true,
    get: function () {
      return _min.min;
    }
  });
});
;define('mdeditor/helpers/mod', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.mod = mod;
  function mod(params) {
    return params.reduce((a, b) => Number(a) % Number(b));
  }

  exports.default = Ember.Helper.helper(mod);
});
;define('mdeditor/helpers/moment-add', ['exports', 'ember-moment/helpers/moment-add'], function (exports, _momentAdd) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentAdd.default;
    }
  });
});
;define('mdeditor/helpers/moment-calendar', ['exports', 'ember-moment/helpers/moment-calendar'], function (exports, _momentCalendar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentCalendar.default;
    }
  });
});
;define('mdeditor/helpers/moment-diff', ['exports', 'ember-moment/helpers/moment-diff'], function (exports, _momentDiff) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentDiff.default;
    }
  });
});
;define('mdeditor/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _momentDuration) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentDuration.default;
    }
  });
});
;define('mdeditor/helpers/moment-format', ['exports', 'ember-moment/helpers/moment-format'], function (exports, _momentFormat) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentFormat.default;
    }
  });
});
;define('mdeditor/helpers/moment-from-now', ['exports', 'ember-moment/helpers/moment-from-now'], function (exports, _momentFromNow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentFromNow.default;
    }
  });
});
;define('mdeditor/helpers/moment-from', ['exports', 'ember-moment/helpers/moment-from'], function (exports, _momentFrom) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentFrom.default;
    }
  });
});
;define('mdeditor/helpers/moment-subtract', ['exports', 'ember-moment/helpers/moment-subtract'], function (exports, _momentSubtract) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentSubtract.default;
    }
  });
});
;define('mdeditor/helpers/moment-to-date', ['exports', 'ember-moment/helpers/moment-to-date'], function (exports, _momentToDate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentToDate.default;
    }
  });
});
;define('mdeditor/helpers/moment-to-now', ['exports', 'ember-moment/helpers/moment-to-now'], function (exports, _momentToNow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentToNow.default;
    }
  });
});
;define('mdeditor/helpers/moment-to', ['exports', 'ember-moment/helpers/moment-to'], function (exports, _momentTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentTo.default;
    }
  });
});
;define('mdeditor/helpers/moment-unix', ['exports', 'ember-moment/helpers/unix'], function (exports, _unix) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
});
;define('mdeditor/helpers/moment', ['exports', 'ember-moment/helpers/moment'], function (exports, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _moment.default;
    }
  });
});
;define('mdeditor/helpers/mult', ['exports', 'ember-math-helpers/helpers/mult'], function (exports, _mult) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _mult.default;
    }
  });
  Object.defineProperty(exports, 'mult', {
    enumerable: true,
    get: function () {
      return _mult.mult;
    }
  });
});
;define('mdeditor/helpers/next', ['exports', 'ember-composable-helpers/helpers/next'], function (exports, _next) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _next.default;
    }
  });
  Object.defineProperty(exports, 'next', {
    enumerable: true,
    get: function () {
      return _next.next;
    }
  });
});
;define('mdeditor/helpers/not-eq', ['exports', 'ember-truth-helpers/helpers/not-equal'], function (exports, _notEqual) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _notEqual.default;
    }
  });
  Object.defineProperty(exports, 'notEq', {
    enumerable: true,
    get: function () {
      return _notEqual.notEq;
    }
  });
});
;define('mdeditor/helpers/not', ['exports', 'ember-truth-helpers/helpers/not'], function (exports, _not) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _not.default;
    }
  });
  Object.defineProperty(exports, 'not', {
    enumerable: true,
    get: function () {
      return _not.not;
    }
  });
});
;define('mdeditor/helpers/now', ['exports', 'ember-moment/helpers/now'], function (exports, _now) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _now.default;
    }
  });
});
;define('mdeditor/helpers/object-at', ['exports', 'ember-composable-helpers/helpers/object-at'], function (exports, _objectAt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _objectAt.default;
    }
  });
  Object.defineProperty(exports, 'objectAt', {
    enumerable: true,
    get: function () {
      return _objectAt.objectAt;
    }
  });
});
;define('mdeditor/helpers/optional', ['exports', 'ember-composable-helpers/helpers/optional'], function (exports, _optional) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _optional.default;
    }
  });
  Object.defineProperty(exports, 'optional', {
    enumerable: true,
    get: function () {
      return _optional.optional;
    }
  });
});
;define('mdeditor/helpers/or', ['exports', 'ember-truth-helpers/helpers/or'], function (exports, _or) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _or.default;
    }
  });
  Object.defineProperty(exports, 'or', {
    enumerable: true,
    get: function () {
      return _or.or;
    }
  });
});
;define('mdeditor/helpers/page-title', ['exports', 'ember-page-title/helpers/page-title'], function (exports, _pageTitle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _pageTitle.default;
});
;define('mdeditor/helpers/perform', ['exports', 'ember-concurrency/helpers/perform'], function (exports, _perform) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _perform.default;
    }
  });
});
;define('mdeditor/helpers/pipe-action', ['exports', 'ember-composable-helpers/helpers/pipe-action'], function (exports, _pipeAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pipeAction.default;
    }
  });
});
;define('mdeditor/helpers/pipe', ['exports', 'ember-composable-helpers/helpers/pipe'], function (exports, _pipe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pipe.default;
    }
  });
  Object.defineProperty(exports, 'pipe', {
    enumerable: true,
    get: function () {
      return _pipe.pipe;
    }
  });
});
;define('mdeditor/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _pluralize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _pluralize.default;
});
;define('mdeditor/helpers/point', ['exports', 'ember-leaflet/helpers/point'], function (exports, _point) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _point.default;
    }
  });
  Object.defineProperty(exports, 'point', {
    enumerable: true,
    get: function () {
      return _point.point;
    }
  });
});
;define('mdeditor/helpers/pow', ['exports', 'ember-math-helpers/helpers/pow'], function (exports, _pow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pow.default;
    }
  });
  Object.defineProperty(exports, 'pow', {
    enumerable: true,
    get: function () {
      return _pow.pow;
    }
  });
});
;define('mdeditor/helpers/present', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.present = present;
  function present(params) {
    return Ember.isPresent(params[0]);
  }

  exports.default = Ember.Helper.helper(present);
});
;define('mdeditor/helpers/previous', ['exports', 'ember-composable-helpers/helpers/previous'], function (exports, _previous) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _previous.default;
    }
  });
  Object.defineProperty(exports, 'previous', {
    enumerable: true,
    get: function () {
      return _previous.previous;
    }
  });
});
;define('mdeditor/helpers/queue', ['exports', 'ember-composable-helpers/helpers/queue'], function (exports, _queue) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _queue.default;
    }
  });
  Object.defineProperty(exports, 'queue', {
    enumerable: true,
    get: function () {
      return _queue.queue;
    }
  });
});
;define('mdeditor/helpers/random', ['exports', 'ember-math-helpers/helpers/random'], function (exports, _random) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _random.default;
    }
  });
  Object.defineProperty(exports, 'random', {
    enumerable: true,
    get: function () {
      return _random.random;
    }
  });
});
;define('mdeditor/helpers/range', ['exports', 'ember-composable-helpers/helpers/range'], function (exports, _range) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _range.default;
    }
  });
  Object.defineProperty(exports, 'range', {
    enumerable: true,
    get: function () {
      return _range.range;
    }
  });
});
;define('mdeditor/helpers/reduce', ['exports', 'ember-composable-helpers/helpers/reduce'], function (exports, _reduce) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _reduce.default;
    }
  });
});
;define('mdeditor/helpers/reject-by', ['exports', 'ember-composable-helpers/helpers/reject-by'], function (exports, _rejectBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rejectBy.default;
    }
  });
});
;define('mdeditor/helpers/repeat', ['exports', 'ember-composable-helpers/helpers/repeat'], function (exports, _repeat) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _repeat.default;
    }
  });
  Object.defineProperty(exports, 'repeat', {
    enumerable: true,
    get: function () {
      return _repeat.repeat;
    }
  });
});
;define('mdeditor/helpers/reverse', ['exports', 'ember-composable-helpers/helpers/reverse'], function (exports, _reverse) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _reverse.default;
    }
  });
});
;define('mdeditor/helpers/round', ['exports', 'ember-math-helpers/helpers/round'], function (exports, _round) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _round.default;
    }
  });
  Object.defineProperty(exports, 'round', {
    enumerable: true,
    get: function () {
      return _round.round;
    }
  });
});
;define('mdeditor/helpers/route-action', ['exports', 'ember-route-action-helper/helpers/route-action'], function (exports, _routeAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _routeAction.default;
    }
  });
});
;define('mdeditor/helpers/shuffle', ['exports', 'ember-composable-helpers/helpers/shuffle'], function (exports, _shuffle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _shuffle.default;
    }
  });
  Object.defineProperty(exports, 'shuffle', {
    enumerable: true,
    get: function () {
      return _shuffle.shuffle;
    }
  });
});
;define('mdeditor/helpers/sign', ['exports', 'ember-math-helpers/helpers/sign'], function (exports, _sign) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sign.default;
    }
  });
  Object.defineProperty(exports, 'sign', {
    enumerable: true,
    get: function () {
      return _sign.sign;
    }
  });
});
;define('mdeditor/helpers/simple-mde-preview', ['exports', 'ember-simplemde/helpers/simple-mde-preview'], function (exports, _simpleMdePreview) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _simpleMdePreview.default;
    }
  });
  Object.defineProperty(exports, 'simpleMdePreview', {
    enumerable: true,
    get: function () {
      return _simpleMdePreview.simpleMdePreview;
    }
  });
});
;define('mdeditor/helpers/sin', ['exports', 'ember-math-helpers/helpers/sin'], function (exports, _sin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sin.default;
    }
  });
  Object.defineProperty(exports, 'sin', {
    enumerable: true,
    get: function () {
      return _sin.sin;
    }
  });
});
;define('mdeditor/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _singularize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _singularize.default;
});
;define('mdeditor/helpers/slice', ['exports', 'ember-composable-helpers/helpers/slice'], function (exports, _slice) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _slice.default;
    }
  });
});
;define('mdeditor/helpers/sort-by', ['exports', 'ember-composable-helpers/helpers/sort-by'], function (exports, _sortBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sortBy.default;
    }
  });
});
;define('mdeditor/helpers/sqrt', ['exports', 'ember-math-helpers/helpers/sqrt'], function (exports, _sqrt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sqrt.default;
    }
  });
  Object.defineProperty(exports, 'sqrt', {
    enumerable: true,
    get: function () {
      return _sqrt.sqrt;
    }
  });
});
;define('mdeditor/helpers/stringify', ['exports', 'ember-models-table/helpers/stringify'], function (exports, _stringify) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _stringify.default;
    }
  });
  Object.defineProperty(exports, 'stringify', {
    enumerable: true,
    get: function () {
      return _stringify.stringify;
    }
  });
});
;define('mdeditor/helpers/sub', ['exports', 'ember-math-helpers/helpers/sub'], function (exports, _sub) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sub.default;
    }
  });
  Object.defineProperty(exports, 'sub', {
    enumerable: true,
    get: function () {
      return _sub.sub;
    }
  });
});
;define('mdeditor/helpers/take', ['exports', 'ember-composable-helpers/helpers/take'], function (exports, _take) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _take.default;
    }
  });
});
;define('mdeditor/helpers/tan', ['exports', 'ember-math-helpers/helpers/tan'], function (exports, _tan) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tan.default;
    }
  });
  Object.defineProperty(exports, 'tan', {
    enumerable: true,
    get: function () {
      return _tan.tan;
    }
  });
});
;define('mdeditor/helpers/tanh', ['exports', 'ember-math-helpers/helpers/tanh'], function (exports, _tanh) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _tanh.default;
    }
  });
  Object.defineProperty(exports, 'tanh', {
    enumerable: true,
    get: function () {
      return _tanh.tanh;
    }
  });
});
;define('mdeditor/helpers/task', ['exports', 'ember-concurrency/helpers/task'], function (exports, _task) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _task.default;
    }
  });
});
;define('mdeditor/helpers/titleize', ['exports', 'ember-cli-string-helpers/helpers/titleize'], function (exports, _titleize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _titleize.default;
    }
  });
  Object.defineProperty(exports, 'titleize', {
    enumerable: true,
    get: function () {
      return _titleize.titleize;
    }
  });
});
;define('mdeditor/helpers/toggle-action', ['exports', 'ember-composable-helpers/helpers/toggle-action'], function (exports, _toggleAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toggleAction.default;
    }
  });
});
;define('mdeditor/helpers/toggle', ['exports', 'ember-composable-helpers/helpers/toggle'], function (exports, _toggle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toggle.default;
    }
  });
  Object.defineProperty(exports, 'toggle', {
    enumerable: true,
    get: function () {
      return _toggle.toggle;
    }
  });
});
;define('mdeditor/helpers/trim', ['exports', 'ember-cli-string-helpers/helpers/trim'], function (exports, _trim) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trim.default;
    }
  });
  Object.defineProperty(exports, 'trim', {
    enumerable: true,
    get: function () {
      return _trim.trim;
    }
  });
});
;define('mdeditor/helpers/trunc', ['exports', 'ember-math-helpers/helpers/trunc'], function (exports, _trunc) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trunc.default;
    }
  });
  Object.defineProperty(exports, 'trunc', {
    enumerable: true,
    get: function () {
      return _trunc.trunc;
    }
  });
});
;define('mdeditor/helpers/truncate', ['exports', 'ember-cli-string-helpers/helpers/truncate'], function (exports, _truncate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _truncate.default;
    }
  });
  Object.defineProperty(exports, 'truncate', {
    enumerable: true,
    get: function () {
      return _truncate.truncate;
    }
  });
});
;define('mdeditor/helpers/uc-words', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ucWords = ucWords;
  function ucWords(params, hash) {
    var string = String(params[0]),
        force = hash.force === true ? true : false;
    if (force) {
      string = string.toLowerCase();
    }
    return string.replace(/(^|\s)[a-z\u00E0-\u00FC]/g, function ($1) {
      return $1.toUpperCase();
    });
  }

  exports.default = Ember.Helper.helper(ucWords);
});
;define('mdeditor/helpers/underscore', ['exports', 'ember-cli-string-helpers/helpers/underscore'], function (exports, _underscore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _underscore.default;
    }
  });
  Object.defineProperty(exports, 'underscore', {
    enumerable: true,
    get: function () {
      return _underscore.underscore;
    }
  });
});
;define('mdeditor/helpers/union', ['exports', 'ember-composable-helpers/helpers/union'], function (exports, _union) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _union.default;
    }
  });
});
;define('mdeditor/helpers/unix', ['exports', 'ember-moment/helpers/unix'], function (exports, _unix) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
});
;define('mdeditor/helpers/uppercase', ['exports', 'ember-cli-string-helpers/helpers/uppercase'], function (exports, _uppercase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _uppercase.default;
    }
  });
  Object.defineProperty(exports, 'uppercase', {
    enumerable: true,
    get: function () {
      return _uppercase.uppercase;
    }
  });
});
;define('mdeditor/helpers/utc', ['exports', 'ember-moment/helpers/utc'], function (exports, _utc) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _utc.default;
    }
  });
  Object.defineProperty(exports, 'utc', {
    enumerable: true,
    get: function () {
      return _utc.utc;
    }
  });
});
;define('mdeditor/helpers/w', ['exports', 'ember-cli-string-helpers/helpers/w'], function (exports, _w) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _w.default;
    }
  });
  Object.defineProperty(exports, 'w', {
    enumerable: true,
    get: function () {
      return _w.w;
    }
  });
});
;define('mdeditor/helpers/without', ['exports', 'ember-composable-helpers/helpers/without'], function (exports, _without) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _without.default;
    }
  });
  Object.defineProperty(exports, 'without', {
    enumerable: true,
    get: function () {
      return _without.without;
    }
  });
});
;define('mdeditor/helpers/word-limit', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.wordLimit = wordLimit;

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  function wordLimit(params, {
    limit,
    wordLength
  }) {
    var _params = _slicedToArray(params, 1);

    const value = _params[0];


    if (Ember.isPresent(value)) {
      let arr = value.replace(/[ \s\n]+/g, ' |').split('|');
      let words = limit || 50;
      let stop;

      arr.every((itm, idx) => {
        stop = idx;

        if (itm.trim() === "") {
          return true;
        }

        if (wordLength && itm.length > wordLength) {
          arr[idx] = ' ' + itm.trim().slice(0, wordLength) + '...';
        }

        return idx < words;
      });

      let text = arr.slice(0, stop > 0 ? stop : stop + 1).join('');

      if (arr.length > words) {
        text += '...';
      }

      return text;
    }

    return value;
  }

  exports.default = Ember.Helper.helper(wordLimit);
});
;define('mdeditor/helpers/xor', ['exports', 'ember-truth-helpers/helpers/xor'], function (exports, _xor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _xor.default;
    }
  });
  Object.defineProperty(exports, 'xor', {
    enumerable: true,
    get: function () {
      return _xor.xor;
    }
  });
});
;define('mdeditor/initializers/add-modals-container', ['exports', 'ember-modal-dialog/initializers/add-modals-container'], function (exports, _addModalsContainer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'add-modals-container',
    initialize: _addModalsContainer.default
  };
});
;define('mdeditor/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'mdeditor/config/environment'], function (exports, _initializerFactory, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  let name, version;
  if (_environment.default.APP) {
    name = _environment.default.APP.name;
    version = _environment.default.APP.version;
  }

  exports.default = {
    name: 'App Version',
    initialize: (0, _initializerFactory.default)(name, version)
  };
});
;define("mdeditor/initializers/autoresize", ["exports", "ember-autoresize/ext/text-field", "ember-autoresize/ext/text-area"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "autoresize",
    initialize: function initialize() {}
  };
});
;define('mdeditor/initializers/container-debug-adapter', ['exports', 'ember-resolver/resolvers/classic/container-debug-adapter'], function (exports, _containerDebugAdapter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'container-debug-adapter',

    initialize() {
      let app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _containerDebugAdapter.default);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
;define("mdeditor/initializers/coordinator-setup", ["exports", "mdeditor/models/coordinator"], function (exports, _coordinator) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "setup coordinator",

    initialize: function initialize() {
      let app = arguments[1] || arguments[0];
      app.register("drag:coordinator", _coordinator.default);
      app.inject("component", "coordinator", "drag:coordinator");
    }
  };
});
;define('mdeditor/initializers/crumbly', ['exports', 'ember-crumbly/initializers/crumbly'], function (exports, _crumbly) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _crumbly.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _crumbly.initialize;
    }
  });
});
;define('mdeditor/initializers/ember-concurrency', ['exports', 'ember-concurrency/initializers/ember-concurrency'], function (exports, _emberConcurrency) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberConcurrency.default;
    }
  });
});
;define('mdeditor/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data'], function (exports, _setupContainer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-data',
    initialize: _setupContainer.default
  };
});
;define('mdeditor/initializers/emt-themes', ['exports', 'ember-models-table/initializers/emt-themes'], function (exports, _emtThemes) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emtThemes.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _emtThemes.initialize;
    }
  });
});
;define('mdeditor/initializers/export-application-global', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_environment.default.exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _environment.default.exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember.String.classify(_environment.default.modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports.default = {
    name: 'export-application-global',

    initialize: initialize
  };
});
;define('mdeditor/initializers/flash-messages', ['exports', 'mdeditor/config/environment', 'ember-cli-flash/utils/flash-message-options'], function (exports, _environment, _flashMessageOptions) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  const deprecate = Ember.deprecate;

  const INJECTION_FACTORIES_DEPRECATION_MESSAGE = '[ember-cli-flash] Future versions of ember-cli-flash will no longer inject the service automatically. Instead, you should explicitly inject it into your Route, Controller or Component with `Ember.inject.service`.';
  function initialize() {
    const application = arguments[1] || arguments[0];

    var _ref = _environment.default || {};

    const flashMessageDefaults = _ref.flashMessageDefaults;

    var _ref2 = flashMessageDefaults || [];

    const injectionFactories = _ref2.injectionFactories;

    const options = (0, _flashMessageOptions.default)(flashMessageDefaults);
    const shouldShowDeprecation = !(injectionFactories && injectionFactories.length);

    deprecate(INJECTION_FACTORIES_DEPRECATION_MESSAGE, shouldShowDeprecation, {
      id: 'ember-cli-flash.deprecate-injection-factories',
      until: '2.0.0'
    });

    options.injectionFactories.forEach(factory => {
      application.inject(factory, 'flashMessages', 'service:flash-messages');
    });
  }

  exports.default = {
    name: 'flash-messages',
    initialize
  };
});
;define('mdeditor/initializers/hide-loading-screen', ['exports', 'mdeditor/instance-initializers/hide-loading-screen'], function (exports, _hideLoadingScreen) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;


  const EMBER_VERSION_REGEX = /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:(?:-(alpha|beta)\.([0-9]+)(?:\.([0-9]+))?)?)?(?:\+(canary))?(?:\.([0-9abcdef]+))?(?:-([A-Za-z0-9.-]+))?(?:\+([A-Za-z0-9.-]+))?$/;

  /**
   * VERSION_INFO[i] is as follows:
   *
   * 0  complete version string
   * 1  major version
   * 2  minor version
   * 3  trivial version
   * 4  pre-release type (optional: "alpha" or "beta" or undefined for stable releases)
   * 5  pre-release version (optional)
   * 6  pre-release sub-version (optional)
   * 7  canary (optional: "canary", or undefined for stable releases)
   * 8  SHA (optional)
   *
   * @private
   */
  const VERSION_INFO = EMBER_VERSION_REGEX.exec(Ember.VERSION);
  const isPre111 = parseInt(VERSION_INFO[1], 10) < 2 && parseInt(VERSION_INFO[2], 10) < 12;

  function initialize() {
    if (isPre111) {
      var _arguments = Array.prototype.slice.call(arguments);

      let registry = _arguments[0],
          application = _arguments[1];

      _hideLoadingScreen.default.initialize(registry, application);
    }
  }

  exports.default = {
    name: 'hide-loading-screen',
    initialize
  };
});
;define('mdeditor/initializers/leaflet-assets', ['exports', 'ember-leaflet/initializers/leaflet-assets'], function (exports, _leafletAssets) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _leafletAssets.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _leafletAssets.initialize;
    }
  });
});
;define('mdeditor/initializers/leaflet', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;

  /* global L */

  function initialize() {
    if (_environment.default.environment === 'production') {
      L.Icon.Default.imagePath = _environment.default.rootURL + '/assets/images/';
    }
    if (_environment.default.environment === 'development') {
      L.Icon.Default.imagePath = '/assets/images/';
    }
  }

  exports.default = {
    name: 'leaflet',
    initialize
  };
});
;define("mdeditor/initializers/liquid-fire", ["exports", "liquid-fire/ember-internals", "liquid-fire/velocity-ext"], function (exports, _emberInternals) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  (0, _emberInternals.initialize)();

  exports.default = {
    name: 'liquid-fire',
    initialize: function initialize() {}
  };
});
;define('mdeditor/initializers/local-storage-adapter', ['exports', 'ember-local-storage/initializers/local-storage-adapter'], function (exports, _localStorageAdapter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _localStorageAdapter.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _localStorageAdapter.initialize;
    }
  });
});
;define('mdeditor/initializers/local-storage-export', ['exports', 'ember-data', 'ember-inflector'], function (exports, _emberData, _emberInflector) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;


  const exportSelected = function exportSelected(store, types, options) {
    // merge defaults
    options = Ember.assign({
      json: true,
      download: false,
      filename: 'ember-data.json',
      filterIds: null
    }, options || {});

    let json, data;
    let filter = typeof options.filterIds === 'object' ? options.filterIds : null;

    // collect data
    data = types.reduce((records, type) => {
      const adapter = store.adapterFor((0, _emberInflector.singularize)(type));
      const url = adapter.buildURL(type),
            exportData = adapter._handleGETRequest(url);

      records.data = records.data.concat(exportData.filter(itm => filter[(0, _emberInflector.singularize)(type)].indexOf(itm.id) !== -1));
      return records;
    }, {
      data: []
    });

    if (options.json || options.download) {
      json = JSON.stringify(data);
    }

    if (options.json) {
      data = json;
    }

    if (options.download) {
      window.saveAs(new Blob([json], {
        type: 'application/json;charset=utf-8'
      }), options.filename);
    }

    return new Ember.RSVP.Promise(resolve => {
      Ember.run(null, resolve, data);
    }, 'DS: LocalStorageAdapter#exportData');
  };

  function initialize() {
    _emberData.default.Store.reopen({
      exportSelectedData(types, options) {
        return exportSelected(this, types, options);
      }
    });
  }

  exports.default = {
    name: 'local-storage-export',
    after: 'ember-data',
    initialize: initialize
  };
});
;define('mdeditor/initializers/resize', ['exports', 'ember-resize/services/resize', 'mdeditor/config/environment'], function (exports, _resize, _environment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.initialize = initialize;
    function initialize(application) {
        const resizeServiceDefaults = Ember.getWithDefault(_environment.default, 'resizeServiceDefaults', {
            debounceTimeout: 200,
            heightSensitive: true,
            widthSensitive: true
        });
        const injectionFactories = Ember.getWithDefault(resizeServiceDefaults, 'injectionFactories', ['view', 'component']) || [];
        application.unregister('config:resize-service');
        application.register('config:resize-service', resizeServiceDefaults, { instantiate: false });
        application.register('service:resize', _resize.default);
        const resizeService = application.resolveRegistration('service:resize');
        resizeService.prototype.resizeServiceDefaults = resizeServiceDefaults;
        injectionFactories.forEach(factory => {
            application.inject(factory, 'resizeService', 'service:resize');
        });
    }
    exports.default = {
        initialize,
        name: 'resize'
    };
});
;define('mdeditor/initializers/viewport-config', ['exports', 'ember-in-viewport/initializers/viewport-config'], function (exports, _viewportConfig) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _viewportConfig.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _viewportConfig.initialize;
    }
  });
});
;define('mdeditor/instance-initializers/ember-data', ['exports', 'ember-data/initialize-store-service'], function (exports, _initializeStoreService) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-data',
    initialize: _initializeStoreService.default
  };
});
;define('mdeditor/instance-initializers/ember-gestures', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-gestures',

    initialize: function initialize(instance) {
      if (typeof instance.lookup === "function") {
        instance.lookup('service:-gestures');
      } else {
        // This can be removed when we no-longer support ember 1.12 and 1.13
        Ember.getOwner(instance).lookup('service:-gestures');
      }
    }

  };
});
;define('mdeditor/instance-initializers/emt-inject', ['exports', 'ember-models-table/instance-initializers/emt-inject'], function (exports, _emtInject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emtInject.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _emtInject.initialize;
    }
  });
});
;define('mdeditor/instance-initializers/head-browser', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'head-browser',
    initialize() {
      // do nothing!
      // this functionality has been moved into addon/components/head-layout.js
      // This is only here in order to not break existing addons relying on this, e.g. ember-page-title.
    }
  };
});
;define('mdeditor/instance-initializers/hide-loading-screen', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;


  const userConfig = _environment.default['ember-load'] || {};

  function initialize() {
    let instance = arguments[1] || arguments[0];
    let container = arguments[1] ? arguments[0] : instance.container;

    if (Ember.View) {
      let ApplicationView = container.lookupFactory ? container.lookupFactory('view:application') : instance.resolveRegistration('view:application');

      ApplicationView.reopen({
        didInsertElement() {
          this._super(...arguments);

          let loadingIndicatorClass = userConfig.loadingIndicatorClass || 'ember-load-indicator';

          document.querySelectorAll(`.${loadingIndicatorClass}`).forEach(e => e.remove());
        }
      });
    }
  }

  exports.default = {
    name: 'hide-loading-screen-instance',
    initialize
  };
});
;define('mdeditor/instance-initializers/profile', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  function initialize(appInstance) {
    //appInstance.inject('route', 'profile', 'service:custom-profile');
    //appInstance.inject('controller', 'profile', 'service:custom-profile');
    appInstance.inject('component', 'profile', 'service:custom-profile');
  }

  exports.default = {
    name: 'profile',
    initialize
  };
});
;define('mdeditor/instance-initializers/route-publish', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  function initialize(appInstance) {
    let catalogs = appInstance.lookup('service:publish').get('catalogs');

    // appInstance.inject('route', 'foo', 'service:foo');
    Ember.Router.map(function () {
      this.route('publish', function () {
        catalogs.forEach(itm => {
          this.route(itm.route);
        });
      });
    });
  }

  exports.default = {
    initialize
  };
});
;define('mdeditor/instance-initializers/settings-sciencebase', ['exports', 'mdeditor-sciencebase/instance-initializers/settings-sciencebase'], function (exports, _settingsSciencebase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _settingsSciencebase.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _settingsSciencebase.initialize;
    }
  });
});
;define('mdeditor/instance-initializers/settings', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  function initialize(appInstance) {
    appInstance.inject('route', 'settings', 'service:settings');
    appInstance.inject('controller', 'settings', 'service:settings');
  }

  exports.default = {
    name: 'settings',
    initialize
  };
});
;define('mdeditor/mdeditor-sciencebase/tests/addon.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | addon');

  QUnit.test('addon/components/sb-publisher.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/sb-publisher.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/sb-settings.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/sb-settings.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/sb-tree-label.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/sb-tree-label.js should pass ESLint\n\n');
  });

  QUnit.test('addon/components/sb-tree.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/components/sb-tree.js should pass ESLint\n\n');
  });

  QUnit.test('addon/instance-initializers/settings-sciencebase.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/instance-initializers/settings-sciencebase.js should pass ESLint\n\n');
  });

  QUnit.test('addon/routes/publish/sciencebase.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/routes/publish/sciencebase.js should pass ESLint\n\n');
  });

  QUnit.test('addon/utils/config.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/utils/config.js should pass ESLint\n\n');
  });

  QUnit.test('addon/utils/sb-tree-node.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/utils/sb-tree-node.js should pass ESLint\n\n');
  });
});
;define('mdeditor/mdeditor-sciencebase/tests/app.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | app');

  QUnit.test('app/components/sb-publisher.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/sb-publisher.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/sb-settings.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/sb-settings.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/sb-tree-label.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/sb-tree-label.js should pass ESLint\n\n');
  });

  QUnit.test('app/components/sb-tree.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/components/sb-tree.js should pass ESLint\n\n');
  });

  QUnit.test('app/instance-initializers/settings-sciencebase.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/instance-initializers/settings-sciencebase.js should pass ESLint\n\n');
  });

  QUnit.test('app/routes/publish/sciencebase.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/routes/publish/sciencebase.js should pass ESLint\n\n');
  });

  QUnit.test('app/templates/publish/sciencebase.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/templates/publish/sciencebase.js should pass ESLint\n\n');
  });

  QUnit.test('app/utils/config.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/utils/config.js should pass ESLint\n\n');
  });

  QUnit.test('app/utils/sb-tree-node.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app/utils/sb-tree-node.js should pass ESLint\n\n');
  });
});
;define('mdeditor/mdeditor-sciencebase/tests/templates.template.lint-test', [], function () {
  'use strict';

  QUnit.module('TemplateLint');

  QUnit.test('addon/templates/components/sb-publisher.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/sb-publisher.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/sb-settings.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/sb-settings.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/components/sb-tree-label.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/components/sb-tree-label.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('addon/templates/publish/sciencebase.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'addon/templates/publish/sciencebase.hbs should pass TemplateLint.\n\n');
  });
});
;define('mdeditor/mixins/hash-poll', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pollInterval = undefined;
  const pollInterval = exports.pollInterval = 750; // time in milliseconds

  exports.default = Ember.Mixin.create({
    settings: Ember.inject.service(),

    afterModel(model) {
      this._super(...arguments);

      if (this.get('settings.data.autoSave')) {
        model.set('jsonRevert', model.serialize().data.attributes.json);
      }

      this.pollTask.perform();

      return model;
    },

    deactivatePoll: Ember.on('deactivate', function () {
      this.pollTask.cancelAll();
    }),

    poll() {
      const model = this.currentRouteModel();

      return new Ember.RSVP.Promise(function (resolve) {
        if (model) {
          model.notifyPropertyChange('currentHash');
        }
        resolve(true);
      });
    },

    pollTask: (0, _emberConcurrency.task)(function* () {
      while (true) {
        yield this.poll();
        yield (0, _emberConcurrency.timeout)(pollInterval);
      }
    }).restartable()
  });
});
;define('mdeditor/mixins/object-template', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({
    /**
     * Use this mixin to apply 'templates' to an array of objects. Especially useful
     * when the object must support setting arrays that are not passed during
     * initialization.
     *
     * @class object-template
     * @constructor
     * @static
     */

    /**
     * Apply the 'template' to the object.
     *
     * @method applyTemplate
     * @param {Object} object The object to apply the template to.
     * @return {Ember.Object}
     */
    applyTemplate(object, defaults) {
      let value = object || {};
      let Template = this.templateClass;

      if (Template) {
        let owner = Ember.getOwner(this);

        return Ember.assign(Template.create(owner.ownerInjection(), defaults || {}), value);
      }

      return object;
    },

    /**
     * Apply the object 'template' to each object in the array.
     *
     * @method applyTemplateArray
     * @param {Array} propertyName The array of objects to apply the template to.
     * @return {Array}
     */
    applyTemplateArray(propertyName, defaults) {
      let property = this.get(propertyName);

      if (Ember.isArray(property)) {
        let Template = this.templateClass;
        if (Template) {
          let owner = Ember.getOwner(this);

          Ember.run.once(this, () => {
            property.forEach((item, idx, items) => {
              //items.removeAt(idx);

              let newItem = Ember.assign(Template.create(owner.ownerInjection(), defaults || {}), item);

              //items.insertAt(idx, newItem);
              items.set(`${idx}`, newItem);
            });
            this.notifyPropertyChange(propertyName);
          });
        }
      } else {
        Ember.run.once(this, () => {
          this.set(propertyName, Ember.A());
        });
      }

      return this.get(propertyName);
    }
  });
});
;define('mdeditor/mixins/resize-aware', ['exports', 'ember-resize/mixins/resize-aware'], function (exports, _resizeAware) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _resizeAware.default;
    }
  });
});
;define('mdeditor/mixins/scroll-to', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({
    queryParams: {
      scrollTo: true
    },
    setScrollTo(scrollTo) {
      this.controller.set('scrollTo', scrollTo || '');
    },
    actions: {
      setScrollTo(scrollTo) {
        this.setScrollTo(scrollTo);
      }
    }
  });
});
;define('mdeditor/models/base', ['exports', 'ember-data', 'object-hash'], function (exports, _emberData, _objectHash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Base = _emberData.default.Model.extend({
    init() {
      this._super(...arguments);

      this.on('didUpdate', this, this.wasUpdated);
      this.on('didCreate', this, this.wasUpdated);
      this.on('didLoad', this, this.applyPatch);
      this.on('ready', this, this.isReady);
      this.hasDirtyAttributes;
      //this.on('didLoad', this, this.wasLoaded);
    },

    settings: Ember.inject.service(),
    schemas: Ember.inject.service(),
    customProfiles: Ember.inject.service('custom-profile'),
    patch: Ember.inject.service(),
    clean: Ember.inject.service('cleaner'),
    mdjson: Ember.inject.service('mdjson'),

    /**
     * The hash for the clean record.
     *
     * @property currentHash
     * @type {String}
     */

    /**
     * The clean json object.
     *
     * @property jsonSnapshot
     * @type {String}
     */

    observeReload: Ember.observer('isReloading', function () {
      let reloading = this.isReloading;

      if (!reloading) {
        this.wasUpdated(this);
      }
    }),

    observeAutoSave: Ember.observer('hasDirtyAttributes', 'hasDirtyHash', function () {
      if (this.isNew || this.isEmpty) {
        return;
      }

      if (this.get('settings.data.autoSave') && (this.hasDirtyHash || this.hasDirtyAttributes)) {
        Ember.run.once(this, function () {
          this.save();
        });
      }
    }),

    applyPatch() {
      Ember.run.once(this, function () {

        let patch = this.patch;

        patch.applyModelPatch(this);
      });
    },

    isReady() {
      let newHash = this.hashObject(JSON.parse(this.serialize().data.attributes.json), true);

      // if the currentHash is undefined, the record is either new or hasn't had the
      // hash calculated yet
      if (this.currentHash === undefined) {
        this.set('currentHash', newHash);
      }
    },

    wasUpdated() {
      this._super(...arguments);

      //let record = model.record || this;
      let json = JSON.parse(this.serialize().data.attributes.json);

      this.setCurrentHash(json);
      this.set('jsonSnapshot', json);
    },

    wasLoaded() {
      this._super(...arguments);

      let json = JSON.parse(this.serialize().data.attributes.json);

      this.setCurrentHash(json);
      this.set('jsonSnapshot', json);
    },

    saved() {
      this.set('dateUpdated', new Date());

      return this._super(...arguments);
    },

    /**
     * Compute and set the model hash.
     *
     * @method setCurrentHash
     * @param {Object} model Optional model with json property to target
     */
    setCurrentHash(json) {
      let target = json || this.json;

      Ember.set(this, 'currentHash', this.hashObject(target), true);
    },

    /**
     * Computed a hash for the target object.
     *
     * @param  {Object} target    The object to hash
     * @param  {Boolean} parsed    If true, the object will not be passed through
     *                            JSON.parse before being hashed
     * @return {String|undefined} The hash or undefined if an object wasn't provided.
     */
    hashObject(target, parsed) {
      let toHash = parsed ? target : JSON.parse(JSON.stringify(target));

      return typeof toHash === "object" ? (0, _objectHash.default)(toHash) : undefined;
    },

    /**
     * Compare the current hash with the cached one.
     *
     * @property hasDirtyHash
     * @returns {Boolean} Boolean value indicating if hashes are equivalent
     */
    hasDirtyHash: Ember.computed('currentHash', function () {
      let newHash = this.hashObject(JSON.parse(this.serialize().data.attributes.json), true);

      //if the currentHash is undefined, the record is either new or hasn't had the
      //hash calculated yet
      // if(this.get('currentHash') === undefined) {
      //   this.set('currentHash', newHash);
      // }

      if (this.currentHash !== newHash || this.hasDirtyAttributes) {
        return true;
      }

      return false;
    }),

    canRevert: Ember.computed('hasDirtyHash', 'settings.data.autoSave', function () {
      let dirty = this.hasDirtyHash;
      let autoSave = this.get('settings.data.autoSave');

      //no autoSave so just check if dirty
      if (!autoSave && dirty) {
        return true;
      }

      let revert = this.jsonRevert;

      //if we have set revert object with autoSave on
      if (revert && autoSave) {
        let hash = this.hashObject(JSON.parse(revert), true) !== this.currentHash;

        //check if changes have been made
        if (hash) {
          return true;
        }
      }

      return false;
    }),

    cleanJson: Ember.computed.alias('_cleanJson'),

    status: Ember.computed('hasDirtyHash', 'hasSchemaErrors', function () {
      let dirty = this.hasDirtyHash;
      let errors = this.hasSchemaErrors;

      if (this.currentHash) {
        return dirty ? 'danger' : errors ? 'warning' : 'success';
      }

      return 'success';
    }),

    /**
     * Indicates whether errors are present.
     *
     * @property hasSchemaErrors
     * @type {Boolean}
     * @readOnly
     * @category computed
     * @requires schemaErrors
     */
    hasSchemaErrors: Ember.computed.bool('schemaErrors.length'),

    /**
     * Array of custom schemas that are associated with this model
     *
     * @property customSchemas
     * @type {Array}
     * @default "[]"
     * @readOnly
     * @category computed
     * @requires
     */
    customSchemas: Ember.computed('schemas.schemas.@each.isGlobal', 'profile', function () {
      return this.schemas.schemas.filter(schema => {
        if (schema.schemaType !== this.constructor.modelName) {
          return false;
        }

        if (schema.isGlobal) {
          return true;
        }

        let profile = this.customProfiles.mapById[this.profile];

        if (!profile || !profile.schemas) {
          return false;
        }

        return profile.schemas.indexOf(schema) > -1;
      }, this);
    })
  });

  //Modify the prototype instead of using computed.volatile()
  //see https://github.com/emberjs/ember.js/issues/17709#issuecomment-469941364

  Object.defineProperty(Base.prototype, '_cleanJson', {
    get() {
      return this.clean.clean(this.json);
    }
  });

  exports.default = Base;
});
;define('mdeditor/models/contact', ['exports', 'ember-copy', 'ember-data', 'uuid/v4', 'validator', 'mdeditor/models/base', 'ember-cp-validations'], function (exports, _emberCopy, _emberData, _v, _validator, _base, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonDefault = exports.default = undefined;


  const Validations = (0, _emberCpValidations.buildValidations)({
    'json.contactId': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }),
    'json.name': [(0, _emberCpValidations.validator)('format', {
      regex: /^\s+$/,
      inverse: true,
      isWarning: true,
      message: "Name should not be only white-space."
    }), (0, _emberCpValidations.validator)('presence', {
      disabled: Ember.computed.notEmpty('model.json.positionName'),
      presence: true
    })],
    'json.positionName': [(0, _emberCpValidations.validator)('format', {
      regex: /^\s+$/,
      inverse: true,
      isWarning: true,
      message: "Position Name should not be only white-space."
    }), (0, _emberCpValidations.validator)('presence', {
      disabled: Ember.computed.notEmpty('model.json.name'),
      presence: true
    })],
    'json.isOrganization': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })
  });

  const JsonDefault = Ember.Object.extend({
    init() {
      this._super(...arguments);
      this.setProperties({
        'contactId': (0, _v.default)(),
        'isOrganization': false,
        'name': null,
        //'positionName': null,
        'memberOfOrganization': [],
        'logoGraphic': [],
        'phone': [],
        'address': [],
        'electronicMailAddress': [],
        'onlineResource': [],
        'hoursOfService': []
        //'contactInstructions': null,
        //'contactType': null;
      });
    }
  });

  const Contact = _base.default.extend(Validations, _emberCopy.Copyable, {
    /**
     * Contact model
     *
     * @class contact
     * @constructor
     * @extends DS.Model
     * @mixin Ember.Copyable
     * @module mdeditor
     * @submodule data-models
     */

    contactsService: Ember.inject.service('contacts'),
    contacts: _emberData.default.hasMany('contact', {
      inverse: 'organizations'
    }),
    organizations: _emberData.default.hasMany('contact', {
      inverse: 'contacts'
    }),

    /**
     * The json object for the contact. The data for the contact is stored in this
     * object.
     *
     * @attribute json
     * @type {json}
     * @required
     */
    json: _emberData.default.attr('json', {
      defaultValue: function defaultValue() {
        return JsonDefault.create();
      }
    }),

    /**
     * The timestamp for the record
     *
     * @attribute dateUpdated
     * @type {date}
     * @default new Date()
     * @required
     */
    dateUpdated: _emberData.default.attr('date', {
      defaultValue() {
        return new Date();
      }
    }),

    name: Ember.computed.alias('json.name'),
    contactId: Ember.computed.alias('json.contactId'),

    /**
     * The formatted display string for the contact
     *
     * @property title
     * @type {String}
     * @readOnly
     * @category computed
     * @requires json.name, json.positionName
     */
    title: Ember.computed('json.{name,positionName,isOrganization}', function () {
      const json = this.json;

      return json.name || (json.isOrganization ? null : json.positionName);
    }),

    // /**
    //  * The formatted display string for the contact
    //  *
    //  * @property title
    //  * @type {String}
    //  * @readOnly
    //  * @category computed
    //  * @requires json.name, json.positionName
    //  */
    // updateMembers: Ember.observer('json.memberOfOrganization.[]',
    //   function () {
    //     //const me = this;
    //     const json = this.get('json');
    //     const value = json.memberOfOrganization;
    //
    //     let store = this.get('store');
    //     let contacts = store.peekAll('contact');
    //     let organizations = this.get('organizations')
    //       .clear();
    //
    //     value.forEach(function (id) {
    //       let rec = contacts.findBy('json.contactId', id);
    //
    //       if(rec) {
    //         organizations.pushObject(rec);
    //       }
    //       //rec.get('contacts').pushObject(me);
    //     });
    //
    //   }),

    /**
     * The type of contact
     *
     * @property type
     * @type {String}
     * @readOnly
     * @category computed
     * @requires json.isOrganization
     */
    type: Ember.computed('json.isOrganization', function () {
      return this.get('json.isOrganization') ? 'Organization' : 'Individual';
    }),

    /**
     * The display icon for the contact
     *
     * @property icon
     * @type {String}
     * @readOnly
     * @category computed
     * @requires json.isOrganization
     */
    icon: Ember.computed('json.isOrganization', function () {
      const name = this.get('json.isOrganization');

      return name ? 'users' : 'user';
    }),

    /**
     * The URI of the default logo for the contact.
     *
     * @property defaultLogo
     * @type {String}
     * @readOnly
     * @category computed
     * @requires json.logoGraphic.firstObject.fileUri.firstObject.uri
     */
    defaultLogo: Ember.computed('json.logoGraphic.firstObject.fileUri.firstObject.uri', 'defaultOrganization', function () {
      let uri = this.get('json.logoGraphic.firstObject.fileUri.firstObject.uri');

      if (uri) {
        return uri;
      }
      let orgId = Ember.get(this, 'defaultOrganization');

      if (orgId && orgId !== this.get('json.contactId')) {
        let contacts = this.get('contactsService.organizations');
        let org = contacts.findBy('json.contactId', orgId);

        if (org) {
          return Ember.get(org, 'defaultLogo');
        }
      }

      return null;
    }),

    /**
     * The id of the default organization for the contact.
     *
     * @property defaultOrganization
     * @type {String}
     * @readOnly
     * @category computed
     * @requires json.memberOfOrganization.[]
     */
    defaultOrganization: Ember.computed('json.memberOfOrganization.[]', function () {
      const json = this.json;

      let memberOfOrganization = json.memberOfOrganization;


      return !Ember.isEmpty(memberOfOrganization) ? Ember.get(memberOfOrganization, '0') : null;
    }),

    defaultOrganizationName: Ember.computed('defaultOrganization', function () {
      let contacts = this.get('contactsService.organizations');

      let org = contacts.findBy('json.contactId', Ember.get(this, 'defaultOrganization'));

      return org ? Ember.get(org, 'name') : null;
    }),

    /**
     * The formatted (name or position) and organization(if any) of the contact.
     *
     * @property combinedName
     * @type {String}
     * @readOnly
     * @category computed
     * @requires json.name, json.isOrganization
     */
    combinedName: Ember.computed('name', 'json{isOrganization,positionName,memberOfOrganization[]}', function () {
      const json = this.json;

      let name = json.name,
          positionName = json.positionName,
          isOrganization = json.isOrganization,
          memberOfOrganization = json.memberOfOrganization;


      let orgId = !Ember.isEmpty(memberOfOrganization) ? Ember.get(memberOfOrganization, '0') : null;
      let combinedName = name || positionName;
      let orgName;

      if (orgId) {
        let contacts = this.get('contactsService.organizations');
        let org = contacts.findBy('json.contactId', orgId);

        if (org) {
          orgName = Ember.get(org, 'name');
        }
      }

      if (orgName && !isOrganization) {
        return orgName += ": " + combinedName;
      }

      return combinedName;
    }),

    /**
     * The trimmed varsion of the contactId.
     *
     * @property shortId
     * @type {String}
     * @readOnly
     * @category computed
     * @requires json.contactId
     */
    shortId: Ember.computed('json.contactId', function () {
      const contactId = this.get('json.contactId');
      if (contactId && _validator.default.isUUID(contactId)) {
        let index = contactId.indexOf('-');

        return contactId.substring(0, index);
      }

      return contactId;
    }),

    /**
     * A list of schema errors return by the validator.
     *
     * @property schemaErrors
     * @type {Array}
     * @readOnly
     * @category computed
     * @requires status
     */
    schemaErrors: Ember.computed('hasDirtyHash', 'customSchemas.[]', function () {
      let mdjson = this.mdjson;
      let errors = [];
      let result = mdjson.validateContact(this).errors;

      if (result) {
        errors.pushObject({
          title: 'Default Contact Validation',
          errors: result
        });
      }

      this.customSchemas.forEach(schema => {
        const validator = schema.validator;

        if (validator.validate(schema.rootSchema, this.cleanJson)) {
          return;
        }

        errors.pushObject({
          title: schema.title,
          errors: validator.errors
        });
      });

      return errors;
    }),

    /**
     * Create a copy of the record in the store.
     *
     * @method copy
     * @chainable
     * @return {DS.Model}
     */
    copy() {
      let current = this.cleanJson;
      let json = Ember.Object.create(current);
      let name = current.name,
          positionName = current.positionName,
          isOrganization = current.isOrganization;


      json.setProperties({
        isOrganization: isOrganization,
        name: name ? `Copy of ${name}` : null,
        positionName: name ? positionName : `Copy of ${positionName}`,
        contactId: (0, _v.default)()
      });

      return this.store.createRecord('contact', {
        json: json
      });
    }
  });

  exports.default = Contact;
  exports.JsonDefault = JsonDefault;
});
;define('mdeditor/models/coordinator', ['exports', 'mdeditor/models/obj-hash'], function (exports, _objHash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Object.extend(Ember.Evented, {
    objectMap: Ember.computed(function () {
      return _objHash.default.create();
    }),

    getObject: function getObject(id, ops) {
      ops = ops || {};
      var payload = this.get('objectMap').getObj(id);

      if (payload.ops.source) {
        payload.ops.source.sendAction('action', payload.obj);
      }

      if (payload.ops.target) {
        payload.ops.target.sendAction('action', payload.obj);
      }

      this.trigger("objectMoved", { obj: payload.obj, source: payload.ops.source, target: ops.target });

      return payload.obj;
    },

    setObject: function setObject(obj, ops) {
      ops = ops || {};
      return this.get('objectMap').add({ obj: obj, ops: ops });
    }
  });
});
;define('mdeditor/models/custom-profile', ['exports', 'ember-data', 'ember-cp-validations'], function (exports, _emberData, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  // [{
  //   "id": "full",
  //   "namespace": "org.adiwg.profile",
  //   "alternateId": [""],
  //   "title": "Full",
  //   "description": "Evey supported component",
  //   "version": "0.0.0",
  //   "components": {
  //     "record": {},
  //     "contact": {},
  //     "dictionary": {}
  //   },
  //   "nav": {
  //     "record": [{
  //       "title": "",
  //       "target": "",
  //       "tip": ""
  //     }]
  //   }
  // }]

  const Validations = (0, _emberCpValidations.buildValidations)({
    'alias': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      disabled: Ember.computed.notEmpty('model.title'),
      message: 'A title must be provided.'
    }),
    'title': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      disabled: Ember.computed.notEmpty('model.Alias'),
      message: 'A title must be provided.'
    }),
    'profileId': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      isWarning: true,
      message: 'No profile definition is assigned.'
    }),
    'schemas': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      isWarning: true,
      message: 'No schemas have been assigned.'
    })
    // 'uri': [
    // validator('presence', {
    //   presence: true,
    //   ignoreBlank: true
    // }),
    // validator('format', {
    //   regex: regex,
    //   isWarning: false,
    //   message: 'This field should be a valid, resolvable URL.'
    // })
    // ]
  });
  // import { regex } from 'mdeditor/models/schema';
  exports.default = _emberData.default.Model.extend(Validations, {
    init() {
      this._super(...arguments);

      this.updateSettings;
    },

    definitions: Ember.inject.service('profile'),
    uri: _emberData.default.attr('string'),
    alias: _emberData.default.attr('string'),
    title: _emberData.default.attr('string'),
    description: _emberData.default.attr('string'),
    profileId: _emberData.default.attr('string'),
    //remoteVersion: DS.attr('string'),

    profileTitle: Ember.computed.or('alias', 'title'),
    identifier: Ember.computed.alias('id').readOnly(),
    components: Ember.computed.alias('profile.components').readOnly(),
    //localVersion: alias('version'),
    //hasUpdate: computed('localVersion', 'remoteVersion', checkVersion),
    schemas: _emberData.default.hasMany('schemas'),
    definition: Ember.computed('profileId', function () {
      return this.definitions.profiles.findBy('identifier', this.profileId);
    }),

    /* eslint-disable ember/no-observers */
    updateSettings: Ember.observer('hasDirtyAttributes', 'title', 'uri', 'alias', 'description', 'hasUpdate', 'schemas.[]', 'profileId', function () {
      if (this.isNew || this.isEmpty || this.isDeleted) {
        return;
      }

      if (this.hasDirtyAttributes) {
        this.set('dateUpdated', new Date());

        Ember.run.once(this, function () {
          this.save();
        });
      }
    })
    /* eslint-enable ember/no-observers */
  });
});
;define('mdeditor/models/dictionary', ['exports', 'ember-copy', 'ember-data', 'uuid/v4', 'mdeditor/models/base', 'ember-cp-validations'], function (exports, _emberCopy, _emberData, _v, _base, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'json.dataDictionary.citation.title': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }),
    'json.dataDictionary.subject': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }), (0, _emberCpValidations.validator)('array-required', {
      track: []
    })]
  });

  const JsonDefault = Ember.Object.extend({
    init() {
      this._super(...arguments);
      this.setProperties({
        dictionaryId: (0, _v.default)(),
        dataDictionary: {
          citation: {
            title: null,
            date: [{
              date: new Date().toISOString(),
              dateType: 'creation'
            }]
          },
          description: '',
          subject: [],
          responsibleParty: {},
          domain: [],
          entity: []
        }
      });
    }
  });

  exports.default = _base.default.extend(Validations, _emberCopy.Copyable, {
    profile: _emberData.default.attr('string', {
      defaultValue: 'full'
    }),
    json: _emberData.default.attr('json', {
      defaultValue() {
        return JsonDefault.create();
      }
    }),
    dateUpdated: _emberData.default.attr('date', {
      defaultValue() {
        return new Date();
      }
    }),

    title: Ember.computed.alias('json.dataDictionary.citation.title'),
    dictionaryId: Ember.computed.alias('json.dictionaryId'),

    icon: 'book',

    /**
     * A list of schema errors return by the validator.
     *
     * @property schemaErrors
     * @type {Array}
     * @readOnly
     * @category computed
     * @requires status
     */
    schemaErrors: Ember.computed('hasDirtyHash', 'customSchemas.[]', function () {
      let mdjson = this.mdjson;
      let errors = [];
      let result = mdjson.validateDictionary(this).errors;

      if (result) {
        errors.pushObject({
          title: 'Default Dictionary Validation',
          errors: result
        });
      }

      this.customSchemas.forEach(schema => {
        const validator = schema.validator;

        if (validator.validate(schema.rootSchema, this.cleanJson)) {
          return;
        }

        errors.pushObject({
          title: schema.title,
          errors: validator.errors
        });
      });

      return errors;
    }),

    copy() {
      let current = this.cleanJson;
      let json = Ember.Object.create(current);
      let name = current.dataDictionary.citation.title;

      json.set('dataDictionary.citation.title', `Copy of ${name}`);

      return this.store.createRecord('dictionary', {
        json: json
      });
    }
  });
});
;define('mdeditor/models/obj-hash', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Object.extend({
    contentLength: 0,
    length: Ember.computed.alias('contentLength'),

    init: function init() {
      this._super();
      this.content = {};
    },

    add: function add(obj) {
      var id = this.generateId();
      this.get('content')[id] = obj;
      this.incrementProperty("contentLength");
      return id;
    },

    getObj: function getObj(key) {
      var res = this.get('content')[key];
      if (!res) {
        throw "no obj for key " + key;
      }
      return res;
    },

    generateId: function generateId() {
      var num = Math.random() * 1000000000000.0;
      num = parseInt(num);
      num = "" + num;
      return num;
    },

    keys: function keys() {
      var res = [];
      for (var key in this.get('content')) {
        res.push(key);
      }
      return Ember.A(res);
    }
  });
});
;define('mdeditor/models/profile', ['exports', 'ember-data', 'mdeditor/models/schema', 'ember-cp-validations'], function (exports, _emberData, _schema, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  // [{
  //   "id": "full",
  //   "namespace": "org.adiwg.profile",
  //   "alternateId": [""],
  //   "title": "Full",
  //   "description": "Evey supported component",
  //   "version": "0.0.0",
  //   "components": {
  //     "record": {},
  //     "contact": {},
  //     "dictionary": {}
  //   },
  //   "nav": {
  //     "record": [{
  //       "title": "",
  //       "target": "",
  //       "tip": ""
  //     }]
  //   }
  // }]

  const Validations = (0, _emberCpValidations.buildValidations)({
    'config': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      message: 'The definition has not been downloaded.'
    }),
    'uri': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }), (0, _emberCpValidations.validator)('format', {
      regex: _schema.regex,
      isWarning: false,
      message: 'This field should be a valid, resolvable URL.'
    })]
  });

  exports.default = _emberData.default.Model.extend(Validations, {
    init() {
      this._super(...arguments);

      this.updateSettings;
    },

    uri: _emberData.default.attr('string'),
    alias: _emberData.default.attr('string'),
    altDescription: _emberData.default.attr('string'),
    remoteVersion: _emberData.default.attr('string'),
    config: _emberData.default.attr('json'),

    title: Ember.computed.or('alias', 'config.title'),
    identifier: Ember.computed.alias('config.identifier'),
    namespace: Ember.computed.alias('config.namespace'),
    description: Ember.computed.or('altDescription', 'config.description'),
    localVersion: Ember.computed.alias('config.version'),
    components: Ember.computed.alias('config.components'),
    nav: Ember.computed.alias('config.nav'),
    hasUpdate: Ember.computed('localVersion', 'remoteVersion', _schema.checkVersion),

    /* eslint-disable ember/no-observers */
    updateSettings: Ember.observer('hasDirtyAttributes', 'alias', 'uri', 'altDescription', 'remoteVersion', 'config', function () {
      if (this.isNew || this.isEmpty || this.isDeleted) {
        return;
      }

      if (this.hasDirtyAttributes) {
        this.set('dateUpdated', new Date());

        Ember.run.once(this, function () {
          this.save();
        });
      }
    })
    /* eslint-enable ember/no-observers */
  });
});
;define('mdeditor/models/record', ['exports', 'ember-copy', 'ember-data', 'uuid/v4', 'mdeditor/models/base', 'ember-cp-validations'], function (exports, _emberCopy, _emberData, _v, _base, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'recordId': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }),
    'json.metadata.resourceInfo.resourceType': [(0, _emberCpValidations.validator)('array-valid'), (0, _emberCpValidations.validator)('array-required', {
      track: ['type']
    })],
    // 'json.resourceInfo.abstract': validator('presence', {
    //   presence: true,
    //   ignoreBlank: true
    // }),
    'json.metadata.resourceInfo.citation.title': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })
    // 'json.metadata.resourceInfo.citation': validator('length', {
    //   min: 1
    // }),
    // 'json.metadata.resourceInfo.status': validator('length', {
    //   min: 1
    // }),
    // 'json.metadata.resourceInfo.pointOfContact': validator('length', {
    //   min: 1
    // }),
    // 'json.metadata.resourceInfo.defaultResourceLocale': validator('length', {
    //   min: 1
    // })
  });

  const Record = _base.default.extend(Validations, _emberCopy.Copyable, {
    profile: _emberData.default.attr('string', {
      defaultValue: 'full'
    }),
    json: _emberData.default.attr('json', {
      defaultValue() {
        const obj = Ember.Object.create({
          schema: {
            name: 'mdJson',
            version: '2.6.0'
          },
          contact: [],
          metadata: {
            metadataInfo: {
              metadataIdentifier: {
                identifier: (0, _v.default)(),
                namespace: 'urn:uuid'
              },
              metadataContact: [],
              defaultMetadataLocale: {}
            },
            resourceInfo: {
              resourceType: [{}],
              citation: {
                title: null,
                date: []
              },
              pointOfContact: [],
              abstract: '',
              shortAbstract: '',
              status: [],
              defaultResourceLocale: {
                // characterSet: UTF-8,
                // country: USA,
                // language: eng
              },
              timePeriod: {
                periodName: []
              },
              extent: [],
              keyword: []
            }
          },
          metadataRepository: [],
          dataDictionary: []
        });

        return obj;
      }
    }),
    dateUpdated: _emberData.default.attr('date', {
      defaultValue() {
        return new Date();
      }
    }),

    title: Ember.computed.alias('json.metadata.resourceInfo.citation.title'),

    icon: Ember.computed('json.metadata.resourceInfo.resourceType.firstObject.type', function () {
      const type = this.get('json.metadata.resourceInfo.resourceType.0.type') || '';
      const list = Ember.getOwner(this).lookup('service:icon');

      return type ? list.get(type) || list.get('default') : list.get('defaultFile');
    }),

    recordId: Ember.computed.alias('json.metadata.metadataInfo.metadataIdentifier.identifier'),
    recordIdNamespace: Ember.computed.alias('json.metadata.metadataInfo.metadataIdentifier.namespace'),

    parentIds: Ember.computed.alias('json.metadata.metadataInfo.parentMetadata.identifier'),

    hasParent: Ember.computed('parentIds.[]', function () {
      let ids = this.parentIds;
      let allRecords = this.store.peekAll('record');
      let records = allRecords.rejectBy('hasSchemaErrors');

      if (!ids) {
        return false;
      }

      return ids.find(id => {
        return records.findBy('recordId', id.identifier) ? true : false;
      });
    }),

    defaultParent: Ember.computed('hasParent', function () {
      let id = this.get('hasParent.identifier');
      let allRecords = this.store.peekAll('record');

      if (!id) {
        return undefined;
      }

      return allRecords.findBy('recordId', id);
    }),

    defaultType: Ember.computed.alias('json.metadata.resourceInfo.resourceType.firstObject.type'),

    /**
     * The trimmed varsion of the recordId.
     *
     * @property shortId
     * @type {String}
     * @readOnly
     * @category computed
     * @requires recordId
     */
    shortId: Ember.computed('recordId', function () {
      const recordId = this.recordId;
      if (recordId) {
        let index = recordId.indexOf('-');

        return recordId.substring(0, index > -1 ? index : 8);
      }

      return recordId;
    }),

    /**
     * A list of schema errors return by the validator.
     *
     * @property hasSchemaErrors
     * @type {Array}
     * @readOnly
     * @category computed
     * @requires status
     */
    schemaErrors: Ember.computed('hasDirtyHash', 'customSchemas.[]', function () {
      let mdjson = this.mdjson;
      let errors = [];
      let result = mdjson.validateRecord(this).errors;

      if (result) {
        errors.pushObject({
          title: 'Default Record Validation',
          errors: result
        });
      }

      this.customSchemas.forEach(schema => {
        const validator = schema.validator;

        if (!validator) {
          return;
        }

        if (validator.validate(schema.rootSchema, mdjson.formatRecord(this))) {
          return;
        }

        errors.pushObject({
          title: schema.title,
          errors: validator.errors
        });
      });

      return errors;
    }),

    formatted: Ember.computed.alias('_formatted'),

    copy() {
      let current = this.cleanJson;
      let json = Ember.Object.create(current);
      let name = current.metadata.resourceInfo.citation.title;

      json.set('metadata.resourceInfo.citation.title', `Copy of ${name}`);
      json.set('metadata.metadataInfo.metadataIdentifier', {
        identifier: (0, _v.default)(),
        namespace: 'urn:uuid'
      });

      return this.store.createRecord('record', {
        json: json
      });
    }
  });

  Object.defineProperty(Record.prototype, '_formatted', {
    get() {
      return this.mdjson.formatRecord(this);
    }
  });

  exports.default = Record;
});
;define('mdeditor/models/schema', ['exports', 'ember-data', 'ember-cp-validations', 'semver', 'ajv', 'ajv-errors', 'ajv/lib/refs/json-schema-draft-04'], function (exports, _emberData, _emberCpValidations, _semver, _ajv, _ajvErrors, _jsonSchemaDraft) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.checkVersion = exports.regex = undefined;


  const ajvOptions = {
    verbose: true,
    allErrors: true,
    jsonPointers: true,
    removeAdditional: false,
    schemaId: 'auto'
  };

  const regex = /^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/i;

  const checkVersion = function checkVersion() {
    if (!this.localVersion && this.remoteVersion) {
      return true;
    }

    return this.remoteVersion ? _semver.default.gt(this.remoteVersion, this.localVersion) : false;
  };

  const Validations = (0, _emberCpValidations.buildValidations)({
    'title': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }),
    'description': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }),
    'schemaType': [(0, _emberCpValidations.validator)('presence', true), (0, _emberCpValidations.validator)('inclusion', {
      description: 'This value',
      in: ['record', 'contact', 'dictionary']
    })],
    'uri': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }), (0, _emberCpValidations.validator)('format', {
      regex: regex,
      isWarning: false,
      message: 'This field should be a valid, resolvable URL.'
    })],
    'customSchemas': [(0, _emberCpValidations.validator)('array-valid'), (0, _emberCpValidations.validator)('array-required', {
      track: ['type'],
      isWarning: true
    })]
  });

  const theComp = _emberData.default.Model.extend(Validations, {
    init() {
      this._super(...arguments);

      this.schemaValidator = (0, _ajvErrors)(new _ajv.default(ajvOptions));
      this.schemaValidator.addMetaSchema(_jsonSchemaDraft);
      this.updateSettings;
    },
    flashMessages: Ember.inject.service(),

    title: _emberData.default.attr('string'),
    uri: _emberData.default.attr('string'),
    description: _emberData.default.attr('string'),
    schemaType: _emberData.default.attr('string'),
    version: _emberData.default.attr('string'),
    remoteVersion: _emberData.default.attr('string'),
    isGlobal: _emberData.default.attr('boolean', {
      defaultValue: false
    }),
    customSchemas: _emberData.default.attr('json', {
      defaultValue: function defaultValue() {
        return [];
      }
    }),

    status: Ember.computed('validations.isInvalid', function () {
      return this.validations.isInvalid ? 'warning' : 'success';
    }),

    formattedType: Ember.computed('schemaType', function () {
      return this.schemaType === 'record' ? 'Metadata' : Ember.String.capitalize(this.schemaType || 'Unknown');
    }),

    formattedGlobal: Ember.computed('isGlobal', function () {
      return this.isGlobal ? 'Yes' : 'No';
    }),

    /**
     * The timestamp for the record
     *
     * @attribute dateUpdated
     * @type {date}
     * @default new Date()
     * @required
     */
    dateUpdated: _emberData.default.attr('date', {
      defaultValue() {
        return new Date();
      }
    }),

    localVersion: Ember.computed.or('version', 'rootSchema.version'),

    hasUpdate: Ember.computed('version', 'remoteVersion', 'customSchemas.0.version', checkVersion),

    rootSchema: Ember.computed('customSchemas.firstObject.schema', function () {
      return this.customSchemas.get('firstObject.schema');
    }),

    validator: Ember.computed('isGlobal', 'customSchemas', function () {
      if (!this.isGlobal && !this.get('customSchemas.length')) {
        return;
      }

      this.schemaValidator.removeSchema();

      let valid = this.customSchemas.every(schema => {
        return this.schemaValidator.validateSchema(schema.schema);
      });

      if (valid) {
        return this.schemaValidator.addSchema(this.customSchemas.mapBy('schema'));
      }

      this.flashMessages.danger(`Could not load schemas for ${this.title}. Schemas provided did not validate.`);
    }),

    /* eslint-disable ember/no-observers */
    updateSettings: Ember.observer('hasDirtyAttributes', 'title', 'uri', 'description', 'schemaType', 'remoteVersion', 'schemaType', 'isGlobal', 'customSchemas.[]', function () {
      if (this.isNew || this.isEmpty || this.isDeleted) {
        return;
      }

      if (this.hasDirtyAttributes) {
        this.set('dateUpdated', new Date());

        Ember.run.once(this, function () {
          this.save();
        });
      }
    })
    /* eslint-enable ember/no-observers */
  });

  exports.regex = regex;
  exports.checkVersion = checkVersion;
  exports.default = theComp;
});
;define('mdeditor/models/setting', ['exports', 'ember-data'], function (exports, _emberData) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.defaultValues = undefined;


  const defaultValues = {
    mdTranslatorAPI: 'https://mdtranslator.herokuapp.com/api/v3/translator',
    fiscalStartMonth: '10'
  };

  const theModel = _emberData.default.Model.extend({
    settings: Ember.inject.service(),

    init() {
      this._super(...arguments);

      //this.on('didUpdate', this, this.wasUpdated);
      this.on('didLoad', this, this.wasLoaded);
      //this.on('didUpdate', this, this.wasLoaded);
      this.updateSettings;
    },
    //cleaner: inject.service(),
    compressOnSave: _emberData.default.attr('boolean', {
      defaultValue: true
    }),
    showSplash: _emberData.default.attr('boolean', {
      defaultValue: true
    }),
    autoSave: _emberData.default.attr('boolean', {
      defaultValue: false
    }),
    lastVersion: _emberData.default.attr('string', {
      defaultValue: ''
    }),
    dateUpdated: _emberData.default.attr('date', {
      defaultValue() {
        return new Date();
      }
    }),
    characterSet: _emberData.default.attr('string', {
      defaultValue: 'UTF-8'
    }),
    country: _emberData.default.attr('string', {
      defaultValue: 'USA'
    }),
    language: _emberData.default.attr('string', {
      defaultValue: 'eng'
    }),
    importUriBase: _emberData.default.attr('string', {
      defaultValue: ''
    }),
    mdTranslatorAPI: _emberData.default.attr('string', {
      defaultValue: defaultValues.mdTranslatorAPI
    }),
    fiscalStartMonth: _emberData.default.attr('string', {
      defaultValue: defaultValues.fiscalStartMonth
    }),
    repositoryDefaults: _emberData.default.attr('json'),
    publishOptions: _emberData.default.attr('json', {
      defaultValue: function defaultValue() {
        return Ember.Object.create();
      }
    }),
    customSchemas: _emberData.default.attr('json', {
      defaultValue: function defaultValue() {
        return [];
      }
    }),
    locale: Ember.computed.alias('defaultLocale'),

    wasLoaded() {
      this.settings.setup();
    },
    updateSettings: Ember.observer('hasDirtyAttributes', function () {
      if (this.hasDirtyAttributes) {
        Ember.run.once(this, function () {
          this.save();
        });
      }
    })
  });

  exports.defaultValues = defaultValues;
  exports.default = theModel;
});
;define('mdeditor/pods/components/control/md-button-confirm/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: 'button',
    classNames: 'md-button-confirm',
    attributeBindings: ['type', 'disabled'],
    type: 'button',
    isShowingConfirm: false,
    propagateClick: false,
    disabled: null,

    /**
     * Tooltip text shown when isShowingConfirm is true
     *
     * @property tooltip
     * @type {String}
     * @default "undefined"
     */

    /**
     * Side to show tooltip
     *
     * @property tipSide
     * @type {String}
     * @default "left"
     */
    tipSide: 'left',

    /**
     * Class to add to tooltip
     *
     * @property tipClass
     * @type {String}
     * @default ""
     */
    tipClass: '',

    /**
     * The function to call when action is confirmed.
     *
     * @method onConfirm
     * @return {[type]} [description]
     */
    onConfirm() {},

    //click handler, sets button state
    click(evt) {
      if (!this.propagateClick) {
        evt.stopPropagation();
      }

      if (this.isShowingConfirm) {
        this.onConfirm();
        this.set('isShowingConfirm', false);
      } else {
        this.set('isShowingConfirm', true);
      }
    },

    blur() {
      this.set('isShowingConfirm', false);
    }
  });
});
;define("mdeditor/pods/components/control/md-button-confirm/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "LMRLP460", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"liquid-if\",[[23,[\"isShowingConfirm\"]]],[[\"use\"],[\"toDown\"]],{\"statements\":[[0,\"  \"],[7,\"i\"],[11,\"class\",\"fa fa-question\"],[9],[10],[0,\" Confirm\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,[\"isShowingConfirm\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"tooltip\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"ember-tooltip\",null,[[\"tooltipClassName\",\"text\",\"side\"],[[27,\"concat\",[\"ember-tooltip md-tooltip \",[23,[\"tipClass\"]]],null],[23,[\"tooltip\"]],[23,[\"tipSide\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-button-confirm/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-button-modal/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * mdEditor Component that renders a button which displays a modal
     * dialog when clicked.
     *
     * @class md-button-modal
     * @module mdeditor
     * @submodule components-control
     * @constructor
     */

    tagName: 'button',
    classNames: 'md-button-modal',
    attributeBindings: ['type'],

    /**
     * Element selector or element that serves as the reference for modal position
     *
     * @property target
     * @type {String}
     */
    target: 'html',

    /**
     * A boolean, when true renders the modal without wormholing or tethering
     *
     * @property renderInPlace
     * @type {Boolean}
     */
    renderInPlace: false,

    /**
     * Indicates whether the modal dialog is being displayed.
     * @type {Boolean}
     */
    isShowingModal: false,

    /**
     * The function to call when action is cancelled.
     *
     * @method onCancel
     */
    onCancel() {},

    /**
     * The function to call when action is confirmed.
     *
     * @method onConfirm
     */
    onConfirm() {},

    //click handler, sets modal state
    click() {
      this.toggleProperty('isShowingModal');
    },

    actions: {
      toggleModal() {
        this.toggleProperty('isShowingModal');
      },
      cancel() {
        this.onCancel();
        this.toggleProperty('isShowingModal');
      },
      confirm() {
        this.onConfirm();
        this.toggleProperty('isShowingModal');
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-button-modal/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Rtxm8yLJ", "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"],[4,\"control/md-modal\",null,[[\"isShowing\",\"closeModal\",\"target\",\"renderInPlace\"],[[23,[\"isShowingModal\"]],[27,\"action\",[[22,0,[]],\"cancel\"],null],[23,[\"target\"]],[23,[\"renderInPlace\"]]]],{\"statements\":[[0,\"    \"],[1,[27,\"html-safe\",[[23,[\"message\"]]],null],false],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-modal-buttons pull-right\"],[9],[0,\"\\n      \"],[7,\"button\"],[11,\"class\",\"btn btn-danger\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"confirm\"]],[9],[0,\"Confirm\"],[10],[0,\"\\n      \"],[7,\"button\"],[11,\"class\",\"btn btn-primary\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancel\"]],[9],[0,\"Cancel\"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-button-modal/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-button/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * mdEditor Component that renders a `<button>`
     *
     * @class md-button
     * @module mdeditor
     * @submodule components-control
     * @constructor
     */

    tagName: 'button',
    classNames: ['md-button btn'],
    classNameBindings: ['responsive:md-btn-responsive'],
    attributeBindings: ['type', 'disabled'],
    type: 'button',
    disabled: null,

    /**
     * Button text
     *
     * @property text
     * @type {String}
     * @default ""
     */
    text: '',

    /**
     * Button icon
     *
     * @property icon
     * @type {String}
     * @default ""
     */
    icon: '',

    /**
     * Tooltip text shown when isShowingConfirm is true
     *
     * @property tooltip
     * @type {String}
     * @default "undefined"
     */

    /**
     * Side to show tooltip
     *
     * @property tipSide
     * @type {String}
     * @default "left"
     */
    tipSide: 'left',

    /**
     * Class to add to tooltip
     *
     * @property tipClass
     * @type {String}
     * @default ""
     */
    tipClass: '',

    /**
    * Render with wrapped text. Defaults to true if text.length is > 12 or
    * contains spaces.
    *
    * @property responsive
    * @type {Boolean}
    * @default "false"
    * @category computed
    * @requires text
    */
    responsive: Ember.computed('text', function () {
      return this.text.length > 12 || this.text.indexOf(' ') > 0;
    })
  });
});
;define("mdeditor/pods/components/control/md-button/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "FzjwdCGP", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[24,1]],null,{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"icon\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"fa-icon\",[[23,[\"icon\"]]],[[\"spin\"],[[23,[\"iconSpin\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[1,[21,\"text\"],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,[\"tooltip\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"ember-tooltip\",null,[[\"tooltipClassName\",\"text\",\"side\"],[[27,\"concat\",[\"ember-tooltip md-tooltip \",[23,[\"tipClass\"]]],null],[23,[\"tooltip\"]],[23,[\"tipSide\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-button/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-contact-link/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.LinkComponent.extend({
    /**
     * mdEditor Component that accepts a contact identifier and returns the
     * formatted link element.
     *
     * @class md-contact-link
     * @module mdeditor
     * @submodule components-control
     * @constructor
     */

    didReceiveAttrs() {
      //Inline link title comes first, if present.
      let block = !this.block ? [this.get('contact.title')] : [];
      let params = Ember.get(this, 'params');
      let add = block.concat(['contact.show', this.get('contact.id')]);

      Ember.set(this, 'params', params ? add.concat(params) : add);
      this._super(...arguments);
    },

    store: Ember.inject.service(),

    /**
     * The contacts service
     *
     * @property contacts
     * @type {Ember.Service}
     * @readOnly
     */
    contacts: Ember.inject.service(),

    /**
     * The contact identifier
     *
     * @property contactId
     * @type {String}
     * @required
     */

    /**
     * Render as block
     *
     * @property block
     * @type {Boolean}
     * @required
     */

    /**
     * The contact record
     *
     * @property contact
     * @type {String}
     * @readOnly
     * @category computed
     * @requires contactId
     */
    contact: Ember.computed('contactId', function () {
      let rec = this.store.peekAll('contact').findBy('json.contactId', this.contactId);

      return rec;
    }).readOnly()
  });
});
;define('mdeditor/pods/components/control/md-contact-title/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: '',

    store: Ember.inject.service(),

    /**
     * mdEditor Component that accepts a contact identifier and returns the
     * contact title or yields the contact in block form.
     *
     * @class md-contact-title
     * @module mdeditor
     * @submodule components-control
     * @constructor
     */

    /**
     * The contact identifier
     *
     * @property contactId
     * @type {String}
     * @required
     */
    /**
     * description
     *
     * @property contact
     * @type {String}
     * @readOnly
     * @category computed
     * @requires contactId
     */
    contact: Ember.computed('contactId', function () {
      let rec = this.store.peekAll('contact').findBy('json.contactId', this.contactId);

      return rec;
    }).readOnly()
  });
});
;define("mdeditor/pods/components/control/md-contact-title/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "i3Op42SW", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[24,1]],null,{\"statements\":[[0,\"  \"],[14,1,[[23,[\"contact\"]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[1,[27,\"if\",[[23,[\"contact\"]],[23,[\"contact\",\"title\"]],[23,[\"default\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-contact-title/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-crud-buttons/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: 'md-crud-buttons',

    actions: {
      save: function save() {
        this.doSave();
      },

      cancel: function cancel() {
        this.doCancel();
      },

      delete: function _delete() {
        this.doDelete();
      },

      copy: function copy() {
        this.doCopy();
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-crud-buttons/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ikQnarYW", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"btn-group-vertical center-block\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"CRUD Button Controls\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"doSave\"]]],null,{\"statements\":[[0,\"      \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-success\"],[12,\"disabled\",[27,\"if\",[[23,[\"model\",\"hasDirtyHash\"]],false,true],null]],[11,\"type\",\"submit\"],[3,\"action\",[[22,0,[]],\"save\"]],[9],[0,\"\\n        \"],[7,\"i\"],[11,\"class\",\"fa fa-floppy-o\"],[9],[10],[0,\" Save\\n      \"],[10],[0,\"\\n      \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-warning\"],[12,\"disabled\",[27,\"if\",[[23,[\"model\",\"canRevert\"]],false,true],null]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancel\"]],[9],[0,\"\\n        \"],[7,\"i\"],[11,\"class\",\"fa fa-undo\"],[9],[10],[0,\" Cancel\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-info\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"copy\"]],[9],[0,\"\\n    \"],[7,\"i\"],[11,\"class\",\"fa fa-clone\"],[9],[10],[0,\" Copy\\n  \"],[10],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\",\"tooltip\",\"tipClass\"],[\"btn btn-lg btn-danger\",[27,\"action\",[[22,0,[]],\"delete\"],null],\"Permanently delete this record?\",\"danger\"]],{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete\\n\"]],\"parameters\":[]},null],[0,\"  \"],[14,1],[0,\"\\n  \"],[1,[27,\"ember-tooltip\",null,[[\"tooltipClassName\",\"text\",\"side\"],[\"ember-tooltip md-tooltip primary\",\"Manage the record\",\"top\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-crud-buttons/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-definition/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * mdEditor Component that renders a definition
     *
     * @class md-definition
     * @module mdeditor
     * @submodule components-control
     * @constructor
     */

    tagName: '',

    /**
     * The definition title
     *
     * @property title
     * @type {String}
     */

    /**
     * The class(es) to apply to the definition title
     *
     * @property titleClass
     * @type {String}
     */

    /**
     * The definition text
     *
     * @property text
     * @type {String}
     * @required
     */

    /**
     * The text to display if the text is falsy.
     *
     * @property empty
     * @type {String}
     * @default  'Not Defined'
     */
    empty: 'Not Defined'
  });
});
;define("mdeditor/pods/components/control/md-definition/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Wi9AtXp7", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"dt\"],[12,\"class\",[21,\"titleClass\"]],[9],[1,[27,\"if\",[[23,[\"title\"]],[23,[\"title\"]],\"--\"],null],false],[10],[0,\"\\n\"],[7,\"dd\"],[9],[0,\"\\n\"],[4,\"if\",[[24,1]],null,{\"statements\":[[0,\"    \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"text\"]]],null,{\"statements\":[[0,\"      \"],[1,[21,\"text\"],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[1,[21,\"empty\"],false],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-definition/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-edit-table/component', ['exports', 'mdeditor/pods/components/control/md-record-table/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * @module mdeditor
     * @submodule components-control
     */

    /**
     * Table used to edit objects with row expander. Includes column to toggle
     * selection for all rows. Component supplied in `editRowComponent` is rendered
     * when the row is expanded.
     *
     *```handlebars
     * \{{control/md-record-table
     *   data=model.data
     *   columns=model.columns
     *   select=callback
     * }}
     * ```
     *
     * @class md-edit-table
     * @extends md-record-table
     */

    // classNames: ['md-edit-table'],
    tagName: '',
    spotlightRow: true,

    /**
    * Array of button configs to add to action column
    *
    * @property actionButtons
    * @type {[Object]}
    */

    /**
    * Array of badge configs to add to action column
    *
    * @property actionBadges
    * @type {[Object]}
    */

    /**
     * Column configs for the action column.
     * See http://onechiporenko.github.io/ember-models-table
     *
     *
     * @property actionsColumn
     * @type {Object}
     * @required
     */
    actionsColumn: Ember.computed('actionButtons', function () {
      let btns = [{
        title: 'Edit',
        type: 'success',
        icon: 'pencil',
        // action: this.actions.editRow,
        action: "editRow",
        target: this
      }, {
        title: 'Delete',
        type: 'danger',
        icon: 'times',
        confirm: true,
        //action: this.actions.deleteRow,
        action: "deleteRow",
        target: this
      }];

      if (this.actionButtons) {
        btns.push(this.actionButtons);
      }

      return {
        className: 'md-actions-column',
        component: 'components/md-models-table/components/row-buttons',
        componentForFilterCell: 'control/md-record-table/buttons/filter',
        disableFiltering: true,
        disableSorting: true,
        mayBeHidden: false,
        buttons: btns,
        badges: this.actionBadges
      };
    }),

    editRow(index, record) {
      this.send('expandRow', index, record);
    },

    actions: {
      // body
      editRow(col, index, record, evt) {
        evt.stopPropagation();
        this.editRow(index, record);
      },
      deleteRow(col, index, record) {
        record.destroyRecord();
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-edit-table/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8+3zLs2y", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"control/md-record-table\",null,[[\"class\",\"actionsColumn\",\"selectRowOnClick\",\"data\",\"dataColumns\",\"expandedItems\",\"columnSets\",\"pageSize\",\"expandedRowComponent\"],[\"md-edit-table\",[23,[\"actionsColumn\"]],[23,[\"selectRowOnClick\"]],[23,[\"data\"]],[23,[\"columns\"]],[23,[\"expandedItems\"]],[23,[\"columnSets\"]],[23,[\"pageSize\"]],[27,\"component\",[\"md-models-table/components/row-body\"],[[\"spotlighted\",\"rowBodyComponent\"],[[23,[\"spotlightRow\"]],[23,[\"rowBodyComponent\"]]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-edit-table/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-errors/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: ['md-error-list']

    /**
    *  Error objects to render grouped by validation schema or profile. The group
    *  object must have a `title` and `errors` property. Error objects iwthin the
    *  group must have a `message` property. `dataPath` is optional.
    *
    * @property errors
    * @type {Array}
    * @required
    */
  });
});
;define("mdeditor/pods/components/control/md-errors/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "J346vOlz", "block": "{\"symbols\":[\"error\",\"err\",\"idx\",\"&default\"],\"statements\":[[4,\"each\",[[23,[\"errors\"]]],null,{\"statements\":[[0,\"  \"],[7,\"section\"],[9],[0,\"\\n    \"],[7,\"h3\"],[9],[1,[22,1,[\"title\"]],false],[10],[0,\"\\n    \"],[7,\"ul\"],[11,\"class\",\"list-group\"],[9],[0,\"\\n\"],[4,\"each\",[[22,1,[\"errors\"]]],null,{\"statements\":[[0,\"        \"],[7,\"li\"],[12,\"class\",[28,[\"list-group-item \",[27,\"if\",[[27,\"mod\",[[22,3,[]],2],null],\"list-group-item-warning\"],null]]]],[9],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"media\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"media-left media-middle\"],[9],[0,\"\\n                \"],[7,\"span\"],[12,\"class\",[28,[\"label label-\",[27,\"if\",[[22,2,[\"dataPath\"]],\"warning\",\"danger\"],null]]]],[9],[1,[22,3,[]],false],[10],[0,\"\\n            \"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"media-body\"],[9],[0,\"\\n              \"],[7,\"h4\"],[11,\"class\",\"media-heading\"],[9],[1,[22,2,[\"message\"]],false],[10],[0,\" \"],[1,[22,2,[\"dataPath\"]],false],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[2,3]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[14,4],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-errors/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-fiscalyear/component', ['exports', 'mdeditor/pods/components/input/md-select/component', 'mdeditor/pods/components/input/md-select/template', 'moment'], function (exports, _component, _template, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    layout: _template.default,
    settings: Ember.inject.service('settings'),
    classNames: ['md-fiscalyear'],
    objectArray: Ember.computed(function () {
      return Array.apply(0, Array(12)).map(function (element, index) {
        return {
          year: index + ((0, _moment.default)().year() - 10)
        };
      });
    }),
    label: 'Pick Fiscal Year',
    valuePath: 'year',
    namePath: 'year',
    tooltip: false,
    searchEnabled: true,
    placeholder: 'Pick a Fiscal Year',
    create: true,
    disabled: Ember.computed('settings.data.fiscalStartMonth', function () {
      return !this.get('settings.data.fiscalStartMonth');
    }),
    change() {
      let val = this.value;
      let month = parseInt(this.get('settings.data.fiscalStartMonth'), 10) - 1;
      let dt = month <= 6 ? (0, _moment.default)(val, 'YYYY') : (0, _moment.default)(val, 'YYYY').subtract(1, 'year');
      let start = dt.month(month).startOf('month');
      //let end = moment(val, 'YYYY').month('September').endOf('month');
      let end = start.clone().add(11, 'months').endOf('month');
      let context = this.context;

      this.setProperties({
        end: end,
        start: start
      });

      if (context) {
        //have to set values using datetimepicker
        context.$('.start .date').data("DateTimePicker").date(start);
        context.$('.end .date').data("DateTimePicker").date(end);
      }

      this.set('value', null);
    }
  });
});
;define('mdeditor/pods/components/control/md-import-csv/component', ['exports', 'papaparse'], function (exports, _papaparse) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * @module mdeditor
     * @submodule components-control
     */

    /**
     * Button with drop zone used to load CSV files
     *
     *```handlebars
     * \{{control/md-import-csv
     *   beforeFirstChunk=callback
     *   processChunk=callback
     *   processComplete=callback
     * }}
     * ```
     *
     * @class md-import-csv
     */

    router: Ember.inject.service(),
    ajax: Ember.inject.service(),

    /**
     * True if processing CSV file
     *
     * @property isProcessing
     * @type {Boolean}
     * @default "false"
     * @required
     */
    isProcessing: false,

    /**
     * Percent of file processed
     *
     * @property progress
     * @type {Number}
     * @default 0
     */
    progress: 0,

    /**
     * Style string for progress bar
     *
     * @property barWidth
     * @type {String}
     * @default "min-width: 10em;width:0%;""
     * @category computed
     * @requires progress
     */
    barWidth: Ember.computed('progress', function () {
      return Ember.String.htmlSafe(`min-width: 10em;width:${this.progress}%;`);
    }),

    /**
     * Callback fires before first chunk is processed
     *
     * @method beforeFirstChunk
     * @param {Object} result Data returned from parser
     * @param {Array} options.data Chunk of data
     * @param {Array} options.errors
     * @param {Object} options.metadata
     */
    beforeFirstChunk() {},

    /**
     * Method that processes each chunk of data
     *
     * @method processChunk
     * @param {Array} data Chunk of data
     */
    processChunk() {},

    /**
     * Method called when processsing is complete
     *
     * @method processComplete
     */
    processComplete() {},

    actions: {
      stopParsing() {
        this.parser.abort();
        this.set('isProcessing', false);
      },
      readData(file) {
        _papaparse.default.SCRIPT_PATH = this.get('router.rootURL') + 'assets/workers/worker_papaparse.js';

        let comp = this;

        Ember.set(comp, 'isProcessing', true);
        Ember.set(comp, 'progress', 0);
        Ember.run.next(this, function () {

          new Ember.RSVP.Promise((resolve, reject) => {
            try {
              let processed = 1;
              let chunkSize = 1000000;

              _papaparse.default.parse(file.data, {
                header: true,
                worker: true,
                dynamicTyping: true,
                skipEmptyLines: true,
                chunkSize: chunkSize,
                complete: () => {
                  resolve();
                },
                chunk: (results, parser) => {
                  if (processed === 1) {
                    this.beforeFirstChunk(results);
                  }

                  this.set('progress', Math.trunc(chunkSize * processed / file.size * 100));

                  this.set('parser', parser);

                  this.processChunk(results.data);

                  processed++;
                }
              });
            } catch (e) {
              reject(`Failed to parse file: ${file.name}. Is it a valid CSV?\n${e}`);
            }
          }).then(() => {
            //fire callback
            this.processComplete();
          }).catch(reason => {
            //catch any errors
            this.flashMessages.danger(reason);
            return false;
          }).finally(() => {
            //set(comp, 'isProcessing', false);

            Ember.$('.md-import-picker input:file').val('');
          });
        });
      },

      readFromUri() {
        let comp = this;

        Ember.set(comp, 'isLoading', true);

        this.ajax.request(this.importUri, {
          type: 'GET',
          context: this,
          dataType: 'text',
          crossDomain: true
        }).then(function (response, textStatus) {

          if (response && textStatus === 'success') {
            let json;

            new Ember.RSVP.Promise((resolve, reject) => {
              try {
                json = JSON.parse(response);
              } catch (e) {
                reject(`Failed to parse data. Is it valid JSON?`);
              }

              resolve({
                json: json,
                file: null,
                route: this
              });
            }).then(data => {
              //determine file type and map
              this.mapJSON(data);
            }).catch(reason => {
              //catch any errors
              this.flashMessages.danger(reason);
              return false;
            }).finally(() => {
              Ember.set(comp, 'isLoading', false);
              Ember.$('.import-file-picker input:file').val('');
            });
          } else {
            Ember.set(comp, 'errors', response.messages);
            this.flashMessages.danger('Import error!');
          }
        }, response => {
          let error = ` Error retrieving the mdJSON: ${response.status}: ${response.statusText}`;

          Ember.set(comp, 'xhrError', error);
          Ember.set(comp, 'isLoading', false);
          this.flashMessages.danger(error);
        });
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-import-csv/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "pV0Gcd2t", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"isProcessing\"]]],null,{\"statements\":[[0,\"  \"],[7,\"h3\"],[9],[1,[27,\"fa-icon\",[\"spinner\"],[[\"spin\"],[true]]],false],[0,\" Processing...\\n  \"],[7,\"button\"],[11,\"class\",\"btn btn-info\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"stopParsing\"]],[9],[0,\"\\n      \"],[1,[27,\"fa-icon\",[\"cross\"],[[\"spin\"],[true]]],false],[0,\"\\n    Stop\"],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"progress\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"progress-bar\"],[11,\"role\",\"progressbar\"],[12,\"aria-valuenow\",[21,\"progress\"]],[11,\"aria-valuemin\",\"0\"],[11,\"aria-valuemax\",\"100\"],[12,\"style\",[21,\"barWidth\"]],[9],[0,\"\\n      \"],[7,\"span\"],[11,\"class\",\"sr-only\"],[9],[1,[21,\"progress\"],false],[0,\"% Complete\"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"file-picker\",null,[[\"class\",\"fileLoaded\",\"preview\",\"accept\",\"readAs\"],[\"md-file-picker md-import-picker\",\"readData\",false,\".csv,.txt\",\"readAsText\"]],{\"statements\":[[0,\"    \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-info btn-block\"],[11,\"type\",\"button\"],[9],[1,[27,\"fa-icon\",[\"bullseye\"],null],false],[0,\"\\n      Click or Drop a CSV here.\"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-import-csv/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-itis/component', ['exports', 'moment', 'mdeditor/pods/components/object/md-citation/component'], function (exports, _moment, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    init() {
      this._super(...arguments);

      this.selected = [];
      (true && !(this.taxonomy) && Ember.assert('No taxonomy object supplied', this.taxonomy));
    },
    tagName: 'form',
    classNames: ['md-itis'],
    itis: Ember.inject.service(),
    flashMessages: Ember.inject.service(),
    searchString: null,
    kingdom: null,
    total: null,
    isLoading: false,
    limit: 25,
    resultTitle: Ember.computed('limit', 'total', 'searchResult.[]', function () {
      let total = this.total;
      let result = this.get('searchResult.length');
      let limit = this.limit;

      return total <= limit ? result : `${result} of ${total}`;
    }),
    notFound: Ember.computed('searchResult', function () {
      let result = this.searchResult;

      return Ember.isArray(result) && result.length === 0;
    }),
    found: Ember.computed.or('selected.length', 'searchResult.length'),
    submit() {
      let itis = this.itis;

      this.set('isLoading', true);
      this.set('searchResult', null);

      itis.sendQuery(this.searchString, this.kingdom, this.limit).then(response => {

        if (!response) {
          return;
        }

        let docs = response.response.docs;
        let data = docs.map(doc => itis.parseDoc(doc));

        this.set('searchResult', data);
        this.set('total', response.response.numFound);
        this.set('isLoading', false);
      });
    },
    actions: {
      search() {
        this.submit.call(this);
      },
      selectItem(item) {
        item.set('animate', true);
        item.set('selected', true);
        Ember.run.later(this, function () {
          this.searchResult.removeObject(item);
          this.selected.pushObject(item);
        }, 250);
      },
      deselectItem(item) {
        item.set('selected', false);
        Ember.run.later(this, function () {
          this.selected.removeObject(item);
          this.searchResult.pushObject(item);
        }, 250);
      },
      importTaxa(taxa) {
        let taxonomy = this.taxonomy;
        let itisCitation = this.get('itis.citation');

        let classification = Ember.set(taxonomy, 'taxonomicClassification', Ember.getWithDefault(taxonomy, 'taxonomicClassification', []));
        let systems = Ember.set(taxonomy, 'taxonomicSystem', Ember.getWithDefault(taxonomy, 'taxonomicSystem', [{ citation: {} }]));
        let system = systems.findBy('citation.title', Ember.get(itisCitation, 'title'));

        let allTaxa = taxa.reduce((acc, itm) => acc.pushObjects(itm.taxonomy), []);
        let today = (0, _moment.default)().format('YYYY-MM-DD');
        let dateObj = {
          date: today,
          dateType: 'transmitted',
          description: 'Taxa imported from ITIS'
        };

        allTaxa.forEach(itm => this.itis.mergeTaxa(itm, classification));

        if (!system) {
          itisCitation.get('date').pushObject(dateObj);
          systems.pushObject({
            citation: itisCitation
          });
        } else {
          let citation = Ember.set(system, 'citation', Ember.getWithDefault(system, 'citation', {}));
          (0, _component.formatCitation)(citation);

          let date = Ember.A(Ember.get(citation, 'date'));

          if (!date.findBy('date', today)) {
            date.pushObject(dateObj);
          }
        }

        this.flashMessages.success(`Successfully imported ${allTaxa.length} taxa from ITIS.`);
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-itis/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3EdlggtJ", "block": "{\"symbols\":[\"result\",\"name\",\"result\",\"name\"],\"statements\":[[4,\"layout/md-card\",null,[[\"spotlightEnabled\",\"block\"],[false,false]],{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"card-block row\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"form-group col-lg-9\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"control-label\"],[9],[0,\"Search Value\"],[10],[0,\"\\n        \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,0,[\"searchString\"]],\"Search ITIS using common name, scientific name, or TSN\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\\n    \"],[7,\"div\"],[11,\"class\",\"form-group col-lg-3\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"control-label\"],[9],[0,\"Kingdom \"],[7,\"em\"],[9],[0,\"(optional)\"],[10],[10],[0,\"\\n      \"],[1,[27,\"input/md-select\",null,[[\"value\",\"valuePath\",\"namePath\",\"objectArray\",\"searchEnabled\",\"tooltip\",\"allowClear\",\"tooltipPath\",\"disabled\",\"placeholder\"],[[22,0,[\"kingdom\"]],\"kingdomName\",\"title\",[27,\"sort-by\",[\"title\",[23,[\"itis\",\"kingdoms\",\"kingdomNames\"]]],null],false,true,true,\"kingdomName\",[27,\"if\",[[23,[\"searchString\"]],false,true],null],\"Select a kingdom.\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"card-footer\"],[9],[0,\"\\n    \"],[7,\"button\"],[11,\"class\",\"btn btn-primary pull-right\"],[12,\"disabled\",[27,\"if\",[[23,[\"searchString\"]],false,true],null]],[11,\"type\",\"submit\"],[3,\"action\",[[22,0,[]],\"search\"]],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"isLoading\"]]],null,{\"statements\":[[0,\"      \"],[1,[27,\"fa-icon\",[\"spinner\"],[[\"spin\"],[true]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[1,[27,\"fa-icon\",[\"search\"],null],false],[0,\"\\n      \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"tooltipClassName\",\"side\"],[\"Click to send search request\",\"ember-tooltip md-tooltip info\",\"left\"]]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      Search\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"notFound\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"alert alert-warning\"],[9],[0,\"\\n    \"],[7,\"h5\"],[9],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\" No taxa matched the search. Please try again.\"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"liquid-if\",[[23,[\"found\"]]],[[\"use\",\"enableGrowth\"],[\"fade\",false]],{\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"card md-card\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"card-header\"],[9],[0,\"\\n        \"],[7,\"h4\"],[11,\"class\",\"card-title\"],[9],[0,\"\\n          Select Taxa \"],[7,\"small\"],[9],[0,\"Showing \"],[1,[21,\"resultTitle\"],false],[0,\" found\"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"card-block no-padding\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"list-group no-margin md-itis-taxalist\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"searchResult\"]]],null,{\"statements\":[[4,\"liquid-unless\",[[22,3,[\"selected\"]]],[[\"class\",\"enableGrowth\",\"shrinkDelay\"],[[27,\"concat\",[\"list-group-item \",[27,\"if\",[[22,3,[\"animate\"]],\"md-itis-unselected\"],null]],null],true,500]],{\"statements\":[[0,\"              \"],[7,\"div\"],[11,\"class\",\"media\"],[9],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"media-body\"],[9],[0,\"\\n                  \"],[7,\"h4\"],[11,\"class\",\"media-heading\"],[9],[0,\"\\n                    \"],[1,[22,3,[\"name\"]],false],[0,\"\\n                    \"],[7,\"small\"],[11,\"class\",\"text-success\"],[9],[1,[22,3,[\"rank\"]],false],[10],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"p\"],[9],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"Kingdom:\"],[10],[0,\" \"],[1,[22,3,[\"kingdom\"]],false],[10],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"TSN:\"],[10],[0,\"\\n                      \"],[7,\"a\"],[12,\"href\",[28,[\"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=\",[22,3,[\"tsn\"]]]]],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[1,[22,3,[\"tsn\"]],false],[10],[0,\"\\n                       (\"],[7,\"span\"],[12,\"class\",[28,[\"text-\",[22,3,[\"style\"]]]]],[9],[1,[22,3,[\"status\"]],false],[10],[0,\")\\n                    \"],[10],[0,\"\\n                    \"],[7,\"dl\"],[11,\"class\",\"no-margin\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Common Name:\"]],{\"statements\":[[4,\"each\",[[22,3,[\"common\"]]],null,{\"statements\":[[0,\"                                \"],[1,[22,4,[\"name\"]],false],[0,\" (\"],[1,[22,4,[\"language\"]],false],[0,\")\\n                                \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[4]},{\"statements\":[[0,\"                                \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No names assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"                    \"],[10],[0,\"\\n                  \"],[10],[0,\"\\n                \"],[10],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"media-right media-middle\"],[9],[0,\"\\n                  \"],[7,\"button\"],[11,\"class\",\"btn btn-success btn-lg btn-block\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"selectItem\",[22,3,[]]]],[9],[0,\"Add\"],[10],[0,\"\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[3]},{\"statements\":[[0,\"              \"],[7,\"div\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n                \"],[7,\"p\"],[11,\"class\",\"list-group-item-text\"],[9],[0,\"\\n                  Perform a search to select additional taxa.\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[0,\"  \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"card md-card hd-success card-inverse card-outline-success\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"card-header\"],[9],[0,\"\\n        \"],[7,\"h4\"],[11,\"class\",\"card-title\"],[9],[0,\"\\n          Taxa Selected\\n\"],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"card-block no-padding\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"list-group no-margin md-itis-selectedlist\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,[\"selected\",\"length\"]]],[[\"use\"],[\"fade\"]],{\"statements\":[[0,\"          \"],[7,\"div\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n            \"],[7,\"p\"],[11,\"class\",\"list-group-item-text\"],[9],[0,\"\\n              \"],[7,\"button\"],[11,\"class\",\"btn btn-primary btn-lg btn-block\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"importTaxa\",[23,[\"selected\"]]]],[9],[0,\"Import Taxa\"],[10],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[23,[\"selected\"]]],null,{\"statements\":[[4,\"liquid-if\",[[22,1,[\"selected\"]]],[[\"class\",\"enableGrowth\",\"shrinkDelay\"],[\"list-group-item md-itis-selected\",true,500]],{\"statements\":[[0,\"              \"],[7,\"div\"],[11,\"class\",\"media\"],[9],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"media-body\"],[9],[0,\"\\n                  \"],[7,\"h4\"],[11,\"class\",\"media-heading\"],[9],[0,\"\\n                    \"],[1,[22,1,[\"name\"]],false],[0,\"\\n                    \"],[7,\"small\"],[11,\"class\",\"text-success\"],[9],[1,[22,1,[\"rank\"]],false],[10],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"p\"],[9],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"Kingdom:\"],[10],[0,\" \"],[1,[22,1,[\"kingdom\"]],false],[10],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"TSN:\"],[10],[0,\"\\n                      \"],[7,\"a\"],[12,\"href\",[28,[\"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=\",[22,1,[\"tsn\"]]]]],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[1,[22,1,[\"tsn\"]],false],[10],[0,\"\\n                       (\"],[7,\"span\"],[12,\"class\",[28,[\"text-\",[22,1,[\"style\"]]]]],[9],[1,[22,1,[\"status\"]],false],[10],[0,\")\\n                    \"],[10],[0,\"\\n                    \"],[7,\"dl\"],[11,\"class\",\"no-margin\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Common Name:\"]],{\"statements\":[[4,\"each\",[[22,1,[\"common\"]]],null,{\"statements\":[[0,\"                                \"],[1,[22,2,[\"name\"]],false],[0,\" (\"],[1,[22,2,[\"language\"]],false],[0,\")\\n                                \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[2]},{\"statements\":[[0,\"                                \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No names assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"                    \"],[10],[0,\"\\n                  \"],[10],[0,\"\\n                \"],[10],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"media-left media-middle\"],[9],[0,\"\\n                  \"],[7,\"button\"],[11,\"class\",\"btn btn-danger btn-lg btn-block\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"deselectItem\",[22,1,[]]]],[9],[0,\"Remove\"],[10],[0,\"\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[],\"parameters\":[]}]],\"parameters\":[1]},{\"statements\":[[0,\"            \"],[7,\"div\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n              \"],[7,\"p\"],[11,\"class\",\"list-group-item-text\"],[9],[0,\"\\n                Select taxa from the list.\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[10],[0,\"\\n\"],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-itis/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-json-button/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    slider: Ember.inject.service(),

    tagName: 'button',
    classNames: ['btn'],
    attributeBindings: ['type'],
    type: 'button',

    text: 'Preview JSON',
    icon: 'binoculars',
    json: Ember.computed(function () {
      return {};
    }),
    hideSlider: true,
    propagateClick: false,

    click(evt) {
      //this.set('preview', true);
      if (!this.propagateClick) {
        evt.stopPropagation();
      }
      this.showSlider();
    },

    _close() {
      this.set('preview', false);
      this.set('hideSlider', true);
    },

    showSlider() {
      let slider = this.slider;

      slider.set('fromName', 'md-slider-json');
      slider.set('onClose', this._close);
      slider.set('context', this);
      slider.toggleSlider(true);
      this.set('hideSlider', false);
    },

    actions: {
      close() {
        this._close;
      },
      showSlider() {
        this.showSlider();
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-json-button/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "4H8nQPFK", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[24,1]],null,{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[7,\"span\"],[12,\"class\",[28,[\"fa fa-\",[21,\"icon\"]]]],[9],[10],[0,\" \"],[1,[21,\"text\"],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,[\"preview\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"control/md-json-viewer\",null,[[\"json\",\"modal\",\"close\"],[[23,[\"json\"]],true,[27,\"action\",[[22,0,[]],\"close\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"unless\",[[23,[\"hideSlider\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-slider-json\",[27,\"hash\",null,[[\"title\",\"body\"],[[27,\"concat\",[\"Viewing JSON for: \",[23,[\"title\"]]],null],[27,\"component\",[\"control/md-json-viewer\"],[[\"modal\",\"json\"],[false,[23,[\"json\"]]]]]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-json-button/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-json-viewer/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: 'md-json-viewer',
    /**
     * True to render in modal dialog
     *
     * @type {Boolean}
     */
    modal: true,

    /**
     * Element selector or element that serves as the reference for modal position
     *
     * @property target
     * @type {String}
     */
    target: 'html',

    /**
     * Object or string to render as JSON in viewer
     *
     * @type {ObjectString}
     */
    json: 'No json supplied',

    close() {
      this.set('modal', false);
    },

    setFontSize(el, factor) {
      let currentFontSize = el.css('font-size');
      let currentFontSizeNum = parseFloat(currentFontSize, 10);
      let newFontSize = currentFontSizeNum * factor;

      el.animate({
        'font-size': `${newFontSize}px`
      });
    },

    didInsertElement() {
      let json = this.json;
      let out = Ember.typeOf(json) === 'string' ? json : JSON.stringify(json);

      Ember.$('.md-viewer-body').JSONView(out);
    },

    actions: {
      collapse() {
        this.$('.md-viewer-body').JSONView('collapse');
      },
      expand() {
        this.$('.md-viewer-body').JSONView('expand');
      },
      zoomin() {
        let body = this.$('.md-viewer-body');
        this.setFontSize(body, 1.1);
      },
      zoomout() {
        let body = this.$('.md-viewer-body');
        this.setFontSize(body, 0.9);
      },
      closeModal() {
        this.close();
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-json-viewer/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XyapxI8O", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"modal\"]]],null,{\"statements\":[[4,\"modal-dialog\",null,[[\"onClose\",\"translucentOverlay\",\"containerClass\",\"overlayClass\",\"attachment\",\"targetAttachment\",\"tetherTarget\"],[\"closeModal\",true,\"md-jsmodal-container\",\"md-modal-overlay\",\"top center\",\"top center\",\"html\"]],{\"statements\":[[0,\"    \"],[7,\"button\"],[11,\"class\",\"md-modal-close\"],[11,\"aria-label\",\"Close\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"closeModal\"]],[9],[0,\"\\n      \"],[7,\"span\"],[11,\"class\",\"fa-stack\"],[9],[0,\"\\n          \"],[7,\"i\"],[11,\"class\",\"fa fa-circle fa-stack-2x\"],[9],[10],[0,\"\\n          \"],[7,\"i\"],[11,\"class\",\"fa fa-times fa-stack-1x fa-inverse\"],[9],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-viewer-body\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"well\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"btn-toolbar md-viewer-controls pull-right\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"btn-group-vertical\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"JSON viewer controls\"],[9],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-primary\"],[11,\"title\",\"Expand All\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"expand\"]],[9],[1,[27,\"fa-icon\",[\"plus\"],null],false],[10],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-default\"],[11,\"title\",\"Collapse All\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"collapse\"]],[9],[1,[27,\"fa-icon\",[\"minus\"],null],false],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"btn-group-vertical\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"JSON viewer controls\"],[9],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-primary\"],[11,\"title\",\"Zoom in\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"zoomin\"]],[9],[1,[27,\"fa-icon\",[\"search\"],null],false],[10],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-default\"],[11,\"title\",\"Zoom Out\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"zoomout\"]],[9],[1,[27,\"fa-icon\",[\"search-minus\"],null],false],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-viewer-body\"],[9],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-json-viewer/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-modal/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * Whether to display the modal
     *
     * @prop isShowing
     * @type {Boolean}
     */
    isShowing: false,

    /**
     * Text to display in the modal.
     * Note: This string is NOT escaped in the template.
     *
     * @property message
     * @type {String}
     */

    /**
     * Element selector or element that serves as the reference for modal position
     *
     * @property target
     * @type {String}
     */
    target: 'viewport',

    /**
     * Whether to display the confirm button
     *
     * @property showConfirm
     * @type {Boolean}
     */
    showConfirm: false,

    /**
     * Whether to render in place
     *
     * @property renderInPlace
     * @type {Boolean}
     */
    renderInPlace: false,

    /**
     * Whether to display the cancel button
     *
     * @property showCancel
     * @type {Boolean}
     */
    showCancel: false,

    /**
     * Label for the confirm button
     *
     * @property confirmLabel
     * @type {String}
     */
    confirmLabel: 'OK',

    /**
     * Close action callback
     */
    closeModal() {
      this.set('isShowing', false);
    },

    /**
     * Confirm action callback
     */
    confirm() {
      this.closeModal();
    },

    /**
     * Cancel action callback
     */
    cancel() {
      this.closeModal();
    },

    actions: {
      closeModal() {
        this.closeModal();
      },

      confirm() {
        this.confirm();
      },

      cancel() {
        this.cancel();
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-modal/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "1GT2gMkf", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"isShowing\"]]],null,{\"statements\":[[4,\"modal-dialog\",null,[[\"onClose\",\"targetAttachment\",\"attachment\",\"translucentOverlay\",\"containerClass\",\"overlayClass\",\"tetherTarget\",\"renderInPlace\"],[\"closeModal\",\"middle center\",\"middle center\",true,\"md-modal-container\",\"md-modal-overlay\",[23,[\"target\"]],[23,[\"renderInPlace\"]]]],{\"statements\":[[0,\"    \"],[7,\"button\"],[11,\"class\",\"md-modal-close\"],[11,\"aria-label\",\"Close\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"closeModal\"]],[9],[0,\"\\n      \"],[7,\"span\"],[11,\"class\",\"fa-stack\"],[9],[0,\"\\n            \"],[7,\"i\"],[11,\"class\",\"fa fa-circle fa-stack-2x\"],[9],[10],[0,\"\\n            \"],[7,\"i\"],[11,\"class\",\"fa fa-times fa-stack-1x fa-inverse\"],[9],[10],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-modal-body\"],[9],[0,\"\\n      \"],[14,1],[0,\" \"],[1,[27,\"html-safe\",[[23,[\"message\"]]],null],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-modal-buttons pull-right\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"showConfirm\"]]],null,{\"statements\":[[0,\"        \"],[7,\"button\"],[11,\"class\",\"btn btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"confirm\"]],[9],[1,[21,\"confirmLabel\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,[\"showCancel\"]]],null,{\"statements\":[[0,\"        \"],[7,\"button\"],[11,\"class\",\"btn btn-warning\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancel\"]],[9],[0,\"Cancel\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-modal/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-record-table/buttons/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    router: Ember.inject.service(),
    classNames: ['md-dashboard-buttons'],

    actions: {
      deleteItem(item, index, isSelected, clickOnRow) {
        if (isSelected) {
          clickOnRow(index, item);
        }

        this._deleteItem(item);
      },

      editItem(item, evt) {
        evt.stopPropagation();
        this.router.transitionTo(`${item.constructor.modelName}.show.edit`, item);

        return false;
      },

      showSlider(rec, evt) {
        this.column.showSlider(rec, evt);
      }
    },

    _deleteItem(item) {
      item.destroyRecord().then(() => {
        item.unloadRecord();
      });
    }
  });
});
;define('mdeditor/pods/components/control/md-record-table/buttons/custom/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * Button style.
     *
     * @property column.buttonConfig.style
     * @type {String}
     */

    /**
     * Text to display in the button.
     *
     * @property column.buttonConfig.title
     * @type {String}
     */

    /**
     * The record passed to the component.
     *
     * @property record
     * @type {Object}
     */

    /**
     * Action to run on button click
     *
     * @property column.buttonConfig.action
     * @param {Object} record The row record
     */
    action() {}
  });
});
;define("mdeditor/pods/components/control/md-record-table/buttons/custom/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "1TYEFRRe", "block": "{\"symbols\":[\"c\"],\"statements\":[[4,\"with\",[[23,[\"column\",\"buttonConfig\"]]],null,{\"statements\":[[0,\"  \"],[7,\"button\"],[12,\"class\",[28,[\"btn btn-sm btn-\",[27,\"if\",[[22,1,[\"style\"]],[22,1,[\"style\"]],\"primary\"],null]]]],[12,\"onclick\",[27,\"action\",[[22,0,[]],[22,1,[\"action\"]],[23,[\"record\"]]],null]],[11,\"type\",\"button\"],[9],[0,\"\\n    \"],[1,[27,\"fa-icon\",[\"binoculars\"],null],false],[0,\" \"],[1,[22,1,[\"title\"]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-record-table/buttons/custom/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-record-table/buttons/filter/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    flashMessages: Ember.inject.service(),
    showButton: Ember.computed('selectedItems.[]', function () {
      return this.get('selectedItems.length') > 1;
    }),

    deleteSelected(records) {
      records.forEach(rec => {
        rec.destroyRecord().then(rec => {
          rec.unloadRecord();
          Ember.run.once(() => {
            records.removeObject(rec);
            this.flashMessages.danger(`Deleted ${rec.constructor.modelName} "${rec.get('title')}".`);
          });
        });
      });
    },

    actions: {
      deleteSelected(records) {
        this.deleteSelected(records);
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-record-table/buttons/filter/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "m5FBTZEH", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"showButton\"]]],null,{\"statements\":[[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn-danger btn-block\",[27,\"action\",[[22,0,[]],\"deleteSelected\",[23,[\"selectedItems\"]]],null]]],{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete Selected\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-record-table/buttons/filter/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-record-table/buttons/show/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: ''
  });
});
;define("mdeditor/pods/components/control/md-record-table/buttons/show/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "bjah6ug4", "block": "{\"symbols\":[],\"statements\":[[4,\"link-to\",[[27,\"concat\",[[23,[\"record\",\"constructor\",\"modelName\"]],\".show\"],null],[23,[\"record\",\"id\"]]],[[\"class\"],[\"btn btn-sm btn-info\"]],{\"statements\":[[0,\"  \"],[1,[27,\"fa-icon\",[\"eye\"],null],false],[0,\" Show\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-record-table/buttons/show/template.hbs" } });
});
;define("mdeditor/pods/components/control/md-record-table/buttons/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "mTCbn6qN", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"control/md-record-table/buttons/show\",null,[[\"record\"],[[23,[\"record\"]]]]],false],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-sm btn-success\"],[12,\"onclick\",[27,\"action\",[[22,0,[]],\"editItem\",[23,[\"record\"]]],null]],[11,\"type\",\"button\"],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit\\n\"],[10],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn-sm btn-danger\",[27,\"action\",[[22,0,[]],\"deleteItem\",[23,[\"record\"]],[23,[\"index\"]],[23,[\"isSelected\"]],[23,[\"clickOnRow\"]]],null]]],{\"statements\":[[0,\"  \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete\\n\"]],\"parameters\":[]},null],[1,[27,\"control/md-json-button\",null,[[\"class\",\"json\",\"title\"],[\"btn-sm btn-primary\",[23,[\"record\",\"cleanJson\"]],[23,[\"record\",\"title\"]]]]],false],[0,\"\\n\"],[1,[27,\"control/md-status\",null,[[\"model\",\"isBtn\",\"hideSlider\",\"showSlider\"],[[23,[\"record\"]],true,true,[27,\"action\",[[22,0,[]],\"showSlider\",[23,[\"record\"]]],null]]]],false],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-record-table/buttons/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-record-table/component', ['exports', 'mdeditor/pods/components/md-models-table/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * @module mdeditor
     * @submodule components-control
     */

    /**
     * Table used to display objects. Includes column to toggle selection for all
     * rows.
     *
     *```handlebars
     * \{{control/md-record-table
     *   data=model.data
     *   columns=model.columns
     *   select=callback
     * }}
     * ```
     *
     * @class md-select-table
     * @extends models-table
     */

    classNames: ['md-record-table'],

    /**
     * Property name used to identify selected records. Should begin with underscore.
     *
     * @property selectProperty
     * @type {String}
     * @default "_selected"
     * @static
     * @readOnly
     * @required
     */
    selectProperty: '_selected',

    /**
     * Array of table records
     *
     * @property data
     * @type {Array}
     * @default []
     * @required
     */

    /**
     * Array of column configs for the table.
     * See http://onechiporenko.github.io/ember-models-table
     *
     * ```javascript
     * [{
     *  propertyName: 'id',
     *  title: 'ID'
     * }, {
     *  title: '',
     *  template: 'components/leaflet-table/actions',
     *  className: 'text-center text-nowrap'
     * }]
     * ```
     *
     * @property dataColumns
     * @type {Array}
     * @required
     * @default []
     */
    dataColumns: Ember.A(),

    /**
     * Column configs for the checkbox column.
     * See http://onechiporenko.github.io/ember-models-table
     *
     *
     * @property checkColumns
     * @type {Object}
     * @required
     */
    checkColumn: Ember.computed(function () {

      return {
        component: 'components/md-models-table/components/check',
        disableFiltering: true,
        mayBeHidden: false,
        componentForSortCell: 'components/md-models-table/components/check-all',
        className: 'text-center'
      };
    }),

    /**
     * Column configs for the action column.
     * See http://onechiporenko.github.io/ember-models-table
     *
     *
     * @property actionsColumn
     * @type {Object}
     * @required
     */
    actionsColumn: Ember.computed('allActions', function () {
      let all = this.allActions;

      return {
        title: 'Actions',
        className: 'md-actions-column',
        component: all ? 'control/md-record-table/buttons' : 'control/md-record-table/buttons/show',
        disableFiltering: !all,
        componentForFilterCell: all ? 'control/md-record-table/buttons/filter' : null,
        showSlider: this.showSlider
      };
    }),

    columns: Ember.computed('dataColumns', 'checkColumn', function () {
      let chk = Ember.get(this, 'checkColumn');
      let action = Ember.get(this, 'actionsColumn');
      let cols = Ember.get(this, 'dataColumns');

      if (chk) {
        cols = [chk].concat(cols);
      }

      if (action) {
        cols.push(action);
      }

      return cols;
    }),

    filteringIgnoreCase: true,
    //rowTemplate: 'components/control/md-select-table/row',

    multipleSelect: true,
    selectedItems: Ember.computed({
      get() {
        let prop = this.selectProperty;

        return this.data.filterBy(prop).toArray();
      },
      set(k, v) {
        if (!Ember.isArray(v)) {
          (true && Ember.warn('`selectedItems` must be an array.', false, {
            id: '#emt-selectedItems-array'
          }));
        }
        return Ember.A(v);
      }
    }),

    /**
     * Callback on row selection.
     *
     * @method select
     * @param {Object} rec Selected record.
     * @param {Number} index Selected row index.
     * @param {Array} selected Selected records.
     * @return {Array} Selected records.
     */
    select(rec, index, selected) {
      return selected;
    },

    actions: {
      clickOnRow(idx, rec) {
        this._super(...arguments);

        let prop = this.selectProperty;
        let sel = Ember.get(this, 'selectedItems');

        rec.toggleProperty(prop);
        this.select(rec, idx, sel);
      },

      toggleAllSelection() {
        //this._super(...arguments);
        let selectedItems = Ember.get(this, 'selectedItems');
        let data = Ember.get(this, 'data');
        const allSelectedBefore = Ember.get(selectedItems, 'length') === Ember.get(data, 'length');
        Ember.get(this, 'selectedItems').clear();

        if (!allSelectedBefore) {
          Ember.get(this, 'selectedItems').pushObjects(data.toArray());
        }
        this.userInteractionObserver();

        let selected = Ember.get(this, 'selectedItems');
        let prop = this.selectProperty;
        //let data = get(this, 'data');

        if (Ember.get(selected, 'length')) {
          selected.setEach(prop, true);
        } else {
          data.setEach(prop, false);
        }
        this.select(null, null, selected);
      }
    }
  });
});
;define('mdeditor/pods/components/control/md-repo-link/component', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _config$APP = _environment.default.APP;
  const repository = _config$APP.repository,
        version = _config$APP.version;
  exports.default = Ember.Component.extend({
    tagName: 'a',
    attributeBindings: ['href', 'target'],
    classNames: ['md-fa-link'],

    /**
     * Application repository URL.
     *
     * @property repository
     * @type string
     */
    repository,

    /**
     * Link target, open in new window by default.
     *
     * @property target
     * @type string
     */
    target: '_blank',

    /**
     * Application version.
     *
     * @property version
     * @type string
     */
    version,

    /**
     * The commit hash reference.
     *
     * @property hash
     * @type {Ember.computed}
     * @return string
     */
    hash: Ember.computed('version', function () {
      let idx = this.version.indexOf('+') + 1;

      return version.substring(idx);
    }),

    /**
     * The url link
     *
     * @property href
     * @type {Ember.computed}
     * @return string
     */
    href: Ember.computed('repository', 'hash', function () {
      let repo = this.repository;
      let hash = this.hash;

      return `${repo}/tree/${hash}`;
    })
  });
});
;define("mdeditor/pods/components/control/md-repo-link/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "K5JzI/dD", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[24,1]],null,{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[1,[21,\"version\"],false],[1,[27,\"fa-icon\",[\"github\"],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-repo-link/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-scroll-spy/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * mdEditor Component that enables scrollspy
     *
     * @class md-scroll-spy
     * @module mdeditor
     * @submodule components-control
     * @constructor
     */

    profile: Ember.inject.service('profile'),
    router: Ember.inject.service('router'),
    classNames: ['md-scroll-spy'],

    /**
     * The height to offset from top of container.
     *
     * @property offset
     * @type {Number}
     * @default 110
     */
    offset: 110,

    /**
     * The initial scroll target when the component is inserted.
     *
     * @property scrollInit
     * @type {String}
     */

    /**
     * The method(action) used to set the scroll target. Should accept a string with
     * the target.
     *
     * @method setScrollTo
     * @param {String} scrollTo The scroll target
     */

    /**
     * Array of data objects for the navigation links.
     *
     * @property links
     * @type {Array}
     * @category computed
     * @requires refresh,profile.active
     */
    links: Ember.computed('refresh', 'profile.active', function () {
      let liquid = '';

      if (Ember.$('.liquid-spy').length) {
        liquid = Ember.$('.liquid-spy .liquid-child:first > .liquid-container').length ? '.liquid-spy .liquid-child:first > .liquid-container:last ' : '.liquid-spy ';
        liquid += '.liquid-child:first ';
      }

      let $targets = Ember.$(`${liquid}[data-spy]:visible`);
      let links = Ember.A();

      $targets.each(function (idx, link) {
        let $link = Ember.$(link);

        links.pushObject({
          id: $link.attr('id'),
          text: $link.attr('data-spy'),
          embedded: $link.hasClass('md-embedded')
        });
      });

      return links;
    }),

    /**
     * Click handler for nav links.
     *
     * @method clickLink
     * @param {Event} e The click event.
     */
    clickLink(e) {
      let setScrollTo = this.setScrollTo;
      let $target = Ember.$(e.currentTarget);
      let targetId = $target.attr('href');

      e.preventDefault();
      this.scroll(targetId);

      if (typeof setScrollTo === 'function') {
        setScrollTo($target.text().dasherize());
      }
    },

    /**
     * Setup the scrollspy on  the body element
     *
     * @method setupSpy
     */
    setupSpy() {
      Ember.$('body').scrollspy({
        target: '.md-scroll-spy',
        offset: this.offset
      });
    },

    /**
     * Call setupSpy and perform initial scroll.
     *
     * @method didInsertElement
     */
    didInsertElement() {
      this._super(...arguments);

      let data = Ember.$('body').data('bs.scrollspy');

      if (data) {
        Ember.set(data, 'options.offset', this.offset);
      }
      this.setupSpy();

      let init = this.scrollInit;

      if (!init || init === 'top') {
        this.scroll();
      } else {
        let link = this.links.find(link => {
          return init === link.text.dasherize();
        });

        if (link) {
          this.scroll('#' + link.id);
        } else {
          if (Ember.$('#' + init)) {
            this.scroll('#' + init);
          } else {
            this.scroll();
          }
        }
      }
    },

    didReceiveAttrs() {
      this._super(...arguments);

      if (!this.setScrollTo) {
        this.scroll();
      }
    },

    /**
     * Scrolls to the target.
     *
     * @method MyMethod
     * @param {String} id element id of target
     * @param {Boolean} hilite If true, set the spy nav link to active
     */
    scroll(id, hilite) {
      let $anchor = Ember.$(id);

      if ($anchor.length === 0) {
        Ember.$('html, body').scrollTop(0 - this.offset);
        return;
      }
      Ember.$('html, body').scrollTop($anchor.offset().top - this.offset);

      if (hilite) {
        Ember.$('[href="' + id + '"]').closest('li').addClass('active');
      }

      $anchor.removeClass('md-flash');
      void $anchor[0].offsetWidth;
      $anchor.addClass('md-flash');
    },

    actions: {
      clickLink(e) {
        this.clickLink(e);
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-scroll-spy/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "l/CQGWcA", "block": "{\"symbols\":[\"link\",\"&default\"],\"statements\":[[4,\"if\",[[23,[\"setScrollTo\"]]],null,{\"statements\":[[0,\"  \"],[7,\"ul\"],[11,\"class\",\"nav nav-pills nav-stacked\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"links\"]]],null,{\"statements\":[[0,\"      \"],[7,\"li\"],[12,\"class\",[27,\"if\",[[22,1,[\"embedded\"]],\"md-embedded\"],null]],[9],[0,\"\\n        \"],[7,\"a\"],[12,\"href\",[28,[\"#\",[22,1,[\"id\"]]]]],[12,\"onclick\",[27,\"action\",[[22,0,[]],\"clickLink\"],null]],[9],[1,[22,1,[\"text\"]],false],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"],[14,2],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-scroll-spy/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-select-table/component', ['exports', 'mdeditor/pods/components/md-models-table/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * @module mdeditor
     * @submodule components-control
     */

    /**
     * Table with action on row click. Used to select objects(records).
     *
     *```handlebars
     * \{{control/md-select-table
     *   data=model.data
     *   columns=model.columns
     *   select=callback
     * }}
     * ```
     *
     * @class md-select-table
     * @extends models-table
     */

    classNames: ['md-select-table'],

    /**
     * Array of table records
     *
     * @property data
     * @type {Array}
     * @default []
     * @required
     */

    /**
     * Array of column configs for the table.
     * See http://onechiporenko.github.io/ember-models-table
     *
     * ```javascript
     * [{
     *  propertyName: 'id',
     *  title: 'ID'
     * }, {
     *  title: '',
     *  template: 'components/leaflet-table/actions',
     *  className: 'text-center text-nowrap'
     * }]
     * ```
     *
     * @property columns
     * @type {Array}
     * @required
     * @default []
     */

    filteringIgnoreCase: true,

    /**
     * Callback on row selection.
     *
     * @method select
     * @param {Array} selected Selected items.
     * @return {Array}
     */
    select(selected) {
      return selected;
    },

    actions: {
      clickOnRow() {
        this._super(...arguments);

        let sel = this.selectedItems;

        this.select(sel);
      }
    }
  });
});
;define('mdeditor/pods/components/control/md-spinner/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: ['text-center', 'md-spinner']

    /**
    * The size of the FontAwesome icon.
    *
    * @property size
    * @type {String}
    * @default "false"
    * @optional
    */

    /**
    * The the text to show below the spinner.
    *
    * @property text
    * @type {String}
    * @optional
    */
  });
});
;define("mdeditor/pods/components/control/md-spinner/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "W8itnq0P", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"fa-icon\",[\"spinner\"],[[\"pulse\",\"size\"],[true,[23,[\"size\"]]]]],false],[0,\"\\n\"],[7,\"h3\"],[12,\"class\",[28,[\"md-spinner-text size-\",[21,\"size\"]]]],[9],[0,\"\\n    \"],[1,[21,\"text\"],false],[0,\"\\n\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-spinner/template.hbs" } });
});
;define('mdeditor/pods/components/control/md-spotlight/component', ['exports', 'ember-modal-dialog/components/modal-dialog'], function (exports, _modalDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const containerClassNames = ['md-spotlight-modal'];
  const overlayClassNames = ['md-modal-overlay'];

  exports.default = _modalDialog.default.extend({
    /**
     * Component that highlights a DOM element
     *
     * @class md-spotlight
     * @module mdeditor
     * @submodule components-control
     * @extends modal-dialog
     * @uses service-spotlight
     * @constructor
     */

    /**
     * The inected spotlight Service
     *
     * @property spotlight
     * @type {Service}
     */
    spotlight: Ember.inject.service(),

    containerClassNames: containerClassNames,
    overlayClassNames: overlayClassNames,
    overlayClass: 'md-spotlight-overlay fade-in-fast',
    targetAttachment: 'none',
    translucentOverlay: true,
    clickOutsideToClose: false,
    attachment: 'middle center',
    tetherTarget: 'viewport',

    // /**
    // * The id of the DOM element to spotlight. Uses the spotlight service "elementId"
    // * by default.
    // *
    // * @property spotlightTargetId
    // * @type {String}
    // * @default "computed.alias('spotlight.elementId')"
    // * @category computed
    // * @requires spotlight.elementId
    // * @required
    // */
    // spotlightTargetId: computed.alias('spotlight.elementId'),

    // willInsertElement() {
    //   $('.md-modal-overlay').click();
    // },
    // didInsertElement() {
    //   this._super(...arguments);
    //
    //   let id = this.get('spotlightTargetId');
    //
    //   if(isPresent(id)) {
    //     $('body').addClass('md-no-liquid');
    //     $('#' + id).addClass('md-spotlight-target');
    //   }
    //
    // },

    actions: {
      onClose() {
        this._super(...arguments);
        this.spotlight.close();
      },

      onClickOverlay() {
        this._super(...arguments);
        this.spotlight.close();
      }
    }
  });
});
;define('mdeditor/pods/components/control/md-status/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    slider: Ember.inject.service(),
    tagName: 'span',
    classNames: ['md-status'],

    /**
     * Model to display status for.
     *
     * @property model
     * @type {DS.model}
     * @required
     */

    isBtn: false,
    hideSlider: false,
    btnSize: 'sm',

    showSlider() {
      let slider = this.slider;

      slider.set('fromName', 'md-slider-error');
      slider.toggleSlider(true);
    },

    actions: {
      showSlider(evt) {
        this.showSlider(evt);
      },

      saveRecord(evt) {
        let model = this.model;

        evt.stopPropagation();
        model.save().then(() => {
          this.flashMessages.success(`Saved Record: ${model.get('title')}`);
        });
      }
    }
  });
});
;define("mdeditor/pods/components/control/md-status/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "5ZT3IU6+", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"model\",\"hasDirtyHash\"]]],null,{\"statements\":[[7,\"span\"],[11,\"role\",\"button\"],[11,\"class\",\"md-status-icon\"],[12,\"onclick\",[27,\"action\",[[22,0,[]],\"saveRecord\"],null]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"exclamation-circle\"],[[\"class\"],[[27,\"if\",[[23,[\"isBtn\"]],[27,\"concat\",[\"btn btn-danger btn-\",[23,[\"btnSize\"]]],null],\"md-error\"],null]]]],false],[0,\"\\n  \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"This record has been modified! Cick to save.\",\"top\",\"ember-tooltip md-tooltip danger\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"hasSchemaErrors\"]]],null,{\"statements\":[[7,\"span\"],[11,\"role\",\"button\"],[11,\"class\",\"md-status-icon\"],[12,\"onclick\",[27,\"action\",[[22,0,[]],\"showSlider\"],null]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],[[\"class\"],[[27,\"if\",[[23,[\"isBtn\"]],[27,\"concat\",[\"btn btn-warning btn-\",[23,[\"btnSize\"]]],null],\"md-warning\"],null]]]],false],[0,\"\\n  \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"This record has errors! Click to view.\",\"right\",\"ember-tooltip md-tooltip warning\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"unless\",[[23,[\"hideSlider\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-slider-error\",[27,\"hash\",null,[[\"title\",\"body\"],[[27,\"concat\",[\"Viewing errors for: \",[23,[\"model\",\"title\"]]],null],[27,\"component\",[\"control/md-errors\"],[[\"errors\"],[[23,[\"model\",\"schemaErrors\"]]]]]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/md-status/template.hbs" } });
});
;define('mdeditor/pods/components/control/subbar-citation/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    selectResource() {
      return this;
    }
  });
});
;define("mdeditor/pods/components/control/subbar-citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "l7RpVjPK", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"btn-group-vertical center-block\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"Citation Button Controls\"],[9],[0,\"\\n  \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-info btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[23,[\"selectResource\"]]]],[9],[0,\"\\n    \"],[1,[27,\"fa-icon\",[\"check\"],null],false],[0,\" Select a Record\\n    \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"tooltipClassName\",\"side\"],[\"Select a record to copy into the association.\\n        Note: This will only copy information.\",\"ember-tooltip md-tooltip primary\",\"left\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[4,\"link-to\",[[23,[\"route\"]]],[[\"class\"],[\"btn btn-lg btn-primary btn-block md-btn-responsive\"]],{\"statements\":[[0,\" \"],[1,[27,\"fa-icon\",[[23,[\"icon\"]]],null],false],[0,\" \"],[1,[21,\"text\"],false]],\"parameters\":[]},null],[0,\"\\n  \"],[14,1],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/subbar-citation/template.hbs" } });
});
;define('mdeditor/pods/components/control/subbar-extent/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    actionContext: Ember.computed('context', function () {
      return this.context();
    })
  });
});
;define("mdeditor/pods/components/control/subbar-extent/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "bLrXzjuc", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"hr\"],[9],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addExtent\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Geographic Extent\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/subbar-extent/template.hbs" } });
});
;define('mdeditor/pods/components/control/subbar-importcsv/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});
;define("mdeditor/pods/components/control/subbar-importcsv/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "W+Nf5E8Q", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"button\"],[11,\"class\",\"btn btn-lg btn-info btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"doImport\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"sign-in\"],null],false],[0,\" Do Import\"],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-danger btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancelImport\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Cancel Import\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/subbar-importcsv/template.hbs" } });
});
;define('mdeditor/pods/components/control/subbar-keywords/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    actionContext: Ember.computed('context', function () {
      return this.context();
    })
  });
});
;define("mdeditor/pods/components/control/subbar-keywords/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "vzKQ/Kmb", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"hr\"],[9],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addThesaurus\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Thesaurus\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/subbar-keywords/template.hbs" } });
});
;define('mdeditor/pods/components/control/subbar-link/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * mdEditor Component that renders a button used to navigate to a parent route
     * or perform an action on click.
     *
     * @class md-button-modal
     * @module mdeditor
     * @submodule components-control
     * @constructor
     */

    /**
     * The text to display
     *
     * @property text
     * @type {String}
     * @required
     */

    /**
     * The click text to display
     *
     * @property clickText
     * @type {String}
     * @required
     */

    /**
     * The button icon
     *
     * @property icon
     * @type {String}
     * @required
     */

    /**
     * The button type
     *
     * @property btnType
     * @type {String}
     * @default 'primary'
     */

    /**
     * The click button icon
     *
     * @property clickIcon
     * @type {String}
     * @required
     */

    /**
     * The click button type
     *
     * @property clickType
     * @type {String}
     * @default 'primary'
     */
    btnType: 'primary',

    /**
     * The route to link to.
     *
     * @property route
     * @type {String}
     */

    /**
     * The click action.
     *
     * @property click
     * @type {String}
     */

    clickTxt: Ember.computed.or('clickText', 'text'),
    clickButtonType: Ember.computed.or('clickType', 'btnType'),
    clickButtonIcon: Ember.computed.or('clickIcon', 'icon')
  });
});
;define("mdeditor/pods/components/control/subbar-link/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yAwdebGb", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"btn-group-vertical center-block\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"Action Button Controls\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"click\"]]],null,{\"statements\":[[0,\"  \"],[7,\"button\"],[11,\"name\",\"button\"],[12,\"class\",[28,[\"btn btn-lg \",[27,\"concat\",[\"btn-\",[23,[\"clickButtonType\"]]],null],\" btn-block md-btn-responsive\"]]],[12,\"click\",[21,\"click\"]],[12,\"disabled\",[21,\"disabled\"]],[11,\"type\",\"button\"],[9],[1,[27,\"fa-icon\",[[23,[\"clickButtonIcon\"]]],null],false],[0,\" \"],[1,[21,\"clickTxt\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"route\"]]],null,{\"statements\":[[0,\"    \"],[4,\"link-to\",[[23,[\"route\"]]],[[\"class\"],[[27,\"concat\",[\"btn btn-lg btn-\",[23,[\"btnType\"]],\" btn-block md-btn-responsive\"],null]]],{\"statements\":[[0,\" \"],[1,[27,\"fa-icon\",[[23,[\"icon\"]]],null],false],[0,\" \"],[1,[21,\"text\"],false]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n  \"],[14,1],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/subbar-link/template.hbs" } });
});
;define('mdeditor/pods/components/control/subbar-spatial/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    actionContext: Ember.computed('context', function () {
      return this.context();
    })
  });
});
;define("mdeditor/pods/components/control/subbar-spatial/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "4PK9+ioi", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"hr\"],[9],[10],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"btn-group-vertical center-block\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"Geographic Extent Button Controls\"],[9],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"zoomAll\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"search\"],null],false],[0,\" Zoom All\"],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-warning btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"uploadData\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[1,[27,\"fa-icon\",[\"upload\"],null],false],[0,\" Import Features\"],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-info btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"exportGeoJSON\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[1,[27,\"fa-icon\",[\"download\"],null],false],[0,\" Export Features\"],[10],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn-lg btn-danger btn-block md-btn-responsive\",[27,\"action\",[[22,0,[]],\"deleteAllFeatures\"],[[\"target\"],[[23,[\"actionContext\"]]]]]]],{\"statements\":[[0,\" \"],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Delete All\"]],\"parameters\":[]},null],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"hr\"],[9],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-primary btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"toList\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"list\"],null],false],[0,\" Back to List\\n\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/subbar-spatial/template.hbs" } });
});
;define('mdeditor/pods/components/control/subbar-thesaurus/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    actionContext: Ember.computed('context', function () {
      return this.context();
    })
  });
});
;define("mdeditor/pods/components/control/subbar-thesaurus/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "RE1hmF3q", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"hr\"],[9],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-primary btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"toList\"],[[\"target\"],[[23,[\"actionContext\"]]]]],[9],[0,\"\\n  \"],[1,[27,\"fa-icon\",[\"list\"],null],false],[0,\" Back to List\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/control/subbar-thesaurus/template.hbs" } });
});
;define('mdeditor/pods/components/ember-tooltip/component', ['exports', 'ember-tooltips/components/ember-tooltip'], function (exports, _emberTooltip) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberTooltip.default.extend({
    popperContainer: 'body'
  });
});
;define('mdeditor/pods/components/input/md-boolean/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({

    /**
     * Input, edit, display a boolean value
     *
     * @class md-boolean
     * @constructor
     */

    /**
     * Value of the input.
     * The edited value is returned
     *
     * @property value
     * @type Boolean
     * @default false
     */
    value: false,

    /**
     * Text to display next to the checkbox
     *
     * @property text
     * @type String
     */

    /**
     * The form label to display
     *
     * @property label
     * @type String
     * @default null
     */
    label: null

  });
});
;define("mdeditor/pods/components/input/md-boolean/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "D1JHOTgq", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"label\"]]],null,{\"statements\":[[0,\"    \"],[7,\"label\"],[9],[1,[21,\"label\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[7,\"div\"],[11,\"class\",\"checkbox md-boolean\"],[9],[0,\"\\n    \"],[7,\"label\"],[9],[0,\"\\n      \"],[1,[27,\"input\",null,[[\"type\",\"checked\"],[\"checkbox\",[23,[\"value\"]]]]],false],[0,\"\\n      \"],[7,\"span\"],[11,\"class\",\"md-boolean-text\"],[9],[1,[21,\"text\"],false],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[14,1],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-boolean/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-codelist-multi/component', ['exports', 'mdeditor/pods/components/input/md-codelist/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    classNames: ['md-codelist-multi'],
    /**
     * Specialized select list control for displaying and selecting options in
     * mdCodes codelists. Extends md-codelist. Allows selection of multiple
     * options.
     *
     * ```handlebars
     * \{{input/md-codelist-multi
     *   value=array
     *   create=true
     *   tooltip=true
     *   icon=false
     *   mdCodeName="codeName"
     *   closeOnSelect=false
     *   placeholder="Select or enter one or more"
     * }}
     * ```
     *
     * @class md-codelist-multi
     * @constructor
     * @extends md-codelist
     */

    /**
     * Initial value, returned value.
     * Accepts an Array of strings.
     *
     * Example: `["foo","bar"]`
     *
     * @property value
     * @type Array
     * @return Array
     * @required
     */

    /**
     * The multiple property for power-select-with-create
     *
     * @property multiple
     * @private
     * @type Boolean
     * @default true
     */
    multiple: true,

    /**
     * The component to render
     *
     * @property theComponent
     * @type Ember.computed
     * @return String
     */
    theComponent: Ember.computed('create', function () {
      return this.create ? 'power-select-multiple-with-create' : 'power-select-multiple';
    }),

    /**
     * Whether to close the selection list after a selection has been made.
     *
     * @property closeOnSelect
     * @type Boolean
     * @default false
     */
    closeOnSelect: false,

    /**
     * The string to display when no option is selected.
     *
     * @property placeholder
     * @type String
     * @default 'Select one or more options'
     */
    placeholder: 'Select one or more options',

    /**
     * The currently selected item in the codelist
     *
     * @property selectedItem
     * @type Ember.computed
     * @return PromiseObject
     */
    selectedItem: Ember.computed('value', function () {
      let value = this.value;
      let codelist = this.codelist;

      if (value) {
        return codelist.filter(item => {
          return value.includes(item['codeId']);
        });
      }
      return null;
    }),

    /**
     * If a value is provided by the user which is not in the codelist and 'create=true'
     * the new value will be added into the codelist array
     *
     * @property codelist
     * @type Ember.computed
     * @return Array
     */
    codelist: Ember.computed('value', 'filterId', 'mapped', function () {
      let codelist = this.mapped;
      let value = this.value;
      let create = this.create;
      let filter = this.filterId;

      if (value) {
        if (create) {
          value.forEach(val => {
            let found = codelist.findBy('codeId', val);
            if (found === undefined) {
              let newObject = this.createCode(val);
              codelist.pushObject(newObject);
            }
          });
        }
      }

      return codelist.rejectBy('codeId', filter);
    }),

    /**
     * Set the value on the select.
     *
     * @method setValue
     * @param {Array|Object} selected The value to set. Generally, an array of
     * selected objects, unless using the create option.
     */
    setValue(selected) {
      let sel;

      //power-select-with-create always sends a single object oncreate
      //we need to add that object to the selectedItem array
      if (this.create && !Ember.isArray(selected)) {
        sel = this.selectedItem.compact();
        sel.pushObject(selected);
      } else {
        sel = selected;
      }

      this.set('value', sel.mapBy('codeId'));
      this.change();
    }
  });
});
;define('mdeditor/pods/components/input/md-codelist/component', ['exports', 'mdeditor/pods/components/input/md-select/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * Specialized select list control for displaying and selecting
     * options in mdCodes codelists.
     * Access to codelists is provided by the 'codelist' service.
     * Descriptions of all codes (tooltips) are embedded within the codelists.
     *
     * ```handlebars
     * \{{input/md-codelist
     *   create=true
     *   required=false
     *   tooltip=fasle
     *   icon=false
     *   disabled=false
     *   allowClear=true
     *   showValidations=true
     *   mdCodeName="codeName"
     *   value=value
     *   path="path"
     *   model=model
     *   placeholder="Choose"
     * }}
     * ```
     *
     * @class md-codelist
     * @extends md-select
     * @constructor
     */

    init() {
      this._super(...arguments);

      //define cp using a dynamic dependent property
      Ember.defineProperty(this, 'mdCodelist', Ember.computed(`mdCodes.${this.mdCodeName}.codelist.[]`, function () {
        return this.mdCodes.get(this.mdCodeName).codelist
        //.uniqBy(codeName)
        .sortBy(this.namePath);
      }));
    },
    classNames: ['md-codelist'],
    layoutName: 'components/input/md-select',

    /**
     * The name of the mdCodes's codelist to use
     *
     * @property mdCodeName
     * @type String
     * @required
     */

    /**
     * Name of the attribute in the objectArray to be used for the
     * select list's option value.
     *
     * @property valuePath
     * @type String
     * @default codeName
     * @required
     */
    valuePath: 'codeName',
    /**
     * Name of the attribute in the objectArray to be used for the
     * select list's option name or display text.
     *
     * @property namePath
     * @type String
     * @default codename
     * @required
     */
    namePath: 'codeName',

    /**
     * Name of the attribute in the objectArray to be used for the
     * select list's tooltip.  If null, no tooltip will be
     * generated.
     *
     * @property tooltipPath
     * @type String
     * @default null
     */
    tooltipPath: 'description',

    /**
     * Initial value, returned value.
     *
     * @property value
     * @type String
     * @return String
     * @required
     */

    /**
     * Whether to render a button to clear the selection.
     *
     * @property allowClear
     * @type Boolean
     * @default true
     */
    allowClear: true,

    /**
     * The string to display when no option is selected.
     *
     * @property placeholder
     * @type String
     * @default 'Select one option'
     */
    placeholder: "Select one option",

    /**
     * Form label for select list
     *
     * @property label
     * @type String
     * @default null
     */
    label: null,

    mdCodes: Ember.inject.service('codelist'),

    /*
     * The currently selected item in the codelist
     *
     * @property selectedItem
     * @type Ember.computed
     * @return PromiseObject
     */
    selectedItem: Ember.computed('value', function () {
      let value = this.value;

      return this.codelist.find(item => {
        return item['codeId'] === value;
      });
    }),

    // mdCodelist: computed('mdCodeName', function() {
    //   return this.mdCodes
    //     .get(this.mdCodeName)
    //     .codelist
    //     //.uniqBy(codeName)
    //     .sortBy(this.namePath);
    // }),

    /**
     * mapped is a re-mapped array of code objects.
     * The initial codelist for 'mdCodeName' is provided by the 'codelist' service.
     *
     * @property mapped
     * @type {Array}
     * @category computed
     * @requires mdCodeName
     */
    mapped: Ember.computed('mdCodelist.[]', function () {
      let codeId = this.valuePath;
      let codeName = this.namePath;
      let tooltip = this.tooltipPath;
      let codelist = [];
      let icons = this.icons;
      let defaultIcon = this.defaultIcon;

      this.mdCodelist.forEach(function (item) {
        let newObject = {
          codeId: item[codeId],
          codeName: item[codeName],
          tooltip: item[tooltip],
          icon: icons.get(item[codeName]) || icons.get(defaultIcon)
        };
        codelist.pushObject(newObject);
      });

      return codelist;
    }),

    /**
     * If a value is provided by the user which is not in the codelist and 'create=true'
     * the new value will be added into the codelist array
     *
     * @property codelist
     * @type {Array}
     * @category computed
     * @requires value
     */
    codelist: Ember.computed('value', 'filterId', 'mapped', function () {
      let codelist = this.mapped;
      let value = this.value;
      let create = this.create;
      let filter = this.filterId;

      if (value) {
        if (create) {
          let found = codelist.findBy('codeId', value);
          if (found === undefined) {
            let newObject = this.createCode(value);
            codelist.pushObject(newObject);
          }
        }
      }

      return codelist.rejectBy('codeId', filter);
    }),

    /**
     * Creates a new codelist entry with a randomly generated code identifier.
     *
     * @method createCode
     * @param  {String} code The codeName
     * @return {Object}      Returns a new codelist object
     */
    createCode(code) {
      return {
        codeId: code,
        codeName: code,
        description: 'Undefined'
      };
    },

    /**
     * Set the value on the select.
     *
     * @method setValue
     * @param {Object} selected The object with the value(codeName) to set.
     */
    /*setValue(selected) {
      let valuePath = this.get('valuePath');
      let namePath = this.get('namePath');
       if(selected) {
        this.get('codelist')
      }
      let val = selected ? selected.codeName : null;
      this.set('value', val);
      this.change();
    },*/

    actions: {
      // do the binding to value
      setValue: function setValue(selected) {
        this.setValue(selected);
      },
      //handle the create
      create(selected) {
        let code = this.createCode(selected);

        this.setValue(code);
      }
    }

  });
});
;define('mdeditor/pods/components/input/md-date-range/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'start': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      disabled: Ember.computed.notEmpty('model.end'),
      ignoreBlank: true
    })],
    'end': [(0, _emberCpValidations.validator)('date', {
      onOrAfter: Ember.computed.alias('model.start'),
      isWarning: true
    }), (0, _emberCpValidations.validator)('presence', {
      presence: true,
      disabled: Ember.computed.notEmpty('model.start'),
      ignoreBlank: true
    })]
  });
  //import moment from 'moment';

  exports.default = Ember.Component.extend(Validations, {
    /**
     * Date range with start date and end date fields.
     *
     * ```handlebars
     * \{{input/md-date-range
     *   startDateTime
     *   endDateTime=false
     * }}
     * ```
     *
     * @class md-date-range
     * @extends Ember.Component
     * @constructor
     */

    classNameBindings: ['formInline'],

    /**
     * If true, render the fields inline
     *
     * @property startDateTime
     * @type {Boolean}
     * @default true
     */
    formInline: true,

    /**
     * The value for the start datetime
     *
     * @property startDateTime
     * @type {String|Date|moment}
     * @default moment().hour(0).second(0).minute(0)
     * @required
     */
    //startDateTime: moment().hour(0).second(0).minute(0),

    /**
     * The value for the end datetime
     *
     * @property endDateTime
     * @type {String|Date|moment}
     * @default moment().hour(0).second(0).minute(0)
     * @required
     */
    //  endDateTime: moment().hour(0).second(0).minute(0)
    start: Ember.computed('startDateTime', {
      get() {
        let dt = Ember.get(this, 'startDateTime');
        return dt === undefined ? null : dt;
      },
      set(key, value) {
        Ember.run.once(this, function () {
          Ember.set(this, 'startDateTime', value);
          return value;
        });
      }
    }),
    end: Ember.computed('endDateTime', {
      get() {
        let dt = Ember.get(this, 'endDateTime');
        return dt === undefined ? null : dt;
      },
      set(key, value) {
        Ember.run.once(this, function () {
          Ember.set(this, 'endDateTime', value);
          return value;
        });
      }
    })
  });
});
;define("mdeditor/pods/components/input/md-date-range/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3NuF3NB/", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"label\"],[11,\"class\",\"text-info required\"],[9],[0,\"Dates\"],[10],[0,\"\\n\"],[1,[27,\"input/md-datetime\",null,[[\"class\",\"valuePath\",\"model\",\"showValidations\",\"forceDateOutput\",\"label\",\"showClear\",\"format\",\"placeholder\"],[\"start\",\"start\",[22,0,[]],true,true,\"Start Date\",true,\"YYYY-MM-DD HH:mm:ss\",\"Enter start dateTime\"]]],false],[0,\"\\n\"],[1,[27,\"input/md-datetime\",null,[[\"class\",\"valuePath\",\"model\",\"showValidations\",\"forceDateOutput\",\"showClear\",\"label\",\"format\",\"placeholder\"],[\"end\",\"end\",[22,0,[]],true,true,true,\"End Date\",\"YYYY-MM-DD HH:mm:ss\",\"Enter end dateTime\"]]],false],[0,\"\\n\"],[1,[27,\"control/md-fiscalyear\",null,[[\"start\",\"end\",\"context\"],[\"start\",\"end\",[22,0,[]]]]],false],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-date-range/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-datetime/component', ['exports', 'moment'], function (exports, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({

    /**
     * Datetime control with dropdown calendar.
     * Based on Bootstrap datetime picker.
     *
     * @class md-datetime
     * @constructor
     */

    init() {
      this._super(...arguments);

      let model = this.model;
      let valuePath = this.valuePath;

      if (Ember.isBlank(model) !== Ember.isBlank(valuePath)) {
        (true && !(false) && Ember.assert(`You must supply both model and valuePath to ${this.toString()} or neither.`));
      }

      if (!Ember.isBlank(model)) {
        if (this.get(`model.${valuePath}`) === undefined) {
          Ember.debug(`model.${valuePath} is undefined in ${this.toString()}.`);
        }

        Ember.defineProperty(this, '_date', Ember.computed(`model.${valuePath}`, {
          get() {
            let val = Ember.get(this, `model.${valuePath}`);

            return val ? (0, _moment.default)(val, this.get('altFormat' || null)) : null;
          },
          set(key, value) {
            let formatted = this.formatValue(value, `model.${valuePath}`);

            return formatted;
          }
        }));

        Ember.defineProperty(this, 'validation', Ember.computed.alias(`model.validations.attrs.${valuePath}`).readOnly());

        Ember.defineProperty(this, 'required', Ember.computed('validation.options.presence.{presence,disabled}', function () {
          return this.get('validation.options.presence.presence') && !this.get('validation.options.presence.disabled');
        }).readOnly());

        Ember.defineProperty(this, 'notValidating', Ember.computed.not('validation.isValidating').readOnly());

        Ember.defineProperty(this, 'hasContent', Ember.computed.notEmpty('date').readOnly());

        Ember.defineProperty(this, 'hasWarnings', Ember.computed.notEmpty('validation.warnings').readOnly());

        Ember.defineProperty(this, 'isValid', Ember.computed.and('hasContent', 'validation.isTruelyValid').readOnly());

        Ember.defineProperty(this, 'shouldDisplayValidations', Ember.computed.or('showValidations', 'didValidate', 'hasContent').readOnly());

        Ember.defineProperty(this, 'showErrorClass', Ember.computed.and('notValidating', 'showErrorMessage', 'hasContent', 'validation').readOnly());

        Ember.defineProperty(this, 'showErrorMessage', Ember.computed.and('shouldDisplayValidations', 'validation.isInvalid').readOnly());

        Ember.defineProperty(this, 'showWarningMessage', Ember.computed.and('shouldDisplayValidations', 'hasWarnings', 'isValid').readOnly());
      } else {
        Ember.defineProperty(this, '_date', Ember.computed('date', {
          get() {
            let val = this.date;

            return val ? (0, _moment.default)(val, this.get('altFormat' || null)) : null;
          },
          set(key, value) {
            let formatted = this.formatValue(value, 'date');

            return formatted;
          }
        }));
      }
    },
    classNames: ['md-datetime', 'md-input-input'],
    classNameBindings: ['label:form-group', 'required'],

    /**
     * Datetime string passed in, edited, and returned.
     *
     * @property date
     * @type String
     * @default null
     * @return String
     */
    date: null,

    /**
     * Format of date string for property 'date'.
     *
     * @property format
     * @type String
     * @default 'YYYY-MM-DD'
     */
    format: 'YYYY-MM-DD',

    /**
     * The string to display when no datetime is selected.
     *
     * @property placeholder
     * @type String
     * @default 'Enter date or datetime'
     */
    placeholder: "Enter date or datetime",

    /**
     * Form label for datetime input.
     *
     * @property label
     * @type String
     * @default null
     */
    label: null,

    /**
     * On show, will set the picker to the current date/time
     *
     * @property useCurrent
     * @type Boolean
     * @default 'day'
     */
    useCurrent: 'day',

    /**
     * Show the Today button in the icon toolbar.
     *
     * @property showTodayButton
     * @type Boolean
     * @default true
     */
    showTodayButton: true,

    /**
     * Show the clear button in the icon toolbar.
     *
     * @property showClear
     * @type Boolean
     * @default true
     */
    showClear: true,

    formatValue(value, target) {
      if (Ember.isBlank(value)) {
        Ember.run.once(this, function () {
          Ember.set(this, target, null);
        });

        return value;
      }

      let mom = (0, _moment.default)(value);

      if (this.altFormat) {
        let alt = mom.format(this.altFormat);

        Ember.run.once(this, function () {
          Ember.set(this, target, alt);
        });
        return alt;
      }
      //utc.add(utc.utcOffset(), 'minutes');

      if (mom && mom.toISOString() !== this.get(target)) {

        Ember.run.once(this, function () {
          Ember.set(this, target, mom.toISOString());
        });
      }

      return mom;
    },

    /**
     * Icons to be used by the datetime picker and calendar.
     * Icons can be set for time, date, up, down, previous, next, clear,
     * and close.
     * The default icons are chosen from Font Awesome icons
     *
     * @property calendarIcons
     * @type Object
     * @default 'calendarIcons'
     */
    calendarIcons: Ember.computed(function () {
      return {
        time: "fa fa-clock-o",
        date: "fa fa-calendar",
        up: "fa fa-chevron-up",
        down: "fa fa-chevron-down",
        previous: "fa fa-angle-double-left",
        next: "fa fa-angle-double-right",
        close: "fa fa-times",
        clear: "fa fa-trash"
      };
    })
  });
});
;define("mdeditor/pods/components/input/md-datetime/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "03guMcFj", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"label\"]]],null,{\"statements\":[[0,\"  \"],[7,\"label\"],[9],[1,[21,\"label\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[7,\"div\"],[11,\"class\",\"md-input-input\"],[9],[0,\"\\n  \"],[1,[27,\"bs-datetimepicker\",null,[[\"date\",\"format\",\"extraFormats\",\"dateIcon\",\"icons\",\"placeholder\",\"showClear\",\"useCurrent\",\"textFieldRequired\",\"showTodayButton\",\"change\"],[[23,[\"_date\"]],[23,[\"format\"]],[23,[\"extraFormats\"]],\"fa fa-calendar\",[23,[\"calendarIcons\"]],[23,[\"placeholder\"]],[23,[\"showClear\"]],[23,[\"useCurrent\"]],[23,[\"required\"]],[23,[\"showTodayButton\"]],[23,[\"change\"]]]]],false],[0,\"\\n  \"],[7,\"span\"],[11,\"class\",\"md-inputgroup-error\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"showErrorMessage\"]]],null,{\"statements\":[[0,\"      \"],[7,\"span\"],[11,\"class\",\"md-error\"],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"exclamation-circle\"],null],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip danger\"]],{\"statements\":[[0,\"            \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],[23,[\"valuePath\"]]],null],\"message\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"showWarningMessage\"]]],null,{\"statements\":[[0,\"      \"],[7,\"span\"],[11,\"class\",\"md-warning\"],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip warning\"]],{\"statements\":[[0,\"        \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],[23,[\"valuePath\"]]],null],\"warningMessage\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-datetime/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-input-confirm/component', ['exports', 'mdeditor/pods/components/input/md-input/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * Input, edit, display a single item
     *
     * @class md-input-confirm
     * @extends md-input
     * @constructor
     */

    classNameBindings: ['required'],

    disabled: true,

    isDisabled: Ember.computed('disabled', function () {
      return this.disabled;
    }),

    actions: {
      allowEdit() {
        this.set('disabled', false);
        this.element.querySelector('input').focus();
      },
      inputBlur() {
        this.set('disabled', true);
      }
    }
  });
});
;define("mdeditor/pods/components/input/md-input-confirm/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "wi5KDfC4", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"label\"]]],null,{\"statements\":[[7,\"label\"],[9],[1,[21,\"label\"],false],[10]],\"parameters\":[]},null],[0,\"\\n\"],[7,\"div\"],[12,\"class\",[27,\"if\",[[23,[\"disabled\"]],\"input-group\"],null]],[9],[0,\"\\n\\n\"],[1,[27,\"input\",[[27,\"-input-type\",[[23,[\"type\"]]],null]],[[\"value\",\"placeholder\",\"required\",\"type\",\"maxlength\",\"class\",\"disabled\",\"blur\"],[[23,[\"value\"]],[23,[\"placeholder\"]],[23,[\"required\"]],[23,[\"type\"]],[23,[\"maxlength\"]],[23,[\"inputClass\"]],[23,[\"isDisabled\"]],[27,\"action\",[[22,0,[]],\"inputBlur\"],null]]]],false],[0,\"\\n\"],[4,\"if\",[[23,[\"disabled\"]]],null,{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"input-group-btn\"],[9],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn-warning\",[27,\"action\",[[22,0,[]],\"allowEdit\"],null]]],{\"statements\":[[0,\"            \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit\\n\"],[4,\"if\",[[23,[\"confirmTip\"]]],null,{\"statements\":[[4,\"ember-tooltip\",null,null,{\"statements\":[[0,\"                \"],[1,[21,\"confirmTip\"],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-input-confirm/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-input/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * Input, edit, display a single item
     *
     * ```handlebars
     * \{{input/md-input
     *    value=val
     *    model=null
     *    valuePath=null
     *    label="Name"
     *    placeholder="Enter name."
     *    required=false
     *  }}
     * ```
     *
     * @class md-input
     * @constructor
     */

    init() {
      this._super(...arguments);

      let model = this.model;
      let valuePath = this.valuePath;

      if (Ember.isBlank(model) !== Ember.isBlank(valuePath)) {
        (true && !(false) && Ember.assert(`You must supply both model and valuePath to ${this.toString()} or neither.`));
      }

      if (!Ember.isBlank(model)) {
        if (this.get(`model.${valuePath}`) === undefined) {
          Ember.debug(`model.${valuePath} is undefined in ${this.toString()}.`);

          //Ember.run.once(()=>model.set(valuePath, ""));
        }

        if (this.type === 'number') {
          let attribute = `model.${valuePath}`;

          Ember.defineProperty(this, 'value', Ember.computed(attribute, {
            get() {
              let val = this.get(attribute);

              return val ? val.toString() : '';
            },

            set(key, value) {
              let parse = this.step ? parseFloat : parseInt;

              this.set(attribute, parse(value, 10));

              return value;
            }
          }));
        } else {
          Ember.defineProperty(this, 'value', Ember.computed.alias(`model.${valuePath}`));
        }

        Ember.defineProperty(this, 'validation', Ember.computed.alias(`model.validations.attrs.${valuePath}`).readOnly());

        Ember.defineProperty(this, 'required', Ember.computed('validation.options.presence{presence,disabled}', 'disabled', function () {
          return !this.disabled && this.get('validation.options.presence.presence') && !this.get('validation.options.presence.disabled');
        }).readOnly());

        Ember.defineProperty(this, 'notValidating', Ember.computed.not('validation.isValidating').readOnly());

        Ember.defineProperty(this, 'hasContent', Ember.computed.notEmpty('value').readOnly());

        Ember.defineProperty(this, 'hasWarnings', Ember.computed.notEmpty('validation.warnings').readOnly());

        Ember.defineProperty(this, 'isValid', Ember.computed.and('hasContent', 'validation.isTruelyValid').readOnly());

        Ember.defineProperty(this, 'shouldDisplayValidations', Ember.computed.or('showValidations', 'didValidate', 'hasContent').readOnly());

        Ember.defineProperty(this, 'showErrorClass', Ember.computed.and('notValidating', 'showErrorMessage', 'hasContent', 'validation').readOnly());

        Ember.defineProperty(this, 'showErrorMessage', Ember.computed.and('shouldDisplayValidations', 'validation.isInvalid').readOnly());

        Ember.defineProperty(this, 'showWarningMessage', Ember.computed.and('shouldDisplayValidations', 'hasWarnings', 'isValid').readOnly());
      }
    },

    classNames: ['md-input'],
    classNameBindings: ['label:form-group', 'required'],
    attributeBindings: ['data-spy'],

    /**
     * Value of the input.
     * Value sets the initial value and returns the edited result.
     * This property is overridden if valuePath and model are supplied.
     *
     * @property value
     * @type String
     * @required
     */

    /**
     * Type of data represented by the value string.
     * HTML5 types may be specified ('text', 'number', etc.)
     *
     * @property type
     * @type String
     * @default text
     */
    type: 'text',

    /**
     * The form label to display
     *
     * @property label
     * @type String
     * @default null
     */
    label: null,

    /**
     * Whether a value is required
     *
     * @property required
     * @type Boolean
     * @default false
     */
    required: false,

    /**
     * Whether a input is disabled
     *
     * @property disabled
     * @type Boolean
     * @default false
     */
    disabled: false,

    /**
     * Maximum number of characters for each input string.
     * If no maxlength is specified the length will not be restricted
     *
     * @property maxlength
     * @type Number
     * @default null
     */
    maxlength: null,

    /**
     * Text displayed in empty inputs
     *
     * @property placeholder
     * @type String
     * @default null
     */
    placeholder: null,

    /**
     * CSS class to set on the input control
     *
     * @property class
     * @type String
     * @default 'form-control'
     */
    inputClass: 'form-control',

    /**
     * The model or object containing the input value. Only needed for validation.
     *
     * @property model
     * @type {Object}
     * @default undefined
     * @readOnly
     */

    /**
     * The path of the input value. Only needed for validation.
     *
     * @property valuePath
     * @type {String}
     * @default ''
     * @readOnly
     */
    valuePath: ''

  });
});
;define("mdeditor/pods/components/input/md-input/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Cv4dD0+l", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"label\"]]],null,{\"statements\":[[7,\"label\"],[9],[1,[21,\"label\"],false],[10]],\"parameters\":[]},null],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"md-input-input\"],[9],[0,\"\\n  \"],[1,[27,\"input\",[[27,\"-input-type\",[[23,[\"type\"]]],null]],[[\"value\",\"placeholder\",\"required\",\"type\",\"step\",\"maxlength\",\"class\",\"disabled\",\"change\"],[[23,[\"value\"]],[23,[\"placeholder\"]],[23,[\"required\"]],[23,[\"type\"]],[23,[\"step\"]],[23,[\"maxlength\"]],[23,[\"inputClass\"]],[23,[\"disabled\"]],[23,[\"change\"]]]]],false],[0,\"\\n\\n  \"],[7,\"span\"],[11,\"class\",\"md-input-error\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"showErrorMessage\"]]],null,{\"statements\":[[0,\"      \"],[7,\"span\"],[11,\"class\",\"md-error\"],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"exclamation-circle\"],null],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip danger\"]],{\"statements\":[[0,\"            \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],[23,[\"valuePath\"]]],null],\"message\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"showWarningMessage\"]]],null,{\"statements\":[[0,\"      \"],[7,\"span\"],[11,\"class\",\"md-warning\"],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip warning\"]],{\"statements\":[[0,\"        \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],[23,[\"valuePath\"]]],null],\"warningMessage\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-input/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-markdown-area/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * Component for markdown enabled text-area.
     *
     * @class md-markdown-editor
     * @constructor
     * @example
     *   {{md-markdown-editor value=value options=options}}
     */

    /**
     * Fix fullscreen render inside of liquid-outlet..
     *
     * @event didInsertElement
     * @public
     */
    didInsertElement() {
      this._super(...arguments);

      let editor = this.editor;
      let $el = this.$();

      const oldEditorSetOption = editor.codemirror.setOption;

      editor.codemirror.setOption = function (option, value) {
        oldEditorSetOption.apply(this, arguments);

        if (option === 'fullScreen') {
          $el.parents('.liquid-child,.liquid-container, .md-card').toggleClass('full-screen', value);
        }
      };
    },

    /**
     * Make sure the value is not null or undefined, for Simple MDE.
     *
     * @event didReceiveAttrs
     * @public
     */
    didReceiveAttrs() {
      this._super(...arguments);

      Ember.run.once(this, () => {
        if (Ember.isNone(Ember.get(this, 'value'))) {
          Ember.set(this, 'value', '');
        }
      });
    },

    classNames: ['md-markdown-editor'],
    classNameBindings: ['label:form-group', 'required', 'errorClass'],
    attributeBindings: ['data-spy'],

    /**
     * The current simplemde editor instance.
     *
     * @property editor
     * @type {Object}
     * @private
     */

    /**
     * Bound textarea value.
     *
     * @property value
     * @type {String}
     */

    /**
     * If true, the "row" the editor will be initally collapse.
     *
     * @property collapsed
     * @type {Boolean}
     * @default undefined
     */

    /**
     * If true, the collapse control will be added to the label header.
     *
     * @property collapsible
     * @type {Boolean}
     * @default true
     */
    collapsible: true,

    /**
     * Placeholder string.
     *
     * @property placeholder
     * @type {String}
     * @default Enter text, Markdown is supported.
     */
    placeholder: 'Enter text, Markdown is supported.',

    /**
     * Options for markdown editor
     *
     * @property options
     * @type {Object}
     * @category computed
     * @requires placeholder
     */
    options: Ember.computed('placeholder', function () {
      return {
        placeholder: Ember.get(this, 'placeholder'),
        status: [{
          className: 'length',
          defaultValue: el => {
            el.innerHTML = `<span class="length md-${Ember.get(this, 'errorClass')}">length: ${Ember.get(this, 'length')}</span>`;
          },
          onUpdate: el => {
            el.innerHTML = `<span class="length md-${Ember.get(this, 'errorClass')}">length: ${Ember.get(this, 'length')}</span>`;
          }
        }, 'lines', 'words', 'cursor']
      };
    }),

    // fullscreen: Ember.observer('editor.codemirror.options.fullScreen', function(){
    //   console.info(this.get('editor.codemirror.options.fullScreen'));
    // }),

    /**
     * Returns the length of hte value string, 0 if falsy.
     *
     * @property length
     * @type {Number}
     * @category computed
     * @requires value
     */
    length: Ember.computed('value', function () {
      return Ember.get(this, 'value') ? Ember.get(this, 'value').length : 0;
    }).readOnly(),

    /**
     * Returns string indicating error or warning based on maxlength.
     *
     * @property errorClass
     * @type {String}
     * @category computed
     * @requires value|maxlength
     */
    errorClass: Ember.computed('value', 'maxlength', function () {
      let length = Ember.get(this, 'length');
      let max = Ember.get(this, 'maxlength');

      if (Ember.get(this, 'required') && length < 1) {
        return 'error';
      }

      if (!max || length <= max - 25) {
        return '';
      }

      if (length > max) {
        return 'error';
      } else if (length + 25 > max) {
        return 'warning';
      }
    })
  });
});
;define("mdeditor/pods/components/input/md-markdown-area/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "lKP3mMId", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"label\"]]],null,{\"statements\":[[0,\"    \"],[7,\"label\"],[11,\"class\",\"md-card-chevron\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"collapsible\"]]],null,{\"statements\":[[0,\"        \"],[7,\"a\"],[11,\"role\",\"button\"],[11,\"data-toggle\",\"collapse\"],[12,\"href\",[28,[\"#\",[27,\"concat\",[\"md-\",[23,[\"elementId\"]]],null]]]],[12,\"aria-expanded\",[27,\"if\",[[23,[\"collapsed\"]],\"false\",\"true\"],null]],[12,\"class\",[27,\"if\",[[23,[\"collapsed\"]],\"collapsed\"],null]],[12,\"aria-controls\",[27,\"concat\",[\"md-\",[23,[\"elementId\"]]],null]],[9],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"fa\"],[9],[10],[0,\"\\n        \"],[1,[21,\"label\"],false],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[21,\"label\"],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[7,\"div\"],[12,\"id\",[27,\"concat\",[\"md-\",[23,[\"elementId\"]]],null]],[12,\"class\",[27,\"if\",[[23,[\"collapsed\"]],\"collapse\",\"in\"],null]],[9],[0,\"\\n  \"],[1,[27,\"simple-mde\",null,[[\"value\",\"options\",\"maxlength\",\"spellcheck\",\"disabled\",\"change\",\"currentEditor\"],[[23,[\"value\"]],[23,[\"options\"]],[23,[\"maxlength\"]],true,[23,[\"disabled\"]],[27,\"if\",[[23,[\"change\"]],[23,[\"change\"]],[27,\"action\",[[22,0,[]],[27,\"mut\",[[23,[\"value\"]]],null]],null]],null],[23,[\"editor\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-markdown-area/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-month/component', ['exports', 'mdeditor/pods/components/input/md-datetime/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    layoutName: 'components/input/md-datetime',
    format: 'MMMM',
    extraFormats: Ember.computed(function () {
      return ['MM', 'M', 'MMM'];
    }),
    showClear: false,
    useCurrent: false,
    showTodayButton: false
  });
});
;define('mdeditor/pods/components/input/md-select-contact/component', ['exports', 'mdeditor/pods/components/input/md-codelist/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * Specialized select list control for displaying and selecting
     * contacts.
     *
     * @class md-select-contacts
     * @constructor
     * @extends md-select
     */

    /**
     * The contacts service
     *
     * @property contacts
     * @type {Ember.Service}
     * @readOnly
     */
    contacts: Ember.inject.service(),

    /**
     * The default CSS classnames
     *
     * @property classNames
     * @type {Array}
     * @default ['md-select-contact']
     * @readOnly
     */
    classNames: ['md-select-contact'],

    /**
     * The default codelist name. Should not be overridden.
     *
     * @property classNames
     * @protected
     * @type {String}
     * @default 'contacts'
     * @readOnly
     */
    mdCodeName: 'contacts',

    /**
     * The property that holds the select item value. Should not be overridden.
     *
     * @property valuePath
     * @protected
     * @type {String}
     * @default 'valuePath'
     * @readOnly
     */
    valuePath: 'contactId',

    /**
     * The property that holds the select item text. Should not be overridden.
     *
     * @property namePath
     * @protected
     * @type {String}
     * @default 'namePath'
     * @readOnly
     */
    namePath: 'title',

    /**
     * The contact type to display in the list. Choices are `organizations` or
     * `individuals` or 'contacts'. Passing any other value will default to
     * 'contacts'.
     *
     * @property contactType
     * @protected
     * @type {String}
     * @default 'contacts'
     */
    contactType: 'contacts',

    /**
     * The contact list mapped from the store to a codelist.
     *
     * @property mapped
     * @type {Array}
     * @category computed
     * @requires contacts.[]
     */
    mapped: Ember.computed('contacts.mapped.[]', 'contactType', function () {
      let type = this.contactType;

      if (!['individuals', 'organizations'].includes(type)) {
        return this.contacts.get('contactsCodes');
      }

      return this.contacts.get(type + 'Codes');
    })
  });
});
;define('mdeditor/pods/components/input/md-select-contacts/component', ['exports', 'mdeditor/pods/components/input/md-codelist-multi/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * Specialized select list control for displaying and selecting
     * contacts.
     *
     * @class md-select-contacts
     * @constructor
     * @extends md-select
     */

    /**
     * The contacts service
     *
     * @property contacts
     * @type {Ember.Service}
     * @readOnly
     */
    contacts: Ember.inject.service(),

    /**
     * The default CSS classnames
     *
     * @property classNames
     * @type {Array}
     * @default ['md-select-organization']
     * @readOnly
     */
    classNames: ['md-select-contact'],

    /**
     * The default codelist name. Should not be overridden.
     *
     * @property classNames
     * @protected
     * @type {String}
     * @default 'contacts'
     * @readOnly
     */
    mdCodeName: 'contacts',

    /**
     * The property that holds the select item value. Should not be overridden.
     *
     * @property valuePath
     * @protected
     * @type {String}
     * @default 'valuePath'
     * @readOnly
     */
    valuePath: 'contactId',

    /**
     * The property that holds the select item text. Should not be overridden.
     *
     * @property namePath
     * @protected
     * @type {String}
     * @default 'namePath'
     * @readOnly
     */
    namePath: 'title',

    /**
     * The contact type to display in the list. Choices are `organizations` or
     * `individuals` or 'contacts'. Passing any other value will default to
     * 'contacts'.
     *
     * @property contactType
     * @protected
     * @type {String}
     * @default 'contacts'
     */
    contactType: 'contacts',

    /**
     * The contact list mapped from the store to a codelist.
     *
     * @property mapped
     * @type {Array}
     * @category computed
     * @requires contacts.[]
     */
    mapped: Ember.computed('contacts.mapped.[]', 'contactType', function () {
      let type = this.contactType;

      if (!['individuals', 'organizations'].includes(type)) {
        return this.contacts.get('contactsCodes');
      }

      return this.contacts.get(type + 'Codes');
    })
  });
});
;define('mdeditor/pods/components/input/md-select-profile/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    profile: Ember.inject.service('custom-profile'),

    updateProfile(profile) {
      this.profile.set('active', profile);
      this.record.save();
    },
    actions: {
      /**
       * Update the record profile
       *
       * @name   updateProfile
       * @param  {String} profile The new profile.
       */
      updateProfile(profile) {
        this.updateProfile(profile);
      }
    }
  });
});
;define("mdeditor/pods/components/input/md-select-profile/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "V8hcq6om", "block": "{\"symbols\":[],\"statements\":[[7,\"form\"],[11,\"class\",\"navbar-form form-inline\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"form-group-sm\"],[9],[0,\"\\n    \"],[7,\"label\"],[11,\"class\",\"navbar-text control-label\"],[9],[0,\"Profile\"],[10],[0,\"\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"change\",\"class\",\"create\",\"tooltip\",\"icon\",\"allowClear\",\"mdCodeName\",\"valuePath\",\"value\",\"placeholder\",\"searchEnabled\",\"label\"],[[27,\"action\",[[22,0,[]],\"updateProfile\",[23,[\"value\"]]],null],\"select-profile\",false,true,true,false,\"profile\",\"code\",[23,[\"value\"]],\"Choose profile\",false,false]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-select-profile/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-select-thesaurus/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({

    /**
     * A select list control for displaying and selecting thesaurus entries from
     * the keyword service.
     *
     * @class md-select-thesaurus
     * @constructor
     */

    keyword: Ember.inject.service(),

    /**
     * This method is called after the thesaurus selection is updated. It should be
     * overridden.
     *
     * @method selectThesaurus
     * @param  {Object} selected  The selected thesaurus from the keyword service
     * @param  {Object} thesaurus The thesaurus for the keyword record
     */
    selectThesaurus() {},

    thesaurusList: Ember.computed('keyword.thesaurus.[]', function () {
      let list = this.keyword.thesaurus.map(k => {
        return Ember.Object.create({
          id: k.citation.identifier[0].identifier,
          label: k.label || k.citation.title || 'Keywords'
        });
      });

      list.unshift(Ember.Object.create({
        id: 'custom',
        label: 'Custom Thesaurus'
      }));
      return list;
    }),
    actions: {
      update(id, thesaurus) {
        let selected = this.keyword.findById(id);

        this.selectThesaurus(selected, thesaurus);
      }
    }
  });
});
;define("mdeditor/pods/components/input/md-select-thesaurus/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "i5rEPp8W", "block": "{\"symbols\":[],\"statements\":[[0,\" \"],[1,[27,\"input/md-select\",null,[[\"placeholder\",\"disabled\",\"objectArray\",\"valuePath\",\"namePath\",\"value\",\"change\"],[\"Pick a thesaurus\",[23,[\"disabled\"]],[23,[\"thesaurusList\"]],\"id\",\"label\",[23,[\"value\"]],[27,\"action\",[[22,0,[]],\"update\",[23,[\"value\"]],[23,[\"thesaurus\"]]],null]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-select-thesaurus/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-select/component', ['exports', 'ember-data'], function (exports, _emberData) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * A select list control for displaying and selecting options
     * provided in an array or promise array.
     *
     * ```handlebars
     * \{{input/md-select
     *  label="Measure Type"
     *  showValidations=true
     *  model=this
     *  path="measureType"
     *  valuePath="value"
     *  namePath="name"
     *  objectArray=typeOptions
     *  tooltip=true
     *  tooltipPath="tip"
     *  searchEnabled=false
     *  disabled=measureDisabled
     *  placeholder="The type of measurement."
     *  profilePath=(concat profilePath ".measure.type")
     * }}
     * ```
     *
     * @class md-select
     * @constructor
     */

    init() {
      this._super(...arguments);

      let model = this.model;
      let path = this.path;

      if (Ember.isNone(model) !== Ember.isNone(path)) {
        (true && !(false) && Ember.assert(`You must supply both model and path to ${this.toString()} or neither.`));
      }

      if (!Ember.isBlank(model)) {
        if (this.get(`model.${path}`) === undefined) {
          Ember.debug(`model.${path} is undefined in ${this.toString()}.`);
          //Ember.run.once(()=>model.set(path, ""));
        }

        Ember.defineProperty(this, 'value', Ember.computed.alias(`model.${path}`));

        Ember.defineProperty(this, 'validation', Ember.computed.alias(`model.validations.attrs.${path}`).readOnly());

        Ember.defineProperty(this, 'required', Ember.computed('validation.options.presence.{presence,disabled}', 'disabled', function () {
          return !this.disabled && this.get('validation.options.presence.presence') && !this.get('validation.options.presence.disabled');
        }).readOnly());

        Ember.defineProperty(this, 'notValidating', Ember.computed.not('validation.isValidating').readOnly());

        Ember.defineProperty(this, 'hasContent', Ember.computed.notEmpty('value').readOnly());

        Ember.defineProperty(this, 'hasWarnings', Ember.computed.notEmpty('validation.warnings').readOnly());

        Ember.defineProperty(this, 'isValid', Ember.computed.and('hasContent', 'validation.isTruelyValid').readOnly());

        Ember.defineProperty(this, 'shouldDisplayValidations', Ember.computed.or('showValidations', 'didValidate', 'hasContent').readOnly());

        Ember.defineProperty(this, 'showErrorClass', Ember.computed.and('notValidating', 'showErrorMessage', 'hasContent', 'validation').readOnly());

        Ember.defineProperty(this, 'showErrorMessage', Ember.computed.and('shouldDisplayValidations', 'validation.isInvalid').readOnly());

        Ember.defineProperty(this, 'showWarningMessage', Ember.computed.and('shouldDisplayValidations', 'hasWarnings', 'isValid').readOnly());
      }
    },

    classNames: ['md-select'],
    classNameBindings: ['formGroup', 'required'],
    attributeBindings: ['data-spy'],
    formGroup: Ember.computed.notEmpty('label'),
    icons: Ember.inject.service('icon'),

    /**
     * An array or promise array containing the options for the
     * select list.
     * At a minimum the array elements should provide attributes for the
     * name value pairs displayed as select list options.
     * Tooltips may also be included.
     * Other attributes in the array elements will be ignored.
     *
     * ```javascript
     * {
     *   name: 'displayed',
     *   value: 'option',
     *   type: 'xtra info',
     *   tip: 'tooltip'
     * }
     * ```
     *
     * @property objectArray
     * @type Array
     * @required
     */

    /**
     * The initial value of the select. Type must match the type of the attribute
     * identified by the path option.
     *
     * @property value
     * @type Any
     * @required
     */
    value: null,

    /**
     * Path in the model to be used for the select list's option value. Both
     * `model` and `path` must be supplied together.
     *
     * @property path
     * @type String
     */

    /**
     * The model to be used to compute the value alias, generally used for
     * validations. Both `model` and `path` must be supplied together.
     *
     * @property model
     * @type String
     */

    /**
     * Name of the attribute in the objectArray to be used for the
     * select list's option value.
     *
     * @property valuePath
     * @type String
     * @required
     */

    /**
     * Name of the attribute in the objectArray to be used for the
     * select list's option name or display text.
     *
     * @property namePath
     * @type String
     * @required
     */

    /**
     * Indicates if icons should be rendered.
     *
     * @property icon
     * @type Boolean
     * @default false
     */
    icon: false,

    /**
     * Indicates if value is required.
     *
     * @property required
     * @type Boolean
     * @default false
     */
    required: false,

    /**
     * The default icon.
     *
     * @property defaultIcon
     * @type {String}
     * @default defaultList
     * @required
     */
    defaultIcon: 'defaultList',

    /**
     * Indicates if tooltips should be rendered for the options.
     *
     * @property tooltip
     * @type Boolean
     * @default false
     */
    tooltip: false,

    /**
     * Name of the attribute in the objectArray to be used for the
     * select list's tooltip.  If null, no tooltip will be
     * generated.
     *
     * @property tooltipPath
     * @type String
     * @default null
     */
    tooltipPath: null,

    /**
     * Whether to render a button to clear the selection.
     *
     * @property allowClear
     * @type Boolean
     * @default false
     */
    allowClear: false,

    /**
     * Whether to render the search input.
     *
     * @property searchEnabled
     * @type Boolean
     * @default true
     */
    searchEnabled: true,

    /**
     * Whether to disable the select.
     *
     * @property disabled
     * @type Boolean
     * @default false
     */
    disabled: false,

    /**
     * Whether to close the selection list after a selection has been made.
     *
     * @property closeOnSelect
     * @type Boolean
     * @default true
     */
    closeOnSelect: true,

    /**
     * The string to display when no option is selected.
     *
     * @property placeholder
     * @type String
     * @default 'Select one option'
     */
    placeholder: "Select one option",

    /**
     * Form label for select list
     *
     * @property label
     * @type String
     * @default null
     */
    label: null,

    ariaLabel: Ember.computed('label', function () {
      return this.label;
    }),

    /**
     * Indicates whether to allow the user to enter a new option
     * not contained in the select list.
     *
     * @property create
     * @type Boolean
     * @default false
     */
    create: false,

    /**
     * If set, removes the option with the specified id from the list. By default,
     * it will hide options with a null id.
     *
     * @property filterId
     * @type {String|Number|null}
     * @default null
     * @optional
     */
    filterId: null,

    /**
     * The component to render
     *
     * @property theComponent
     * @type Ember.computed
     * @return String
     */
    theComponent: Ember.computed('create', function () {
      return this.create ? 'power-select-with-create' : 'power-select';
    }),

    /**
     * Callback after value is updated, usually an action is passed.
     *
     * @method change
     */
    change() {},

    /**
     * The currently selected item in the codelist
     *
     * @property selectedItem
     * @type Ember.computed
     * @return PromiseObject
     */
    selectedItem: Ember.computed('value', function () {
      let value = this.value;

      return _emberData.default.PromiseObject.create({
        promise: this.codelist.then(function (arr) {
          return arr.find(item => {
            return item['codeId'] === value;
          });
        })
      });
    }),

    /**
     * codelist is an array of code objects re-mapped from the input 'objectArray'.
     * Values from the input object array are mapped according the path parameters
     * provided.
     *
     * @property codelist
     * @type Ember.computed
     * @return PromiseArray
     */
    codelist: Ember.computed('objectArray', function () {
      const objArray = this.objectArray;
      let inList = new Ember.RSVP.Promise(function (resolve, reject) {
        // succeed
        resolve(objArray);
        // or reject
        reject(new Error('Couldn\'t create a promise.'));
      });
      let codeId = this.valuePath;
      let codeName = this.namePath;
      let tooltip = this.tooltipPath;
      let icons = this.icons;
      let defaultIcon = this.defaultIcon;
      let outList = Ember.A();

      return _emberData.default.PromiseArray.create({
        promise: inList.then(function (arr) {
          arr.forEach(function (item) {
            let newObject = {
              codeId: Ember.get(item, codeId),
              codeName: Ember.get(item, codeName),
              tooltip: false,
              icon: icons.get(item[codeName].toString()) || icons.get(defaultIcon)
            };
            if (tooltip) {
              newObject.tooltip = Ember.get(item, tooltip);
            }
            outList.pushObject(newObject);
          });

          return outList;
        })
      });
    }),

    /**
     * Creates a new codelist entry. The codeId and codeName are both set to the
     * passed value.
     *
     * @method createCode
     * @param  {String} code The code
     * @return {Object}      Returns a new codelist object
     */
    createCode(code) {
      return {
        codeId: code,
        codeName: code,
        tooltip: false
      };
    },

    /**
     * Set the value on the select.
     *
     * @method setValue
     * @param {Object} selected The object with the value(codeName) to set.
     */
    setValue(selected) {
      let val = selected ? selected.codeId : null;
      this.set('value', val);
      this.change();
    },
    actions: {
      // do the binding to value
      setValue(selected) {
        this.setValue(selected);
      },
      create(selected) {
        let code = this.createCode(selected);

        this.codelist.pushObject(code);
        this.setValue(code);
      }
    }

  });
});
;define("mdeditor/pods/components/input/md-select/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "TNCzr1xu", "block": "{\"symbols\":[\"code\"],\"statements\":[[4,\"if\",[[23,[\"label\"]]],null,{\"statements\":[[0,\"      \"],[7,\"label\"],[9],[1,[21,\"label\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[7,\"div\"],[11,\"class\",\"md-input-input\"],[9],[0,\"\\n\"],[4,\"component\",[[23,[\"theComponent\"]]],[[\"selected\",\"multiple\",\"options\",\"disabled\",\"placeholder\",\"searchField\",\"searchEnabled\",\"allowClear\",\"closeOnSelect\",\"onchange\",\"oncreate\",\"ariaLabel\"],[[23,[\"selectedItem\"]],[23,[\"multiple\"]],[23,[\"codelist\"]],[23,[\"disabled\"]],[23,[\"placeholder\"]],\"codeName\",[23,[\"searchEnabled\"]],[23,[\"allowClear\"]],[23,[\"closeOnSelect\"]],[27,\"action\",[[22,0,[]],\"setValue\"],null],[27,\"action\",[[22,0,[]],\"create\"],null],[23,[\"ariaLabel\"]]]],{\"statements\":[[4,\"unless\",[[23,[\"filter\"]]],null,{\"statements\":[[0,\"        \"],[7,\"span\"],[12,\"class\",[28,[\"md-select-option \",[27,\"if\",[[22,1,[\"tooltip\"]],\"with-tip\"],null]]]],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"icon\"]]],null,{\"statements\":[[4,\"if\",[[22,1,[\"icon\"]]],null,{\"statements\":[[0,\"              \"],[7,\"span\"],[12,\"class\",[28,[\"fa fa-\",[22,1,[\"icon\"]]]]],[9],[0,\" \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"          \"],[7,\"span\"],[11,\"class\",\"select-value\"],[9],[1,[22,1,[\"codeName\"]],false],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"tooltip\"]]],null,{\"statements\":[[4,\"if\",[[22,1,[\"tooltip\"]]],null,{\"statements\":[[0,\"            \"],[7,\"span\"],[11,\"class\",\"select-tip\"],[9],[0,\"\\n              \"],[7,\"span\"],[11,\"class\",\"badge tooltip\"],[9],[0,\"?\\n                \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\"],[[22,1,[\"tooltip\"]],\"right\"]]],false],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null],[0,\"      \"],[7,\"span\"],[11,\"class\",\"md-input-error\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"showErrorMessage\"]]],null,{\"statements\":[[0,\"          \"],[7,\"span\"],[11,\"class\",\"md-error\"],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"exclamation-circle\"],null],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip danger\"]],{\"statements\":[[0,\"                \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],[23,[\"path\"]]],null],\"message\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"showWarningMessage\"]]],null,{\"statements\":[[0,\"          \"],[7,\"span\"],[11,\"class\",\"md-warning\"],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip warning\"]],{\"statements\":[[0,\"            \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],[23,[\"path\"]]],null],\"warningMessage\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-select/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-textarea/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({

    /**
     * Input, edit, display a multi-line, expandable, text area.
     *
     * @class md-textarea
     * @constructor
     */

    init() {
      this._super(...arguments);

      let model = this.model;
      let valuePath = this.valuePath;

      if (Ember.isBlank(model) !== Ember.isBlank(valuePath)) {
        (true && !(false) && Ember.assert(`You must supply both model and valuePath to ${this.toString()} or neither.`));
      }

      if (!Ember.isBlank(model)) {
        if (this.get(`model.${valuePath}`) === undefined) {
          Ember.debug(`model.${valuePath} is undefined in ${this.toString()}.`);

          //Ember.run.once(()=>model.set(valuePath, ""));
        }

        Ember.defineProperty(this, 'value', Ember.computed.alias(`model.${valuePath}`));

        Ember.defineProperty(this, 'validation', Ember.computed.alias(`model.validations.attrs.${valuePath}`).readOnly());

        Ember.defineProperty(this, 'required', Ember.computed('validation.options.presence{presence,disabled}', 'disabled', function () {
          return !this.disabled && this.get('validation.options.presence.presence') && !this.get('validation.options.presence.disabled');
        }).readOnly());

        Ember.defineProperty(this, 'notValidating', Ember.computed.not('validation.isValidating').readOnly());

        Ember.defineProperty(this, 'hasContent', Ember.computed.notEmpty('value').readOnly());

        Ember.defineProperty(this, 'hasWarnings', Ember.computed.notEmpty('validation.warnings').readOnly());

        Ember.defineProperty(this, 'isValid', Ember.computed.and('hasContent', 'validation.isTruelyValid').readOnly());

        Ember.defineProperty(this, 'shouldDisplayValidations', Ember.computed.or('showValidations', 'didValidate', 'hasContent').readOnly());

        Ember.defineProperty(this, 'showErrorClass', Ember.computed.and('notValidating', 'showErrorMessage', 'hasContent', 'validation').readOnly());

        Ember.defineProperty(this, 'showErrorMessage', Ember.computed.and('shouldDisplayValidations', 'validation.isInvalid').readOnly());

        Ember.defineProperty(this, 'showWarningMessage', Ember.computed.and('shouldDisplayValidations', 'hasWarnings', 'isValid').readOnly());
      }
    },

    attributeBindings: ['data-spy'],
    classNames: ['md-textarea'],
    classNameBindings: ['label:form-group', 'required', 'embedded:md-embedded'],

    /**
     * Initial value, returned value.
     *
     * @property value
     * @type String
     * @return String
     * @required
     */

    /**
     * Form label for textarea
     *
     * @property label
     * @type String
     * @default null
     */
    label: null,

    /**
     * The string to display when no option is selected.
     *
     * @property placeholder
     * @type String
     * @default 'Select one option'
     */
    placeholder: "Select one option",

    /**
     * Indicates whether the value is required
     *
     * @property required
     * @type Boolean
     * @default false
     */
    required: false,

    /**
     * Maximum number of characters allowed.
     * If maxlength is not provided the number of characters will
     * not be restricted.
     *
     * @property maxlength
     * @type Number
     * @default null
     */
    maxlength: null,

    /**
     * Enable auto-resizing of the textarea
     *
     * @property autoresize
     * @type Boolean
     * @default true
     */
    autoresize: true,

    /**
     * Set the maximum width of the resizeable element in pixels.
     * If maxwidth is not provided width will not be restricted.
     *
     * @property maxwidth
     * @type Number
     * @default null
     */
    maxwidth: null,

    /**
     * Set the maximum height of the resizable element in pixels.
     * If maxheight is not provided height will not be restricted.
     *
     * @property maxheight
     * @type {Number}
     * @default null
     */
    maxheight: null,

    /**
     * Set the minimum number of rows for the element.
     * Recommended for textareas.
     *
     * @property rows
     * @type Number
     * @default 2
     */
    rows: 2,

    /**
     * Set the maximum number of rows for the element.
     * Recommended for textareas.
     *
     * @property maxrows
     * @type Number
     * @default 10
     */
    maxrows: 10,

    /**
     * Class to set on the textarea
     *
     * @property class
     * @type {string}
     * @default 'form-control'
     */
    class: 'form-control',

    _didInsertArea() {
      this.scheduleMeasurement();
    }

  });
});
;define("mdeditor/pods/components/input/md-textarea/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "S6oOmJ3Z", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"label\"]]],null,{\"statements\":[[0,\"    \"],[7,\"label\"],[9],[1,[21,\"label\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[7,\"div\"],[11,\"class\",\"md-input-input\"],[9],[0,\"\\n  \"],[1,[27,\"textarea\",null,[[\"value\",\"placeholder\",\"required\",\"maxlength\",\"autoresize\",\"didInsertElement\",\"rows\",\"max-rows\",\"max-width\",\"max-height\",\"class\"],[[23,[\"value\"]],[23,[\"placeholder\"]],[23,[\"required\"]],[23,[\"maxlength\"]],[23,[\"autoresize\"]],[23,[\"_didInsertArea\"]],[23,[\"rows\"]],[23,[\"maxrows\"]],[23,[\"maxwidth\"]],[23,[\"maxheight\"]],[23,[\"class\"]]]]],false],[0,\"\\n\\n  \"],[7,\"span\"],[11,\"class\",\"md-input-error\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"showErrorMessage\"]]],null,{\"statements\":[[0,\"      \"],[7,\"span\"],[11,\"class\",\"md-error\"],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"exclamation-circle\"],null],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip danger\"]],{\"statements\":[[0,\"            \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],[23,[\"valuePath\"]]],null],\"message\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"showWarningMessage\"]]],null,{\"statements\":[[0,\"      \"],[7,\"span\"],[11,\"class\",\"md-warning\"],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip warning\"]],{\"statements\":[[0,\"        \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],[23,[\"valuePath\"]]],null],\"warningMessage\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/input/md-textarea/template.hbs" } });
});
;define('mdeditor/pods/components/input/md-toggle/component', ['exports', 'ember-toggle/components/x-toggle/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
    * Custom toggle switch for boolean input
    *
    * @class md-toggle
    * @constructor
    * @extends ember-toggle/components/x-toggle
    */

    /**
     * Bound classes:
     *  - value
     *    - __true__: toggle-on
     *    - __false__: toggle-off
     *
     * @property classNameBindings
     * @type {Array}
     */
    classNameBindings: ['value:toggle-on:toggle-off']
  });
});
;define('mdeditor/pods/components/layout/md-breadcrumb/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});
;define("mdeditor/pods/components/layout/md-breadcrumb/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cotc3Gps", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"bread-crumbs\",null,[[\"tagName\",\"linkable\"],[\"ol\",true]]],false],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/md-breadcrumb/template.hbs" } });
});
;define('mdeditor/pods/components/layout/md-card/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * Component that renders a Bootstrap card.
     *
     * ```handlebars
     * \{{#layout/md-card
     *   title="title"
     *   collapsible=true
     *   collapsed=false
     *   profilePath="card"
     *   data-spy="Card"
     *   shadow=true
     * }}
     *   Content
     * {{/layout/md-card}}
     * ```
     * @module mdeditor
     * @submodule components-layout
     * @class md-card
     * @constructor
     */

    // init() {
    //   this._super(...arguments);
    //
    //   let content = this.get('content');
    //
    //   if(content !== null) {
    //     let empty = content ? Object.keys(this.get('cleaner').clean(content, {
    //         preserveArrays: false
    //       })).length ===
    //       0 : true;
    //
    //     this.set('collapsed', empty);
    //   }
    // },

    spotlight: Ember.inject.service(),
    cleaner: Ember.inject.service(),

    classNames: ['md-card', 'card'],
    classNameBindings: ['shadow:box-shadow--4dp', 'scroll:scroll-card', 'maximizable', 'fullScreen', 'required', 'muted'],
    attributeBindings: ['data-spy'],

    content: null,
    /**
     * The card element id.
     *
     * @property cardId
     * @type {String}
     * @readOnly
     * @category computed
     * @requires elementId
     */
    cardId: Ember.computed('elementId', function () {
      return 'card-' + this.elementId;
    }).readOnly(),

    /**
     * The card title.
     *
     * @property title
     * @type {String}
     * @required
     */

    /**
     * The card title icon.
     *
     * @property titleIcon
     * @type {String}
     * @required
     */

    /**
     * If true, the "row" the card body will be initally collapsed.
     *
     * @property collapsed
     * @type {Boolean}
     * @default undefined
     */

    /**
     * If true, the spotlight button will be inserted into the toolbar.
     *
     * @property spotlightEnabled
     * @type {Boolean}
     * @default true
     */
    spotlightEnabled: true,

    /**
     * If true, the scroll-card class will be applied to the card.
     *
     * @property scroll
     * @type {Boolean}
     * @default undefined
     */

    /**
     * If true, the maximize control will be avialable on the card.
     *
     * @property maximizable
     * @type {Boolean}
     * @default undefined
     */

    /**
     * If true, a box shadow will be rendered around the card.
     *
     * @property shadow
     * @type {Boolean}
     * @default true
     */
    shadow: true,

    /**
     * If true, the card-block class will be added.
     *
     * @property block
     * @type {Boolean}
     * @default true
     */
    block: true,

    /**
     * If true, the card-flex class will be added.
     *
     * @property flex
     * @type {Boolean}
     * @default false
     */
    flex: false,

    /**
     * If true, the card-block text color will be muted.
     *
     * @property muted
     * @type {Boolean}
     * @default false
     */
    muted: false,

    /**
     * If true, the collapse control will be added to the card header.
     *
     * @property collapsible
     * @type {Boolean}
     * @default undefined
     */

    /**
     * If true, the "row" class will be added to the card body.
     *
     * @property bodyIsRow
     * @type {Boolean}
     * @default undefined
     */

    /**
     * Bootstrap button class to apply to header buttton
     *
     * @property btnClass
     * @type {String}
     * @default 'primary'
     */
    btnClass: 'primary',

    /**
     * Icon to display in header button
     *
     * @property btnIcon
     * @type {String}
     * @default undefined
     */

    /**
     * The text to display in the header button.
     * @property btnText
     * @type {String}
     * @default undefined
     */

    /**
     * The action to perform whrn the header button is clicked.
     * @property btnAction
     * @type {Function}
     * @default undefined
     */

    /**
     * The height to offset from top of container when scrolling.
     *
     * @property offset
     * @type {Number}
     * @default 130
     */
    offset: 130,

    /**
     * The data-spy text. Defaults to the title.
     *
     * @property data-spy
     * @type {String}
     * @default "this.title"
     * @category computed
     */
    'data-spy': Ember.computed.oneWay('title'),

    windowIcon: Ember.computed('fullScreen', function () {
      return this.fullScreen ? 'compress' : 'expand';
    }),

    isCollapsible: Ember.computed('fullScreen', 'collapsible', function () {
      return !this.fullScreen && this.collapsible;
    }),

    didInsertElement() {
      this._super(...arguments);

      if (this.collapsible) {
        let card = this.$();
        let body = this.$(' > .card-collapse');
        let offset = this.offset || 0;

        body.on('shown.bs.collapse', function (e) {
          e.stopPropagation();
          // card.get(0).scrollIntoView({
          //   block: "end",
          //   behavior: "smooth"
          // });
          //
          // let scrolledY = window.scrollY;
          //
          // if(scrolledY) {
          //   window.scroll(0, scrolledY - offset);
          // }
          Ember.$('html,body').animate({
            scrollTop: card.offset().top - offset
          }, 'slow');
        });
      }

      let content = this.content;

      if (content !== null) {
        let empty = content ? Object.keys(this.cleaner.clean(content, {
          preserveArrays: false
        })).length === 0 : true;

        this.set('collapsed', empty);
      }
    },

    actions: {
      toggleFullScreen() {
        let val = this.toggleProperty('fullScreen');

        Ember.$(this.element).parents('.liquid-child,.liquid-container, .md-card').toggleClass('full-screen', val);
        Ember.$('body').toggleClass('slider', val);
      },
      spotlight(id) {
        Ember.get(this, 'spotlight').setTarget(id);
      }
    }
  });
});
;define("mdeditor/pods/components/layout/md-card/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8FYFvOU8", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"title\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"card-header text-info\"],[9],[0,\"\\n      \"],[7,\"h4\"],[11,\"class\",\"card-title md-card-chevron\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"isCollapsible\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"titleIcon\"]]],null,{\"statements\":[[0,\"          \"],[7,\"a\"],[11,\"role\",\"button\"],[11,\"data-toggle\",\"collapse\"],[12,\"href\",[28,[\"#\",[21,\"cardId\"]]]],[12,\"aria-expanded\",[27,\"if\",[[23,[\"collapsed\"]],\"false\",\"true\"],null]],[12,\"class\",[27,\"if\",[[23,[\"collapsed\"]],\"collapsed\"],null]],[12,\"aria-controls\",[21,\"panelId\"]],[9],[0,\"\\n          \"],[1,[27,\"fa-icon\",[[23,[\"titleIcon\"]]],null],false],[0,\"\\n          \"],[1,[21,\"title\"],false],[0,\"\\n          \"],[7,\"span\"],[11,\"class\",\"fa\"],[9],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"          \"],[7,\"a\"],[11,\"role\",\"button\"],[11,\"data-toggle\",\"collapse\"],[12,\"href\",[28,[\"#\",[21,\"cardId\"]]]],[12,\"aria-expanded\",[27,\"if\",[[23,[\"collapsed\"]],\"false\",\"true\"],null]],[12,\"class\",[27,\"if\",[[23,[\"collapsed\"]],\"collapsed\"],null]],[12,\"aria-controls\",[21,\"panelId\"]],[9],[0,\"\\n          \"],[7,\"span\"],[11,\"class\",\"fa\"],[9],[10],[0,\"\\n          \"],[1,[21,\"title\"],false],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"titleIcon\"]]],null,{\"statements\":[[0,\"            \"],[1,[27,\"fa-icon\",[[23,[\"titleIcon\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"          \"],[1,[21,\"title\"],false],[0,\"\\n\"]],\"parameters\":[]}],[4,\"if\",[[23,[\"maximizable\"]]],null,{\"statements\":[[0,\"          \"],[7,\"a\"],[11,\"role\",\"button\"],[11,\"class\",\"pull-right md-card-maximize hidden-print\"],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[[23,[\"windowIcon\"]]],[[\"size\",\"click\"],[1,[27,\"action\",[[22,0,[]],\"toggleFullScreen\"],null]]]],false],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[7,\"div\"],[11,\"class\",\"btn-group hidden-print pull-right\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"btnText\"]]],null,{\"statements\":[[0,\"            \"],[7,\"button\"],[11,\"name\",\"button\"],[12,\"class\",[28,[\"btn btn-\",[27,\"if\",[[23,[\"btnClass\"]],[23,[\"btnClass\"]],\"primary\"],null],\" btn-xs\"]]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[23,[\"btnAction\"]]]],[9],[0,\"\\n              \"],[1,[27,\"fa-icon\",[[23,[\"btnIcon\"]]],null],false],[0,\"\\n              \"],[1,[21,\"btnText\"],false],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,[\"spotlightEnabled\"]]],null,{\"statements\":[[0,\"            \"],[7,\"button\"],[11,\"name\",\"button\"],[11,\"class\",\"btn btn-info btn-xs md-btn-spotlight\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"spotlight\",[23,[\"elementId\"]]]],[9],[0,\"\\n              \"],[1,[27,\"fa-icon\",[\"circle\"],null],false],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[7,\"div\"],[12,\"id\",[21,\"cardId\"]],[12,\"class\",[28,[\"card-collapse \",[27,\"if\",[[23,[\"collapsed\"]],\"collapse\",\"in\"],null],\" \",[27,\"if\",[[23,[\"bodyIsRow\"]],\"row\"],null],\" \",[27,\"if\",[[23,[\"block\"]],\"card-block\"],null],\" \",[27,\"if\",[[23,[\"flex\"]],\"card-flex\"],null]]]],[9],[0,\"\\n    \"],[14,1],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/md-card/template.hbs" } });
});
;define('mdeditor/pods/components/layout/md-footer/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: 'footer',
    classNames: ['md-footer'],

    settings: Ember.inject.service()
  });
});
;define("mdeditor/pods/components/layout/md-footer/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "OdIXwL62", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"footer-container\"],[9],[0,\"\\n  \"],[7,\"span\"],[9],[7,\"a\"],[11,\"class\",\"btn btn-xs btn-warning\"],[11,\"href\",\"https://github.com/adiwg/mdEditor/issues/new\"],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[1,[27,\"fa-icon\",[\"github\"],null],false],[0,\" Report Issue\\n\\n    \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\"],[\"Report bugs, Request features - GitHub account required.\",\"top\"]]],false],[0,\"\\n  \"],[10],[10],[0,\"\\n  \"],[7,\"span\"],[9],[0,\"AutoSave:\\n      \"],[7,\"span\"],[12,\"class\",[27,\"if\",[[23,[\"settings\",\"data\",\"autoSave\"]],\"text-success\",\"text-warning\"],null]],[9],[0,\"\\n        \"],[1,[27,\"if\",[[23,[\"settings\",\"data\",\"autoSave\"]],\"On\",\"Off\"],null],false],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[14,1],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/md-footer/template.hbs" } });
});
;define('mdeditor/pods/components/layout/md-nav-main/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /*didInsertElement: function () {
      this.$('[data-toggle="tooltip"]')
        .tooltip();
    },*/
    actions: {
      toggleSidebar() {
        Ember.$('#md-wrapper').toggleClass('toggled');
        //hack to force reflow
        Ember.$('#md-navbar-main-collapse ul').hide().show(0);
      }
    }
  });
});
;define("mdeditor/pods/components/layout/md-nav-main/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "4CR6gcy/", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"nav\"],[11,\"id\",\"md-navbar-main\"],[11,\"class\",\"navbar navbar-inverse navbar-top\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"container-fluid\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"navbar-header\"],[9],[0,\"\\n      \"],[7,\"button\"],[11,\"class\",\"navbar-toggle collapsed\"],[11,\"data-toggle\",\"collapse\"],[11,\"data-target\",\"#md-navbar-main-collapse\"],[11,\"aria-expanded\",\"false\"],[11,\"type\",\"button\"],[9],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"sr-only\"],[9],[0,\"Toggle navigation\"],[10],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"icon-bar\"],[9],[10],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"icon-bar\"],[9],[10],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"icon-bar\"],[9],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"a\"],[11,\"class\",\"navbar-brand\"],[11,\"href\",\"#\"],[3,\"action\",[[22,0,[]],\"toggleSidebar\"]],[9],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"md-icon-mdeditor\"],[9],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\\n    \"],[7,\"div\"],[11,\"class\",\"collapse navbar-collapse\"],[11,\"id\",\"md-navbar-main-collapse\"],[9],[0,\"\\n      \"],[7,\"ul\"],[11,\"class\",\"nav navbar-nav\"],[9],[0,\"\\n        \"],[7,\"li\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"dashboard\"],null,{\"statements\":[[0,\"            \"],[7,\"span\"],[11,\"class\",\"fa fa-dashboard\"],[9],[10],[0,\"\\n            \"],[7,\"span\"],[11,\"class\",\"md-nav-text\"],[9],[0,\"Dashboard\"],[10],[0,\"\\n            \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Dashboard\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[7,\"li\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"export\"],null,{\"statements\":[[0,\"            \"],[7,\"span\"],[11,\"class\",\"fa fa-sign-out\"],[9],[10],[0,\"\\n            \"],[7,\"span\"],[11,\"class\",\"md-nav-text\"],[9],[0,\"Export\"],[10],[0,\"\\n            \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Export\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[7,\"li\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"import\"],null,{\"statements\":[[0,\"            \"],[7,\"span\"],[11,\"class\",\"fa fa-sign-in\"],[9],[10],[0,\"\\n            \"],[7,\"span\"],[11,\"class\",\"md-nav-text\"],[9],[0,\"Import\"],[10],[0,\"\\n            \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Import\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[7,\"li\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"publish\"],null,{\"statements\":[[0,\"            \"],[7,\"span\"],[11,\"class\",\"fa fa-share-square-o\"],[9],[10],[0,\"\\n            \"],[7,\"span\"],[11,\"class\",\"md-nav-text\"],[9],[0,\"Publish\"],[10],[0,\"\\n            \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Publish\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[14,1],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"ul\"],[11,\"class\",\"nav navbar-nav navbar-right\"],[9],[0,\"\\n        \"],[7,\"li\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"settings\"],null,{\"statements\":[[0,\"            \"],[7,\"span\"],[11,\"class\",\"fa fa-gear\"],[9],[10],[0,\"\\n            \"],[7,\"span\"],[11,\"class\",\"md-nav-text nav-settings\"],[9],[0,\"Settings\"],[10],[0,\"\\n            \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Settings\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/md-nav-main/template.hbs" } });
});
;define('mdeditor/pods/components/layout/md-nav-secondary/component', ['exports', 'ember-resize/mixins/resize-aware'], function (exports, _resizeAware) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend(_resizeAware.default, {
    customProfile: Ember.inject.service('custom-profile'),
    resizeService: Ember.inject.service('resize'),
    links: Ember.computed('customProfile.active', 'model', function () {
      const active = this.customProfile.getActiveProfile();
      const modelName = this.model.constructor.modelName;

      this.debouncedDidResize();

      return Ember.get(active, 'definition.nav.' + modelName) || this.customProfile.defaultProfile.definition.nav[modelName];
    }),

    resizeWidthSensitive: true,
    resizeHeightSensitive: true,

    /**
     * translated "more" text
     *
     * @name more
     * @type {String}
     */
    more: 'More',

    /**
     * selector for the navbar container
     *
     * @name parent
     * @type {String}
     */
    parent: '#md-navbars',

    /**
     * width that needs to be subtracted from the parent div width
     *
     * @name offset
     * @type {Number}
     */
    offset: 0,

    init() {
      this._super(...arguments);

      // jQuery plugin adapted from https://github.com/tomiford/bootstrap-overflow-navs
      Ember.$.fn.overflowNavs = function (options) {
        // Create a handle to our ul menu
        // @TODO Implement some kind of check to make sure there is only one?  If we accidentally get more than one
        // then strange things happen
        let ul = Ember.$(this);

        // This should work with all navs, not just the navbar, so you should be able to pass a parent in
        let parent = options.parent ? options.parent : ul.parents('.navbar');

        // Get width of the navbar parent so we know how much room we have to work with
        let parent_width = Ember.$(parent).width() - (options.offset ? parseInt(Ember.$(options.offset).width()) : 0);

        // Find an already existing .overflow-nav dropdown
        let dropdown = Ember.$('li.overflow-nav', ul);

        // Create one if none exists
        if (!dropdown.length) {
          dropdown = Ember.$('<li class="overflow-nav dropdown"></li>');
          dropdown.append(Ember.$('<a class="dropdown-toggle" data-toggle="dropdown" href="#">' + options.more + '<b class="caret"></b></a>'));
          dropdown.append(Ember.$('<ul class="dropdown-menu"></ul>'));
        }

        // Get the width of the navbar, need to add together <li>s as the ul wraps in bootstrap
        let width = 100;
        // Allow for padding
        ul.children('li').each(function () {
          let $this = Ember.$(this);
          width += $this.outerWidth();
        });

        // Window is shrinking
        if (width >= parent_width) {
          // Loop through each non-dropdown li in the ul menu from right to left (using .get().reverse())
          Ember.$(Ember.$('li', ul).not('.dropdown').not('.dropdown li').get().reverse()).each(function () {
            let $this = Ember.$(this);
            // Get the width of the navbar
            let width = 100;
            // Allow for padding
            ul.children('li').each(function () {
              let $this = Ember.$(this);
              width += $this.outerWidth();
            });
            if (width >= parent_width) {
              // Remember the original width so that we can restore as the window grows
              $this.attr('data-original-width', $this.outerWidth());
              // Move the rightmost item to top of dropdown menu if we are running out of space
              dropdown.children('ul.dropdown-menu').prepend(this);
            }
            // @todo on shrinking resize some menu items are still in drop down when bootstrap mobile navigation is displaying
          });
        }
        // Window is growing
        else {
            // We used to just look at the first one, but this doesn't work when the window is maximized
            //let dropdownFirstItem = dropdown.children('ul.dropdown-menu').children().first();
            dropdown.children('ul.dropdown-menu').children().each(function () {
              if ((width += parseInt(Ember.$(this).attr('data-original-width'))) < parent_width) {
                // Restore the topmost dropdown item to the main menu
                dropdown.before(this);
              } else {
                // If the topmost item can't be restored, don't look any further
                return false;
              }
            });
          }

        // Remove or add dropdown depending on whether or not it contains menu items
        if (!dropdown.children('ul.dropdown-menu').children().length) {
          dropdown.remove();
        } else {
          // Append new dropdown menu to main menu iff it doesn't already exist
          if (!ul.children('li.overflow-nav').length) {
            ul.append(dropdown);
          }
        }
      };
    },

    didInsertElement: function didInsertElement() {
      this._super.apply(this, arguments);
      this.debouncedDidResize();
    },

    debouncedDidResize() {
      let options = {
        more: this.more,
        parent: this.parent,
        offset: this.offset
      };

      Ember.$('#md-navbar-secondary').overflowNavs(options);
    }
  });
});
;define("mdeditor/pods/components/layout/md-nav-secondary/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "WLHYBfYy", "block": "{\"symbols\":[\"link\",\"&default\"],\"statements\":[[7,\"ul\"],[11,\"id\",\"md-navbar-secondary\"],[11,\"class\",\"nav nav-pills\"],[11,\"role\",\"navigation\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"links\"]]],null,{\"statements\":[[0,\"    \"],[7,\"li\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"isStaticLinks\"]]],null,{\"statements\":[[0,\"        \"],[4,\"link-to\",[[22,1,[\"target\"]]],[[\"class\"],[\"link.class\"]],{\"statements\":[[1,[22,1,[\"title\"]],false],[0,\"\\n\"],[4,\"if\",[[22,1,[\"tip\"]]],null,{\"statements\":[[4,\"ember-tooltip\",null,[[\"effect\",\"side\",\"delay\",\"tooltipClassName\"],[\"slide\",\"bottom\",500,\"ember-tooltip md-tooltip info\"]],{\"statements\":[[0,\"              \"],[1,[22,1,[\"tip\"]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[4,\"link-to\",[[22,1,[\"target\"]],[23,[\"model\"]]],[[\"class\"],[\"link.class\"]],{\"statements\":[[1,[22,1,[\"title\"]],false],[0,\"\\n\"],[4,\"if\",[[22,1,[\"tip\"]]],null,{\"statements\":[[4,\"ember-tooltip\",null,[[\"effect\",\"side\",\"delay\",\"tooltipClassName\"],[\"slide\",\"bottom\",500,\"ember-tooltip md-tooltip info\"]],{\"statements\":[[0,\"              \"],[1,[22,1,[\"tip\"]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n  \"],[14,2],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/md-nav-secondary/template.hbs" } });
});
;define('mdeditor/pods/components/layout/md-nav-sidebar/component', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: ['md-sidebar-wrapper'],
    classNameBindings: ['showHelp:help'],

    showHelp: false,

    prerelease: Ember.computed(function () {
      let version = this.version;

      if (version.substring(0, 3) === "0.0") {
        return 'alpha';
      }

      if (version.substring(0, 1) === "0" && version.substring(0, 3) > 0) {
        return 'beta';
      }
    }),

    version: Ember.computed(function () {
      let version = _environment.default.APP.version;

      return version.substring(0, version.indexOf('+'));
    }),
    actions: {
      toggleHelp() {
        this.toggleProperty('showHelp');
      },
      toggleSidebar() {
        Ember.$('#md-wrapper').toggleClass('toggled');
        //hack to force reflow
        Ember.$('#md-navbar-main-collapse ul').hide().show(0);
      }
    }
  });
});
;define("mdeditor/pods/components/layout/md-nav-sidebar/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XAe4otkJ", "block": "{\"symbols\":[\"class\",\"meta\",\"record\"],\"statements\":[[0,\"  \"],[7,\"ul\"],[11,\"class\",\"sidebar-nav\"],[9],[0,\"\\n    \"],[7,\"li\"],[11,\"class\",\"sidebar-brand\"],[9],[0,\"\\n      \"],[7,\"a\"],[11,\"class\",\"sidebar-brand-link\"],[11,\"href\",\"#\"],[3,\"action\",[[22,0,[]],\"toggleSidebar\"]],[9],[0,\"md\"],[7,\"span\"],[11,\"class\",\"md-icon-mdeditor\"],[9],[10],[0,\"ditor\"],[10],[7,\"span\"],[12,\"class\",[28,[\"md-app-version \",[21,\"prerelease\"]]]],[9],[0,\"v\"],[1,[21,\"version\"],false],[10],[0,\"\\n      \"],[7,\"a\"],[11,\"class\",\"md-btn-help pull-right\"],[11,\"href\",\"#\"],[3,\"action\",[[22,0,[]],\"toggleHelp\"]],[9],[1,[27,\"fa-icon\",[[27,\"if\",[[23,[\"showHelp\"]],\"list\",\"question-circle\"],null]],null],false],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[4,\"liquid-if\",[[23,[\"showHelp\"]]],[[\"use\",\"enableGrowth\"],[\"fade\",false]],{\"statements\":[[0,\"      \"],[1,[21,\"md-help\"],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"li\"],[11,\"id\",\"md-sidebar-lists\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"panel-group\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"items\"]]],null,{\"statements\":[[4,\"with\",[[22,1,[\"meta\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\"],[11,\"class\",\"panel\"],[9],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"panel-heading clearfix\"],[12,\"id\",[28,[[22,2,[\"listId\"]],\"-heading\"]]],[9],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"btn-group btn-group-xs pull-right\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"...\"],[9],[0,\"\\n\"],[4,\"link-to\",[[27,\"concat\",[[22,2,[\"type\"]],\".new\"],null]],[[\"class\"],[\"btn btn-primary btn-xs\"]],{\"statements\":[[0,\"                    \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" \"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"link-to\",[[22,2,[\"list\"]]],[[\"class\"],[\"btn btn-primary btn-xs\"]],{\"statements\":[[0,\"                    \"],[7,\"span\"],[11,\"class\",\"fa fa-list\"],[9],[10],[0,\" \"]],\"parameters\":[]},null],[0,\"\\n                \"],[10],[0,\"\\n                \"],[7,\"h4\"],[11,\"class\",\"panel-title bg-primary\"],[9],[0,\"\\n              \"],[7,\"a\"],[11,\"class\",\"\"],[11,\"data-toggle\",\"collapse\"],[11,\"aria-expanded\",\"true\"],[12,\"href\",[28,[\"#\",[22,2,[\"listId\"]]]]],[12,\"aria-controls\",[22,2,[\"listId\"]]],[9],[0,\"\\n                \"],[7,\"span\"],[11,\"class\",\"fa\"],[9],[10],[0,\" \"],[1,[22,2,[\"title\"]],false],[0,\" (\"],[1,[22,1,[\"length\"]],false],[0,\")\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n              \"],[10],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"panel-collapse collapse in\"],[11,\"role\",\"tabpanel\"],[11,\"aria-expanded\",\"true\"],[12,\"id\",[22,2,[\"listId\"]]],[12,\"aria-labelledby\",[28,[[22,2,[\"listId\"]],\"-heading\"]]],[9],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"list-group\"],[9],[0,\"\\n\"],[4,\"each\",[[22,1,[]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\"],[11,\"class\",\"list-group-item\"],[11,\"draggable\",\"true\"],[9],[0,\"\\n                      \"],[7,\"div\"],[11,\"class\",\"btn-group btn-group-xs pull-right\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"Navigation Buttons\"],[9],[0,\"\\n\"],[4,\"link-to\",[[27,\"concat\",[[22,2,[\"type\"]],\".show.edit\"],null],[22,3,[]]],[[\"class\",\"disabledWhen\",\"draggable\"],[[27,\"concat\",[\"btn btn-\",[22,3,[\"status\"]]],null],[22,3,[\"isNew\"]],\"false\"]],{\"statements\":[[0,\"                          \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                      \"],[10],[0,\"\\n\"],[4,\"link-to\",[[27,\"concat\",[[22,2,[\"type\"]],\".show\"],null],[22,3,[]]],[[\"class\",\"disabledWhen\",\"activeClass\",\"draggable\"],[\"sidebar-row\",[22,3,[\"isNew\"]],[27,\"concat\",[\"active text-\",[22,3,[\"status\"]]],null],\"false\"]],{\"statements\":[[4,\"if\",[[22,3,[\"defaultLogo\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"img\"],[12,\"src\",[22,3,[\"defaultLogo\"]]],[11,\"alt\",\"logo\"],[11,\"class\",\"fa-fw\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                            \"],[7,\"span\"],[12,\"class\",[28,[\"fa fa-\",[22,3,[\"icon\"]],\" fa-fw\"]]],[9],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                          \"],[1,[22,3,[\"title\"]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[10],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[1]},null],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/md-nav-sidebar/template.hbs" } });
});
;define('mdeditor/pods/components/layout/md-slider/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: ['md-slider'],
    classNameBindings: ['visible:in'],
    visible: false,

    didReceiveAttrs() {
      Ember.$('body').toggleClass('slider', this.visible === true);
    },

    fromName: null,

    name: Ember.computed('fromName', function () {
      return this.fromName || 'md-slider-content';
    }),

    actions: {
      toggleVisibility() {
        this.toggleProperty('visible');

        if (!this.visible) {
          let context = this.get('context.isDestroying');

          this.set('fromName', null);

          if (!context) {
            this.onClose.call(this);
          }
        }
      }
    }
  });
});
;define("mdeditor/pods/components/layout/md-slider/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "OBz77qFa", "block": "{\"symbols\":[\"slider\",\"&default\"],\"statements\":[[7,\"button\"],[11,\"class\",\"close huge-text\"],[11,\"aria-label\",\"Close\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"toggleVisibility\"]],[9],[0,\"\\n  Close\\n  \"],[1,[27,\"fa-icon\",[\"caret-right\"],null],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"section\"],[11,\"class\",\"md-slider-body\"],[9],[0,\"\\n\"],[4,\"from-elsewhere\",null,[[\"name\"],[[23,[\"name\"]]]],{\"statements\":[[0,\"    \"],[7,\"h3\"],[11,\"class\",\"text-info\"],[9],[1,[22,1,[\"title\"]],false],[10],[0,\"\\n    \"],[7,\"hr\"],[9],[10],[0,\"\\n    \"],[1,[27,\"component\",[[22,1,[\"body\"]]],null],false],[0,\"\\n\"]],\"parameters\":[1]},null],[10],[0,\"\\n\"],[14,2],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/md-slider/template.hbs" } });
});
;define('mdeditor/pods/components/layout/md-wrap/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * Component used as a wrapper, data-spy enabled.
     *
     * ```handlebars
     * \{{#layout/md-wrap
     *   data-spy="Wrap"
     *   shadow=true
     * }}
     *   Content
     * {{/layout/md-wrap}}
     * ```
     * @module mdeditor
     * @submodule components-layout
     * @class md-wrap
     * @constructor
     */
    attributeBindings: ['data-spy']
  });
});
;define("mdeditor/pods/components/layout/md-wrap/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iYe4iQAw", "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/md-wrap/template.hbs" } });
});
;define('mdeditor/pods/components/layout/nav/dictionary/nav-main/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: ''
  });
});
;define("mdeditor/pods/components/layout/nav/dictionary/nav-main/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+fGBtQe3", "block": "{\"symbols\":[],\"statements\":[[7,\"li\"],[11,\"class\",\"divider-vertical\"],[9],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"li\"],[9],[0,\"\\n\"],[1,[27,\"from-elsewhere\",null,[[\"name\"],[\"dictionary-nav\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/nav/dictionary/nav-main/template.hbs" } });
});
;define('mdeditor/pods/components/layout/nav/record/nav-main/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: ''
  });
});
;define("mdeditor/pods/components/layout/nav/record/nav-main/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ll3pp0fl", "block": "{\"symbols\":[],\"statements\":[[7,\"li\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"record.show.translate\",[23,[\"model\"]]],null,{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"fa fa-retweet\"],[9],[10],[0,\"\\n    \"],[7,\"span\"],[11,\"class\",\"md-nav-text\"],[9],[0,\"Translate\"],[10],[0,\"\\n    \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Translate\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"],[7,\"li\"],[11,\"class\",\"divider-vertical\"],[9],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"li\"],[9],[0,\"\\n\"],[1,[27,\"from-elsewhere\",null,[[\"name\"],[\"record-nav\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/layout/nav/record/nav-main/template.hbs" } });
});
;define('mdeditor/pods/components/md-help/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: ['md-help-sidebar'],
    tagName: 'section'
  });
});
;define("mdeditor/pods/components/md-help/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "UQHEUAt+", "block": "{\"symbols\":[\"&default\"],\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"md-help-sidebar-content\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"page-header\"],[9],[0,\"\\n            \"],[7,\"h3\"],[9],[0,\"Help \"],[7,\"small\"],[9],[0,\"Main\"],[10],[0,\"\\n            \"],[7,\"button\"],[11,\"disabled\",\"\"],[11,\"id\",\"md-btn-tour\"],[11,\"class\",\"btn btn-xs btn-success pull-right\"],[11,\"type\",\"button\"],[9],[0,\"\\n                \"],[7,\"span\"],[11,\"class\",\"fa fa-bus\"],[9],[10],[0,\" Tour\\n            \"],[10],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"p\"],[9],[0,\"\\n            The mdEditor is a web application that allows users to author and\\n            edit metadata for projects and datasets. The primary design goal is\\n            to develop an editor that will allow creation and management of\\n            archival quality metadata without requiring extensive knowledge of\\n            metadata standards.\\n        \"],[10],[0,\"\\n        \"],[7,\"p\"],[9],[0,\"\\n            \"],[7,\"a\"],[11,\"href\",\"https://adiwg.gitbooks.io/mdeditor/content/\"],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[0,\"\\n              Click here to view the draft documentation.\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"p\"],[9],[0,\"Note, that it is a work in progress. Eventually, the documention will\\n        be available in this sidebar. \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/md-help/template.hbs" } });
});
;define('mdeditor/pods/components/md-models-table/component', ['exports', 'ember-models-table/components/models-table', 'mdeditor/pods/components/md-models-table/themes/bootstrap3'], function (exports, _modelsTable, _bootstrap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _modelsTable.default.extend({
    themeInstance: _bootstrap.default.create(),
    filteringIgnoreCase: true,
    pageSizeValues: Ember.computed(function () {
      return [10, 25, 50, 500];
    })
  });
});
;define('mdeditor/pods/components/md-models-table/components/check-all/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    actions: {
      toggleAllSelection() {
        this.toggleAllSelection();
      }
    }
  });
});
;define("mdeditor/pods/components/md-models-table/components/check-all/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Xoj6a6kY", "block": "{\"symbols\":[],\"statements\":[[7,\"span\"],[11,\"role\",\"button\"],[12,\"class\",[28,[\"center-block\\n\",[27,\"if\",[[27,\"is-equal\",[[23,[\"selectedItems\",\"length\"]],[23,[\"data\",\"length\"]]],null],[23,[\"themeInstance\",\"select-all-rows\"]],[23,[\"themeInstance\",\"deselect-all-rows\"]]],null]]]],[3,\"action\",[[22,0,[]],\"toggleAllSelection\"]],[9],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/md-models-table/components/check-all/template.hbs" } });
});
;define('mdeditor/pods/components/md-models-table/components/check/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    attributeBindings: ['aria-checked:isSelected'],

    actions: {
      clickOnRow(index, record, event) {
        this.clickOnRow(index, record);
        event.stopPropagation();
      }
    }
  });
});
;define("mdeditor/pods/components/md-models-table/components/check/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "5epI+aGT", "block": "{\"symbols\":[],\"statements\":[[7,\"span\"],[12,\"class\",[27,\"if\",[[23,[\"isSelected\"]],[23,[\"themeInstance\",\"select-row\"]],[23,[\"themeInstance\",\"deselect-row\"]]],null]],[12,\"onclick\",[27,\"action\",[[22,0,[]],\"clickOnRow\",[23,[\"index\"]],[23,[\"record\"]]],null]],[11,\"role\",\"checkbox\"],[9],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/md-models-table/components/check/template.hbs" } });
});
;define('mdeditor/pods/components/md-models-table/components/row-body/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: ['md-row-body'],
    spotlight: Ember.inject.service(),

    didInsertElement() {
      this._super(...arguments);

      this.spotlight.setTarget(this.elementId, this.collapse, this);
      this.element.classList.add('fade-in-fast');
    },

    willDestroyElement() {
      this._super(...arguments);

      this.spotlight.close();
    },
    collapse() {
      this.element.classList.add('fade-out-fast');
      this.collapseRow(this.index, this.record);
    }
  });
});
;define("mdeditor/pods/components/md-models-table/components/row-body/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8uar1B/6", "block": "{\"symbols\":[],\"statements\":[[0,\"  \"],[1,[27,\"component\",[[23,[\"rowBodyComponent\"]]],[[\"record\",\"visibleProcessedColumns\",\"index\",\"clickOnRow\",\"sendAction\",\"themeInstance\",\"expandRow\",\"collapseRow\"],[[23,[\"record\"]],[23,[\"visibleProcessedColumns\"]],[23,[\"index\"]],[23,[\"clickOnRow\"]],[23,[\"sendAction\"]],[23,[\"themeInstance\"]],[23,[\"expandRow\"]],[23,[\"collapseRow\"]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/md-models-table/components/row-body/template.hbs" } });
});
;define('mdeditor/pods/components/md-models-table/components/row-buttons/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: ['md-row-buttons']
  });
});
;define("mdeditor/pods/components/md-models-table/components/row-buttons/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "i0t7+uz5", "block": "{\"symbols\":[\"badge\",\"btn\"],\"statements\":[[4,\"each\",[[23,[\"column\",\"buttons\"]]],null,{\"statements\":[[4,\"if\",[[22,2,[\"confirm\"]]],null,{\"statements\":[[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[[27,\"concat\",[\"btn btn-sm btn-\",[22,2,[\"type\"]]],null],[27,\"action\",[[22,0,[]],[22,2,[\"action\"]],[23,[\"column\"]],[23,[\"index\"]],[23,[\"record\"]]],[[\"target\"],[[22,2,[\"target\"]]]]]]],{\"statements\":[[0,\"      \"],[7,\"span\"],[12,\"class\",[28,[\"fa fa-\",[22,2,[\"icon\"]]]]],[9],[10],[0,\" \"],[1,[22,2,[\"title\"]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"button\"],[12,\"class\",[28,[\"btn btn-sm btn-\",[22,2,[\"type\"]]]]],[12,\"onclick\",[27,\"action\",[[22,0,[]],[22,2,[\"action\"]],[23,[\"column\"]],[23,[\"index\"]],[23,[\"record\"]]],[[\"target\"],[[22,2,[\"target\"]]]]]],[11,\"type\",\"button\"],[9],[0,\"\\n      \"],[1,[27,\"fa-icon\",[[22,2,[\"icon\"]]],null],false],[0,\" \"],[1,[22,2,[\"title\"]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[2]},null],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"btn-group text-center\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"Row Error\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"record\",\"validations\",\"isInvalid\"]]],null,{\"statements\":[[0,\"  \"],[7,\"span\"],[11,\"class\",\"md-error\"],[9],[0,\"\\n    \"],[1,[27,\"fa-icon\",[\"exclamation-circle\"],[[\"fixedWidth\"],[true]]],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip danger\"]],{\"statements\":[[0,\"      This item has errors.\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"record\",\"validations\",\"hasWarnings\"]]],null,{\"statements\":[[0,\"  \"],[7,\"span\"],[11,\"class\",\"md-warning\"],[9],[0,\"\\n    \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],[[\"fixedWidth\"],[true]]],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip warning\"]],{\"statements\":[[0,\"      This item has warnings.\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n  \"]],\"parameters\":[]},null]],\"parameters\":[]}],[4,\"each\",[[23,[\"column\",\"badges\"]]],null,{\"statements\":[[4,\"if\",[[27,\"get\",[[23,[\"record\"]],[22,1,[\"isVisible\"]]],null]],null,{\"statements\":[[0,\"      \"],[7,\"span\"],[12,\"class\",[28,[\"md-\",[22,1,[\"type\"]]]]],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[[22,1,[\"icon\"]]],[[\"fixedWidth\"],[true]]],false],[0,\"\\n        \"],[1,[27,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\",\"text\"],[\"right\",[27,\"concat\",[\"ember-tooltip md-tooltip \",[22,1,[\"type\"]]],null],[22,1,[\"tip\"]]]]],false],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/md-models-table/components/row-buttons/template.hbs" } });
});
;define('mdeditor/pods/components/md-models-table/themes/bootstrap3', ['exports', 'ember-models-table/themes/bootstrap3'], function (exports, _bootstrap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _bootstrap.default.extend({
    'sort-asc': 'fa fa-caret-up',
    'sort-desc': 'fa fa-caret-down',
    'column-visible': 'fa fa-check-square-o',
    'column-hidden': 'fa fa-square-o',
    'nav-first': 'fa fa-fast-backward',
    'nav-prev': 'fa fa-backward',
    'nav-next': 'fa fa-forward',
    'nav-last': 'fa fa-fast-forward',
    'caret': 'fa fa-caret-down',
    'select-row': 'fa fa-fw fa-check-square-o',
    'deselect-row': 'fa fa-fw fa-square-o',
    'select-all-rows': 'fa fa-fw fa-check-square-o',
    'deselect-all-rows': 'fa fa-fw fa-square-o',
    'expand-row': 'fa fa-plus',
    'expand-all-rows': 'fa fa-plus',
    'collapse-row': 'fa fa-minus',
    'collapse-all-rows': 'fa fa-minus',
    clearFilterIcon: 'fa fa-times form-control-feedback',
    clearAllFiltersIcon: 'fa fa-times',
    sortGroupedPropertyBtn: 'btn',
    input: 'form-control',
    inputGroup: 'input-group',
    expandedRow: 'expanded-row',
    expandRow: 'expand-row md-collapsible-content',
    table: 'table table-striped table-bordered table-condensed table-hover',
    selectRowOnExpandClick: false
  });
});
;define('mdeditor/pods/components/md-title/component', ['exports', 'ember-crumbly/components/bread-crumbs', 'ember-cli-string-helpers/helpers/truncate', 'mdeditor/pods/components/md-title/template'], function (exports, _breadCrumbs, _truncate, _template) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _breadCrumbs.default.extend({
    init() {
      this._super(...arguments);

      let applicationInstance = Ember.getOwner(this);

      this.set('applicationRoute', applicationInstance.lookup('route:application'));
      this.set('classNameBindings', []);
    },
    layout: _template.default,
    tagName: '',
    title: Ember.computed('routeHierarchy', function () {
      return this.routeHierarchy.reduce((val, itm) => {
        return val + (0, _truncate.truncate)([itm.title, 28, true]) + (itm.isTail ? '' : ' | ');
      }, '');
    })
  });
});
;define("mdeditor/pods/components/md-title/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "GWCm2DKe", "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[23,[\"title\"]]]],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/md-title/template.hbs" } });
});
;define('mdeditor/pods/components/md-translate/component', ['exports', 'moment', 'mdeditor/models/setting'], function (exports, _moment, _setting) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const errorLevels = {
    'OK': 0,
    'NOTICE': 1,
    'WARNING': 2,
    'ERROR': 3
  };

  const errorClasses = ['success', 'info', 'warning', 'danger'];

  exports.default = Ember.Component.extend({
    classNames: ['row'],

    cleaner: Ember.inject.service(),
    flashMessages: Ember.inject.service(),
    mdjson: Ember.inject.service(),
    settings: Ember.inject.service(),
    ajax: Ember.inject.service(),

    /**
     * Indicates whether empty tags should be written to the translated output
     *
     * @property showAllTags
     * @type {Boolean}
     * @default "false"
     */
    showAllTags: false,

    /**
     * Indicates whether to force writer to meet the output standard
     *
     * @property forceValid
     * @type {Boolean}
     * @default "false"
     */
    forceValid: false,

    writer: null,

    writerOptions: Ember.computed(function () {
      return [{
        name: 'FGDC CSDGM',
        value: 'fgdc',
        type: 'application/xml',
        tip: 'Federal Geographic Data Committee Content Standard for Digital Geospatial Metadata'
      }, {
        name: 'HTML',
        value: 'html',
        type: 'text/html',
        tip: 'HTML "human-readable" and printable report of the metadata content'
      }, {
        name: 'ISO 19115-2',
        value: 'iso19115_2',
        type: 'application/xml',
        tip: 'International Standards Organization Geographic Information - Metadata 19115-2:2009'
      }, {
        name: 'ISO 19110',
        value: 'iso19110',
        type: 'application/xml',
        tip: 'International Standards Organization Geographic Information - Feature Catalogue 19110:2005'
      }, {
        name: 'sbJSON',
        value: 'sbJson',
        type: 'application/json',
        tip: 'USGS ScienceBase metadata format'
      }];
    }),

    result: null,
    errorLevel: null,
    errors: null,
    xhrError: null,
    isLoading: false,
    subTitle: null,

    errorClass: Ember.computed('errorLevel', 'errors', function () {
      return errorClasses[Ember.get(this, 'errorLevel')];
    }),

    errorTitle: Ember.computed('errorLevel', 'errors', function () {
      let type = ['Success', 'Notice', 'Warning', 'Error'];

      return type[Ember.get(this, 'errorLevel')];
    }),

    errorSubTitle: Ember.computed('subTitle', function () {
      let err = Ember.get(this, 'errors');

      if (err.length) {
        return Ember.get(this, 'errorTitle') + ' ocurred during translation.';
      }

      return null;
    }),
    writeObj: Ember.computed('writer', function () {
      return Ember.get(this, 'writerOptions').findBy('value', Ember.get(this, 'writer'));
    }),

    writerType: Ember.computed('writeObj', function () {
      let obj = Ember.get(this, 'writeObj');

      return obj ? obj.type.split('/')[1] : null;
    }),

    isJson: Ember.computed.equal('writerType', 'json'),
    defaultAPI: _setting.defaultValues.mdTranslatorAPI,
    apiURL: Ember.computed.or('settings.data.mdTranslatorAPI', 'defaultAPI'),
    isHtml: Ember.computed('writerType', function () {
      //IE does not supoprt srcdoc, so default to non-html display
      return Ember.get(this, 'writerType') === 'html' && 'srcdoc' in document.createElement('iframe');
    }),

    messages: Ember.computed.alias('errors'),

    _clearResult() {
      Ember.set(this, 'result', null);
      Ember.set(this, 'subtitle', null);
      Ember.set(this, 'errors', null);
      Ember.set(this, 'xhrError', null);
    },

    actions: {
      translate() {
        let mdjson = this.mdjson;
        let url = this.apiURL;
        let cmp = this;

        this._clearResult();
        Ember.set(this, 'isLoading', true);

        this.ajax.request(url, {
          type: 'POST',
          data: {
            //file: JSON.stringify(cleaner.clean(json)),
            file: mdjson.formatRecord(Ember.get(this, 'model'), true),
            reader: 'mdJson',
            writer: Ember.get(this, 'writer'),
            showAllTags: Ember.get(this, 'showAllTags'),
            forceValid: Ember.get(this, 'forceValid'),
            validate: 'normal',
            format: 'json'
          },
          context: this
        }).then(function (response) {
          Ember.set(cmp, 'isLoading', false);

          let level = Math.max(...[response.readerExecutionStatus, response.readerStructureStatus, response.readerValidationStatus, response.writerStatus].map(itm => errorLevels[itm]));

          Ember.set(cmp, 'errorLevel', level);
          Ember.set(cmp, 'errors', response.readerExecutionMessages.concat(response.readerStructureMessages, response.readerValidationMessages.length ? response.readerValidationMessages[0] : response.readerValidationMessages, response.writerMessages).map(itm => itm.split(':')));
          Ember.set(cmp, 'result', response.writerOutput);
          if (!response.success) {
            Ember.get(cmp, 'flashMessages').danger('Translation error!');
          }
        }, response => {
          let error = `mdTranslator Server error:
          ${response.status}: ${response.statusText}`;

          Ember.set(cmp, 'errorLevel', 3);
          Ember.set(cmp, 'isLoading', false);
          Ember.set(cmp, 'xhrError', error);
          Ember.get(cmp, 'flashMessages').danger(error);
        });
      },
      saveResult() {
        let title = Ember.get(this, 'model.title');
        let result = Ember.get(this, 'result');
        let writer = Ember.get(this, 'writeObj');

        window.saveAs(new Blob([result], {
          type: `${writer.type};charset=utf-8`
        }), `${title}_${(0, _moment.default)().format('YYYYMMDD')}.${Ember.get(this, 'writerType')}`);
      },
      clearResult() {
        this._clearResult();
      },
      prettifyJson() {
        let promise = new Ember.RSVP.Promise((resolve, reject) => {
          let parsed = JSON.parse(Ember.get(this, 'result'));

          if (parsed) {
            resolve(parsed);
          } else {
            reject('JSON not valid');
          }
        });

        promise.then(obj => {
          Ember.set(this, 'result', JSON.stringify(obj, null, 2));
        }).catch(error => {
          //console.log(error);
          Ember.get(this, 'flashMessages').danger(error.message);
        });
      },
      errorClass(level) {
        return errorClasses[errorLevels[level]] || 'primary';
      },
      formatMessage(message) {
        return message ? message.trim().replace(/^([A-Z]{2,})/g, match => match.toLowerCase()) : 'context not provided';
      }
    }
  });
});
;define("mdeditor/pods/components/md-translate/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ODDO/j/R", "block": "{\"symbols\":[\"message\",\"errorClass\",\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"col-md-4\"],[9],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"class\",\"spotlightEnabled\",\"block\"],[\"Options\",\"md-translator-options\",false,false]],{\"statements\":[[0,\"        \"],[7,\"form\"],[3,\"action\",[[22,0,[]],\"translate\"],[[\"on\"],[\"submit\"]]],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n                \"],[1,[27,\"input/md-select\",null,[[\"label\",\"value\",\"valuePath\",\"namePath\",\"objectArray\",\"tooltip\",\"tooltipPath\",\"searchEnabled\",\"change\"],[\"Choose Format\",[23,[\"writer\"]],\"value\",\"name\",[23,[\"writerOptions\"]],true,\"tip\",false,[27,\"action\",[[22,0,[]],\"clearResult\"],null]]]],false],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n                    \"],[7,\"label\"],[9],[0,\"Force Valid Ouput?\"],[10],[0,\"\\n                    \"],[7,\"div\"],[11,\"class\",\"form-control\"],[9],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"inline-block\"],[9],[0,\"\\n                            \"],[1,[27,\"input/md-toggle\",null,[[\"value\",\"onToggle\",\"showLabels\",\"onLabel\",\"offLabel\",\"size\",\"theme\"],[[23,[\"forceValid\"]],[27,\"action\",[[22,0,[]],[27,\"mut\",[[23,[\"forceValid\"]]],null]],null],true,\"Yes\",\"No\",\"medium\",\"form\"]]],false],[0,\"\\n                        \"],[10],[0,\"\\n                    \"],[10],[0,\"\\n                \"],[10],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n                    \"],[7,\"label\"],[9],[0,\"Show Empty Tags?\"],[10],[0,\"\\n                    \"],[7,\"div\"],[11,\"class\",\"form-control\"],[9],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"inline-block\"],[9],[0,\"\\n                            \"],[1,[27,\"input/md-toggle\",null,[[\"value\",\"onToggle\",\"showLabels\",\"onLabel\",\"offLabel\",\"size\",\"theme\"],[[23,[\"showAllTags\"]],[27,\"action\",[[22,0,[]],[27,\"mut\",[[23,[\"showAllTags\"]]],null]],null],true,\"Yes\",\"No\",\"medium\",\"form\"]]],false],[0,\"\\n                        \"],[10],[0,\"\\n                    \"],[10],[0,\"\\n                \"],[10],[0,\"\\n            \"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"card-footer\"],[9],[0,\"\\n                \"],[1,[27,\"control/md-status\",null,[[\"model\",\"isBtn\",\"bntSize\"],[[23,[\"model\"]],true,\"lg\"]]],false],[0,\"\\n                \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-primary pull-right\"],[12,\"disabled\",[27,\"if\",[[23,[\"writer\"]],false,true],null]],[11,\"type\",\"submit\"],[9],[0,\"\\n                    \"],[1,[27,\"fa-icon\",[\"retweet\"],null],false],[0,\" Translate \"],[10],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"col-md-7\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"isLoading\"]]],null,{\"statements\":[[0,\"      \"],[1,[27,\"control/md-spinner\",null,[[\"size\",\"text\"],[5,\"Translating...\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"messages\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"class\",\"scroll\",\"maximizable\",\"titleIcon\",\"spotlightEnabled\",\"collapsible\"],[[27,\"concat\",[\"Translation \",[23,[\"errorTitle\"]]],null],[27,\"concat\",[\"card-inverse card-outline-\",[23,[\"errorClass\"]],\" md-translator-error \",[23,[\"errorClass\"]]],null],false,true,\"exclamation\",false,true]],{\"statements\":[[0,\"        \"],[7,\"h4\"],[12,\"class\",[28,[\"text-\",[21,\"errorClass\"]]]],[9],[1,[21,\"errorSubTitle\"],false],[10],[0,\"\\n        \"],[7,\"ul\"],[11,\"class\",\"list-group\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"messages\"]]],null,{\"statements\":[[4,\"with\",[[27,\"compute\",[[27,\"action\",[[22,0,[]],\"errorClass\"],null],[22,1,[\"0\"]]],null]],null,{\"statements\":[[0,\"              \"],[7,\"li\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n                  \"],[7,\"h4\"],[11,\"class\",\"list-group-item-heading\"],[9],[0,\"\\n                    \"],[7,\"span\"],[12,\"class\",[28,[\"label label-\",[22,2,[]]]]],[9],[1,[22,1,[\"0\"]],false],[10],[0,\"\\n                    \"],[1,[22,1,[\"2\"]],false],[0,\"\\n                  \"],[10],[0,\"\\n                \"],[10],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n                  \"],[7,\"span\"],[12,\"class\",[28,[\"label label-pill \",[27,\"if\",[[22,1,[\"3\"]],\"label-primary\",\"label-default\"],null]]]],[9],[1,[22,1,[\"1\"]],false],[10],[0,\"\\n                  \"],[1,[27,\"compute\",[[27,\"action\",[[22,0,[]],\"formatMessage\",[22,1,[\"3\"]]],null]],null],false],[0,\"\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[1]},null],[0,\"        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"xhrError\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"spotlightEnabled\",\"class\",\"scroll\",\"maximizable\",\"titleIcon\"],[\"mdTranslator Error\",false,\"card-inverse card-outline-danger md-translator-error danger\",false,true,\"exclamation\"]],{\"statements\":[[0,\"        \"],[7,\"p\"],[9],[1,[21,\"xhrError\"],false],[10],[0,\"\\n        \"],[7,\"p\"],[9],[0,\"An error occurred during the translation. The incident has been\\n        logged. If the problem persists, please contact techincal support.\"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"result\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"class\",\"scroll\",\"maximizable\",\"titleIcon\",\"spotlightEnabled\"],[\"Result\",[27,\"if\",[[23,[\"messages\"]],[27,\"concat\",[\"card-inverse card-outline-\",[23,[\"errorClass\"]],\" md-translator-error \",[23,[\"errorClass\"]],\" md-translator-preview\"],null],\"md-translator-preview\"],null],false,true,\"check\",false]],{\"statements\":[[4,\"if\",[[23,[\"isHtml\"]]],null,{\"statements\":[[0,\"          \"],[7,\"iframe\"],[12,\"srcdoc\",[21,\"result\"]],[11,\"sandbox\",\"allow-scripts\"],[11,\"width\",\"100%\"],[11,\"height\",\"100%\"],[9],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"          \"],[1,[27,\"input/md-textarea\",null,[[\"rows\",\"class\",\"placeholder\",\"value\"],[20,\"md-translator-area\",\"\",[23,[\"result\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"card-footer text-right\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"isJson\"]]],null,{\"statements\":[[0,\"              \"],[1,[27,\"control/md-json-button\",null,[[\"class\",\"json\",\"disabled\"],[\"btn-lg btn-primary\",[23,[\"result\"]],[27,\"if\",[[23,[\"result\"]],false,true],null]]]],false],[0,\"\\n\\n              \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-primary\"],[12,\"disabled\",[27,\"if\",[[23,[\"result\"]],false,true],null]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"prettifyJson\"]],[9],[0,\"\\n              \"],[1,[27,\"fa-icon\",[\"align-left\"],null],false],[0,\" Format \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n              \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-success\"],[12,\"disabled\",[27,\"if\",[[23,[\"result\"]],false,true],null]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"saveResult\"]],[9],[0,\"\\n              \"],[1,[27,\"fa-icon\",[\"floppy-o\"],null],false],[0,\" Save Result \"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[10],[0,\"\\n\"],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/md-translate/template.hbs" } });
});
;define("mdeditor/pods/components/models-table/cell-content-display/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "kDTFdjHr", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"column\",\"truncate\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"word-limit\",[[27,\"get\",[[23,[\"record\"]],[23,[\"column\",\"propertyName\"]]],null]],[[\"limit\",\"wordLength\"],[[23,[\"column\",\"wordLimit\"]],[23,[\"column\",\"wordLength\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"column\",\"break\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"word-break-all inline-block\"],[9],[0,\"\\n    \"],[1,[27,\"get\",[[23,[\"record\"]],[23,[\"column\",\"propertyName\"]]],null],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[1,[27,\"get\",[[23,[\"record\"]],[23,[\"column\",\"propertyName\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/models-table/cell-content-display/template.hbs" } });
});
;define("mdeditor/pods/components/models-table/row-expand/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "0RG9k3ku", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"td\"],[12,\"colspan\",[23,[\"visibleProcessedColumns\",\"length\"]]],[9],[0,\"\\n\"],[4,\"if\",[[24,1]],null,{\"statements\":[[0,\"    \"],[14,1,[[27,\"hash\",null,[[\"expandedRowComponent\",\"record\",\"visibleProcessedColumns\",\"index\",\"clickOnRow\",\"sendAction\",\"themeInstance\",\"expandRow\",\"collapseRow\"],[[23,[\"expandedRowComponent\"]],[23,[\"record\"]],[23,[\"visibleProcessedColumns\"]],[23,[\"index\"]],[23,[\"clickOnRow\"]],[23,[\"sendAction\"]],[23,[\"themeInstance\"]],[23,[\"expandRow\"]],[23,[\"collapseRow\"]]]]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[1,[27,\"component\",[[23,[\"expandedRowComponent\"]]],[[\"record\",\"visibleProcessedColumns\",\"index\",\"clickOnRow\",\"sendAction\",\"themeInstance\",\"expandRow\",\"collapseRow\"],[[23,[\"record\"]],[23,[\"visibleProcessedColumns\"]],[23,[\"index\"]],[23,[\"clickOnRow\"]],[23,[\"sendAction\"]],[23,[\"themeInstance\"]],[23,[\"expandRow\"]],[23,[\"collapseRow\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/models-table/row-expand/template.hbs" } });
});
;define('mdeditor/pods/components/models-table/table-body/component', ['exports', 'ember-models-table/components/models-table/table-body'], function (exports, _tableBody) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _tableBody.default.extend({
    actions: {
      clickOnRowExpand(index, record) {
        if (this.themeInstance.selectRowOnExpandClick) {
          this.clickOnRow(index, record);
        }
      }
    }
  });
});
;define("mdeditor/pods/components/models-table/table-body/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VWwBwZkT", "block": "{\"symbols\":[\"tb\",\"record\",\"index\",\"groupedValue\",\"groupedIndex\",\"groupedItems\",\"gi\",\"row-gr\",\"record\",\"index\",\"&default\"],\"statements\":[[4,\"with\",[[27,\"hash\",null,[[\"columns-hidden\",\"row\",\"row-expand\",\"no-data\",\"row-grouping\",\"allColumnsAreHidden\",\"visibleContent\",\"visibleProcessedColumns\",\"expandedItems\",\"groupedVisibleContentValuesOrder\",\"toggleGroupedRowsSelection\",\"toggleGroupedRowsExpands\",\"groupedVisibleContent\",\"useDataGrouping\",\"sendAction\",\"themeInstance\"],[[27,\"component\",[[23,[\"themeInstance\",\"components\",\"columns-hidden\"]]],[[\"columnsCount\",\"sendAction\",\"themeInstance\"],[[23,[\"columnsCount\"]],[23,[\"sendAction\"]],[23,[\"themeInstance\"]]]]],[27,\"component\",[[23,[\"themeInstance\",\"components\",\"row\"]]],[[\"visibleProcessedColumns\",\"groupingRowComponent\",\"collapsedGroupValues\",\"currentGroupingPropertyName\",\"clickOnRow\",\"doubleClickOnRow\",\"hoverOnRow\",\"outRow\",\"sendAction\",\"expandRow\",\"collapseRow\",\"expandAllRows\",\"collapseAllRows\",\"themeInstance\",\"selectedItems\",\"expandedItems\",\"displayGroupedValueAs\",\"toggleGroupedRows\",\"toggleGroupedRowsSelection\",\"toggleGroupedRowsExpands\"],[[23,[\"visibleProcessedColumns\"]],[23,[\"groupingRowComponent\"]],[23,[\"collapsedGroupValues\"]],[23,[\"currentGroupingPropertyName\"]],[23,[\"clickOnRow\"]],[23,[\"doubleClickOnRow\"]],[23,[\"hoverOnRow\"]],[23,[\"outRow\"]],[23,[\"sendAction\"]],[23,[\"expandRow\"]],[23,[\"collapseRow\"]],[23,[\"expandAllRows\"]],[23,[\"collapseAllRows\"]],[23,[\"themeInstance\"]],[23,[\"selectedItems\"]],[23,[\"expandedItems\"]],[23,[\"displayGroupedValueAs\"]],[23,[\"toggleGroupedRows\"]],[23,[\"toggleGroupedRowsSelection\"]],[23,[\"toggleGroupedRowsExpands\"]]]]],[27,\"component\",[[23,[\"themeInstance\",\"components\",\"row-expand\"]]],[[\"expandedRowComponent\",\"selectedItems\",\"processedColumns\",\"visibleProcessedColumns\",\"clickOnRow\",\"sendAction\",\"themeInstance\",\"expandRow\",\"collapseRow\"],[[23,[\"expandedRowComponent\"]],[23,[\"selectedItems\"]],[23,[\"processedColumns\"]],[23,[\"visibleProcessedColumns\"]],[27,\"action\",[[22,0,[]],\"clickOnRowExpand\"],null],[23,[\"sendAction\"]],[23,[\"themeInstance\"]],[23,[\"expandRow\"]],[23,[\"collapseRow\"]]]]],[27,\"component\",[[23,[\"themeInstance\",\"components\",\"no-data\"]]],[[\"columnsCount\",\"displayGroupedValueAs\",\"sendAction\",\"themeInstance\"],[[23,[\"visibleProcessedColumns\",\"length\"]],[23,[\"displayGroupedValueAs\"]],[23,[\"sendAction\"]],[23,[\"themeInstance\"]]]]],[27,\"component\",[[23,[\"themeInstance\",\"components\",\"row-grouping\"]]],[[\"groupingRowComponent\",\"currentGroupingPropertyName\",\"visibleProcessedColumns\",\"toggleGroupedRows\",\"displayGroupedValueAs\",\"toggleGroupedRowsSelection\",\"toggleGroupedRowsExpands\",\"themeInstance\",\"sendAction\"],[[23,[\"groupingRowComponent\"]],[23,[\"currentGroupingPropertyName\"]],[23,[\"visibleProcessedColumns\"]],[23,[\"toggleGroupedRows\"]],[23,[\"displayGroupedValueAs\"]],[23,[\"toggleGroupedRowsSelection\"]],[23,[\"toggleGroupedRowsExpands\"]],[23,[\"themeInstance\"]],[23,[\"sendAction\"]]]]],[23,[\"allColumnsAreHidden\"]],[23,[\"visibleContent\"]],[23,[\"visibleProcessedColumns\"]],[23,[\"expandedItems\"]],[23,[\"groupedVisibleContentValuesOrder\"]],[23,[\"toggleGroupedRowsSelection\"]],[23,[\"toggleGroupedRowsExpands\"]],[23,[\"groupedVisibleContent\"]],[23,[\"useDataGrouping\"]],[23,[\"sendAction\"]],[23,[\"themeInstance\"]]]]]],null,{\"statements\":[[4,\"if\",[[24,11]],null,{\"statements\":[[0,\"    \"],[14,11,[[22,1,[]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"allColumnsAreHidden\"]]],null,{\"statements\":[[0,\"      \"],[1,[27,\"component\",[[22,1,[\"columns-hidden\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"useDataGrouping\"]]],null,{\"statements\":[[4,\"each\",[[23,[\"groupedVisibleContentValuesOrder\"]]],null,{\"statements\":[[4,\"with\",[[27,\"filter-by\",[[23,[\"currentGroupingPropertyName\"]],[22,4,[]],[23,[\"groupedArrangedContent\"]]],null]],null,{\"statements\":[[4,\"with\",[[27,\"hash\",null,[[\"selectedGroupedItems\",\"expandedGroupedItems\",\"visibleGroupedItems\"],[[27,\"intersect\",[[23,[\"selectedItems\"]],[22,6,[]]],null],[27,\"intersect\",[[23,[\"expandedItems\"]],[22,6,[]]],null],[27,\"object-at\",[[22,5,[]],[23,[\"groupedVisibleContent\"]]],null]]]]],null,{\"statements\":[[4,\"with\",[[27,\"component\",[[22,1,[\"row-grouping\"]]],[[\"groupedValue\",\"groupedLength\",\"groupedItems\",\"visibleGroupedItems\",\"selectedGroupedItems\",\"expandedGroupedItems\"],[[22,4,[]],[22,6,[\"length\"]],[22,6,[]],[22,7,[\"visibleGroupedItems\"]],[22,7,[\"selectedGroupedItems\"]],[22,7,[\"expandedGroupedItems\"]]]]]],null,{\"statements\":[[4,\"if\",[[27,\"is-equal\",[[23,[\"displayGroupedValueAs\"]],\"row\"],null]],null,{\"statements\":[[0,\"                  \"],[1,[27,\"component\",[[22,8,[]]],[[\"groupIsCollapsed\",\"visibleGroupedLength\"],[[27,\"exists-in\",[[23,[\"collapsedGroupValues\"]],[22,4,[]]],null],[22,7,[\"visibleGroupedItems\",\"length\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[27,\"exists-in\",[[23,[\"collapsedGroupValues\"]],[22,4,[]]],null]],null,{\"statements\":[[4,\"if\",[[27,\"is-equal\",[[23,[\"displayGroupedValueAs\"]],\"column\"],null]],null,{\"statements\":[[0,\"                    \"],[1,[27,\"component\",[[22,8,[]]],[[\"groupIsCollapsed\",\"visibleGroupedLength\"],[true,[22,7,[\"visibleGroupedItems\",\"length\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[4,\"each\",[[22,7,[\"visibleGroupedItems\"]]],null,{\"statements\":[[0,\"                    \"],[1,[27,\"component\",[[22,1,[\"row\"]]],[[\"record\",\"index\",\"groupedValue\",\"groupedLength\",\"groupedItems\",\"groupSummaryRowComponent\",\"visibleGroupedItems\",\"selectedGroupedItems\",\"expandedGroupedItems\",\"isFirstGroupedRow\",\"expandedGroupItemsCount\",\"isSelected\",\"isExpanded\"],[[22,9,[]],[22,10,[]],[22,4,[]],[22,6,[\"length\"]],[22,6,[]],[23,[\"groupSummaryRowComponent\"]],[22,7,[\"visibleGroupedItems\"]],[22,7,[\"selectedGroupedItems\"]],[22,7,[\"expandedGroupedItems\"]],[27,\"is-equal\",[[22,10,[]],0],null],[27,\"get\",[[27,\"intersect\",[[23,[\"expandedItems\"]],[22,7,[\"visibleGroupedItems\"]]],null],\"length\"],null],[27,\"exists-in\",[[23,[\"selectedItems\"]],[22,9,[]]],null],[27,\"exists-in\",[[23,[\"expandedItems\"]],[22,9,[]]],null]]]],false],[0,\"\\n\"],[4,\"if\",[[27,\"exists-in\",[[23,[\"expandedItems\"]],[22,9,[]]],null]],null,{\"statements\":[[0,\"                      \"],[1,[27,\"component\",[[22,1,[\"row-expand\"]]],[[\"record\",\"index\",\"isSelected\"],[[22,9,[]],[22,10,[]],[27,\"exists-in\",[[23,[\"selectedItems\"]],[22,9,[]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[9,10]},null],[4,\"if\",[[23,[\"groupSummaryRowComponent\"]]],null,{\"statements\":[[0,\"                    \"],[1,[27,\"component\",[[23,[\"groupSummaryRowComponent\"]]],[[\"visibleProcessedColumns\",\"sendAction\",\"themeInstance\",\"groupedItems\",\"visibleGroupedItems\",\"selectedGroupedItems\",\"expandedGroupedItems\"],[[23,[\"visibleProcessedColumns\"]],[23,[\"sendAction\"]],[23,[\"themeInstance\"]],[22,6,[]],[22,7,[\"visibleGroupedItems\"]],[22,7,[\"selectedGroupedItems\"]],[22,7,[\"expandedGroupedItems\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"parameters\":[8]},null]],\"parameters\":[7]},null]],\"parameters\":[6]},null]],\"parameters\":[4,5]},{\"statements\":[[0,\"          \"],[1,[27,\"component\",[[22,1,[\"no-data\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"each\",[[23,[\"visibleContent\"]]],null,{\"statements\":[[0,\"          \"],[1,[27,\"component\",[[22,1,[\"row\"]]],[[\"record\",\"index\",\"isSelected\",\"isExpanded\"],[[22,2,[]],[22,3,[]],[27,\"exists-in\",[[23,[\"selectedItems\"]],[22,2,[]]],null],[27,\"exists-in\",[[23,[\"expandedItems\"]],[22,2,[]]],null]]]],false],[0,\"\\n\"],[4,\"if\",[[27,\"exists-in\",[[23,[\"expandedItems\"]],[22,2,[]]],null]],null,{\"statements\":[[0,\"            \"],[1,[27,\"component\",[[22,1,[\"row-expand\"]]],[[\"expandedRowComponent\",\"record\",\"index\",\"isSelected\"],[[23,[\"expandedRowComponent\"]],[22,2,[]],[22,3,[]],[27,\"exists-in\",[[23,[\"selectedItems\"]],[22,2,[]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[2,3]},{\"statements\":[[0,\"          \"],[1,[27,\"component\",[[22,1,[\"no-data\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/models-table/table-body/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-address/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * mdEditor class for input and edit of mdJSON 'address' object
     * arrays. The class manages the maintenance of an array of address
     * objects using the md-object-table class.
     *
     * @class md-address
     * @constructor
     * @requires md-object-table
     */

    attributeBindings: ['data-spy'],

    /**
     * mdJSON object containing the 'address' array.
     *
     * @property model
     * @type Object
     * @required
     */

    /**
     * List of mdJSON 'address' object attributes to display in
     * md-object-table to aid in choosing the address to edit or
     * delete.
     * The property is passed to md-object-table for configuration.
     *
     * @property attributes
     * @type String
     * @default ''
     */
    attributes: '',

    /**
     * Name to place on the mdEditor panel header for entry and edit of
     * 'address' objects.
     * The property is passed to md-object-table for configuration.
     *
     * @property label
     * @type String
     * @default 'Address'
     */
    label: 'Address',

    templateClass: Ember.Object.extend({
      init() {
        this._super(...arguments);

        this.set('addressType', Ember.A());
        this.set('deliveryPoint', Ember.A());
      }
    })
  });
});
;define('mdeditor/pods/components/object/md-address/md-address-block/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});
;define("mdeditor/pods/components/object/md-address/md-address-block/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "IZFjbbeN", "block": "{\"symbols\":[\"dp\"],\"statements\":[[7,\"address\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"item\",\"deliveryPoint\"]]],null,{\"statements\":[[0,\"    \"],[1,[22,1,[]],false],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"  \"],[1,[23,[\"item\",\"city\"]],false],[0,\", \"],[1,[23,[\"item\",\"administrativeArea\"]],false],[0,\" \"],[1,[23,[\"item\",\"postalCode\"]],false],[0,\"\\n  \"],[1,[23,[\"item\",\"country\"]],false],[7,\"br\"],[9],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"item\",\"addressType\"]]],null,{\"statements\":[[0,\"    \"],[7,\"strong\"],[9],[1,[27,\"join\",[\", \",[23,[\"item\",\"addressType\"]]],null],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-address/md-address-block/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-address/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Xqnw0Xez", "block": "{\"symbols\":[\"address\",\"line\",\"&default\"],\"statements\":[[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"buttonText\",\"previewTemplate\",\"templateClass\",\"attributes\"],[[23,[\"model\"]],[23,[\"label\"]],\"Add Address\",\"object/md-address/md-address-block\",[23,[\"templateClass\"]],[23,[\"attributes\"]]]],{\"statements\":[[0,\"\\n\"],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n    \"],[7,\"label\"],[11,\"class\",\"required\"],[9],[0,\"Address Type\"],[10],[0,\"\\n    \"],[1,[27,\"input/md-codelist-multi\",null,[[\"model\",\"path\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"required\",\"showValidations\",\"placeholder\"],[[22,1,[]],\"addressType\",true,true,false,\"addressType\",true,true,\"Select or enter one or more types\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[4,\"object/md-simple-array-table\",null,[[\"title\",\"required\",\"plain\",\"value\"],[\"Street Line\",false,true,[22,1,[\"deliveryPoint\"]]]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"value\"]],\"Enter street address\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"class\",\"placeholder\",\"label\"],[[22,1,[\"city\"]],\"col-md-6\",\"City Name\",\"City\"]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"class\",\"placeholder\",\"label\"],[[22,1,[\"administrativeArea\"]],\"col-md-6\",\"State or Province\",\"State/Province\"]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"class\",\"placeholder\",\"label\"],[[22,1,[\"postalCode\"]],\"col-md-6\",\"Zip or Postal Code\",\"Postal Code\"]]],false],[0,\"\\n\\n\"],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"form-group col-md-6\"],[9],[0,\"\\n        \"],[7,\"label\"],[9],[0,\"Country\"],[10],[0,\"\\n        \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"namePath\",\"tooltipPath\",\"width\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"placeholder\"],[[22,1,[\"country\"]],\"description\",\"codeName\",\"175px\",false,true,false,\"countries\",\"Enter a country code\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\",\"label\"],[[22,1,[\"description\"]],\"Address description\",\"Description\"]]],false],[0,\"\\n\\n\"]],\"parameters\":[1]},null],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-address/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-allocation/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'amount': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'currency': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'currency', Ember.getWithDefault(model, 'currency', 'USD'));
        Ember.set(model, 'onlineResource', Ember.getWithDefault(model, 'onlineResource', []));
        Ember.set(model, 'responsibleParty', Ember.getWithDefault(model, 'responsibleParty', []));
      });
    },
    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    attributeBindings: ['data-spy'],
    'data-spy': 'Allocation',
    tagName: 'form',
    amount: Ember.computed.alias('model.amount'),
    currency: Ember.computed.alias('model.currency')
  });
});
;define("mdeditor/pods/components/object/md-allocation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "pZCnJYPJ", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"plain\"],[false,false,true]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"label\"],[11,\"class\",\"text-info col-md-2 col-xxl-1 required\"],[9],[0,\"Amount\"],[10],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"class\",\"type\",\"model\",\"valuePath\",\"step\",\"label\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"col-md-5 col-xxl-3\",\"number\",[22,0,[]],\"amount\",\"0.01\",\"Amount\",\"Enter amount for the allocation.\",[27,\"concat\",[[23,[\"profilePath\"]],\".amount\"],null],true]]],false],[0,\"\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"create\",\"model\",\"class\",\"mdCodeName\",\"namePath\",\"valuePath\",\"path\",\"label\",\"required\",\"tooltip\",\"icon\",\"allowClear\",\"placeholder\",\"profilePath\"],[false,[22,0,[]],\"col-md-5 col-xxl-3\",\"currency\",\"codeName\",\"codeName\",\"currency\",\"Currency\",true,true,false,true,\"Choose unit of currency\",[27,\"concat\",[[23,[\"profilePath\"]],\".currency\"],null]]]],false],[0,\"\\n  \"],[10],[0,\"\\n\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"placeholder\",\"profilePath\"],[[23,[\"model\",\"sourceAllocationId\"]],\"Award ID\",\"The source's identifier for the allocation, e.g. award number.\",[27,\"concat\",[[23,[\"profilePath\"]],\".sourceAllocationId\"],null]]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-select-contact\",null,[[\"label\",\"placeholder\",\"value\",\"contactType\",\"icon\",\"tooltip\",\"profilePath\"],[\"Source\",\"Pick contact that supplied funds\",[23,[\"model\",\"sourceId\"]],\"contacts\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".sourceId\"],null]]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-select-contact\",null,[[\"label\",\"placeholder\",\"value\",\"contactType\",\"icon\",\"tooltip\",\"profilePath\"],[\"Recipient\",\"Pick contact that received funds\",[23,[\"model\",\"recipientId\"]],\"contacts\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".recipientId\"],null]]]],false],[0,\"\\n\\n  \"],[1,[27,\"object/md-party-array\",null,[[\"title\",\"plain\",\"required\",\"value\",\"profilePath\"],[\"Other Contacts\",false,false,[23,[\"model\",\"responsibleParty\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".responsibleParty\"],null]]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-boolean\",null,[[\"label\",\"text\",\"value\",\"profilePath\"],[\"Matching\",\"Matching funds or in-kind services\",[23,[\"model\",\"matching\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".matching\"],null]]]],false],[0,\"\\n\\n \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\"],[[23,[\"model\",\"comment\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".description\"],null],\"Comment\",\"Enter any comments about the allocation.\"]]],false],[0,\"\\n\\n\"],[4,\"if\",[[27,\"is-array\",[[23,[\"model\",\"onlineResource\"]]],null]],null,{\"statements\":[[0,\"    \"],[1,[27,\"object/md-online-resource-array\",null,[[\"model\",\"profilePath\",\"class\",\"plain\",\"shadow\",\"data-spy\"],[[23,[\"model\",\"onlineResource\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".onlineResource\"],null],[27,\"if\",[[23,[\"embedded\"]],\"md-embedded\"],null],true,false,\"Online Resource\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-allocation/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-array-table/component', ['exports', 'mdeditor/mixins/object-template'], function (exports, _objectTemplate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend(_objectTemplate.default, {
    /**
     * mdEditor class for input and edit of arrays of objects. The
     * component is rendered as an editable table.
     *
     * @class md-array-table
     * @constructor
     * @uses object-template
     */

    didReceiveAttrs() {
      this._super(...arguments);

      if (this.value) {
        this.applyTemplateArray('value');
      }
    },

    attributeBindings: ['data-spy'],

    /**
     * The array to render in the template
     *
     * @property value
     * @type {Array}
     * @default Ember.A()
     * @required
     */
    value: Ember.A(),

    /**
     * The template class to use for new items. This should be a constructor.
     * Objects should be created by extending Ember.Object.
     *  ```javascript
     *  Ember.Object.extend({
     *   foo: null,
     *   bar: Ember.A()
     *  }
     *  ```
     *
     * @property templateClass
     * @type {Any}
     * @constructor
     * @default null
     * @required
     */
    templateClass: null,

    /**
     * Comma-separated list of column headers to display in the table. If not
     * provided, the table header will not be created.
     *
     * @property columns
     * @type String
     */

    /**
     * Inital collapse state fo the panel.
     *
     * @property isCollapsed
     * @type {Boolean}
     * @default undefined
     */

    /**
     * The validation to apply to the array items.
     *
     * @property validation
     * @type {Ember.Mixin}
     * @default undefined
     */

    /**
     * Whether to render in a panel.
     *
     * @property plain
     * @type {Boolean}
     * @default false
     */
    plain: false,

    /**
     * Indicates whether at least one item is required is required in the value
     * array.
     *
     * @property required
     * @type {Boolean}
     * @default false
     */
    required: false,

    /**
     * The title for the panel. Should be in singular form.
     *
     * @property title
     * @type {String}
     * @default Item
     */
    title: 'Item',

    /**
     * The data-spy text. Defaults to the title.
     *
     * @property data-spy
     * @type {String}
     * @default "this.title"
     * @category computed
     */
    'data-spy': Ember.computed.oneWay('title'),

    /**
     * Array of column headers
     *
     * @property columnArray
     * @type {Array}
     * @readOnly
     * @category computed
     * @requires columns
     */
    columnArray: Ember.computed('columns', function () {
      let columns = this.columns;

      return typeof columns === 'string' ? columns.split(',') : null;
    }),

    /**
     * Uses isCollapsed if defined, otherwise inspects array length.
     *
     * @property collapsed
     * @type {Boolean}
     * @readOnly
     * @category computed
     * @requires isCollapsed
     */
    collapsed: Ember.computed('isCollapsed', 'value.[]', function () {
      let isCollapsed = this.isCollapsed;
      let value = this.value;

      if (isCollapsed !== undefined) {
        return isCollapsed;
      } else if (Ember.isArray(value) && Ember.get(value, 'length') > 0) {
        return false;
      } else {
        return true;
      }
    }),

    /**
     * Alias for values
     *
     * @property arrayValues
     * @type {Array}
     * @readOnly
     * @category computed
     * @requires value
     */
    arrayValues: Ember.computed.alias('value'),

    /**
     * The panel id selector
     *
     * @property panelId
     * @type {String}
     * @default "panel-{this.elementId}"
     * @readOnly
     * @category computed
     * @requires elementId
     */
    panelId: Ember.computed('elementId', function () {
      return 'panel-' + this.elementId;
    }),

    /**
     * The color of the counter displayed in the panel header
     *
     * @property pillColor
     * @type {String}
     * @readOnly
     * @category computed
     * @requires value.[]
     */
    pillColor: Ember.computed('value.[]', 'required', function () {
      let count = this.get('value.length') || 0;
      let required = this.required;
      return count === 0 ? required ? 'label-danger' : 'label-warning' : 'label-info';
    }),

    onChange() {},
    /**
     * Focus the added row, or the last row on deletion.
     *
     * @method valueChanged
     * @return none
     */
    valueChanged() {
      Ember.run.schedule('afterRender', this, function () {
        let panel = this.$('.panel-collapse');
        let input = this.$('.panel-collapse tbody tr:last-of-type input').first();

        if (panel.hasClass('in')) {
          input.focus();
        } else {
          //add a one-time listener to wait until panel is open
          panel.one('shown.bs.collapse', function () {
            input.focus();
          });
          panel.collapse('show');
        }
      });

      this.onChange();
    },

    actions: {
      addItem: function addItem(value) {
        const Template = this.templateClass;
        const owner = Ember.getOwner(this);

        value.pushObject(Ember.typeOf(Template) === 'class' ? Template.create(owner.ownerInjection()) : this.templateAsObject ? {} : null);
        this.valueChanged();
      },

      deleteItem: function deleteItem(value, idx) {
        if (value.length > idx) {
          value.removeAt(idx);
        }
        this.valueChanged();
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-array-table/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "BHjM2Mry", "block": "{\"symbols\":[\"item\",\"index\",\"prop\",\"item\",\"index\",\"prop\",\"&default\"],\"statements\":[[4,\"if\",[[23,[\"plain\"]]],null,{\"statements\":[[0,\"  \"],[7,\"label\"],[11,\"class\",\"show\"],[9],[0,\"\\n      \"],[7,\"span\"],[11,\"class\",\"fa\"],[9],[10],[0,\" \"],[1,[27,\"unless\",[[23,[\"pluralTitle\"]],[27,\"pluralize\",[[23,[\"title\"]]],null],[23,[\"pluralTitle\"]]],null],false],[0,\"\\n      \"],[7,\"div\"],[12,\"class\",[28,[\"label label-pill \",[21,\"pillColor\"]]]],[9],[0,\" \"],[1,[23,[\"value\",\"length\"]],false],[0,\" \"],[10],[0,\"\\n      \"],[7,\"button\"],[12,\"id\",[28,[[21,\"panelId\"],\"-btn\"]]],[11,\"class\",\"btn btn-xs btn-info pull-right\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addItem\",[23,[\"value\"]]]],[9],[0,\"\\n          \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add \"],[1,[21,\"title\"],false],[0,\"\\n      \"],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[12,\"class\",[27,\"if\",[[23,[\"responsive\"]],\"table-responsive\"],null]],[9],[0,\"\\n\"],[0,\"  \"],[7,\"table\"],[11,\"class\",\"table table-striped table-hover\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"columnArray\"]]],null,{\"statements\":[[0,\"          \"],[7,\"thead\"],[9],[0,\"\\n            \"],[7,\"tr\"],[9],[0,\"\\n\"],[4,\"unless\",[[23,[\"hideIndex\"]]],null,{\"statements\":[[0,\"              \"],[7,\"th\"],[9],[0,\"#\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[23,[\"columnArray\"]]],null,{\"statements\":[[0,\"              \"],[7,\"th\"],[9],[1,[27,\"uc-words\",[[22,6,[]]],null],false],[10],[0,\"\\n\"]],\"parameters\":[6]},null],[0,\"              \"],[7,\"th\"],[9],[10],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"arrayValues\"]]],null,{\"statements\":[[0,\"              \"],[7,\"tr\"],[9],[0,\"\\n\"],[4,\"unless\",[[23,[\"hideIndex\"]]],null,{\"statements\":[[0,\"                  \"],[7,\"td\"],[9],[1,[22,5,[]],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                  \"],[14,7,[[27,\"hash\",null,[[\"item\",\"index\"],[[22,4,[]],[22,5,[]]]]]]],[0,\"\\n                  \"],[7,\"td\"],[9],[0,\"\\n                      \"],[7,\"div\"],[11,\"class\",\"md-button-column\"],[9],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"disabled\",\"onConfirm\"],[\"btn btn-xs btn-danger\",[27,\"if\",[[23,[\"simple\"]],[27,\"if\",[[22,4,[\"value\"]],null,\"disabled\"],null]],null],[27,\"action\",[[22,0,[]],\"deleteItem\",[23,[\"value\"]],[22,5,[]]],null]]],{\"statements\":[[0,\"                            \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete\\n\"]],\"parameters\":[]},null],[0,\"                      \"],[10],[0,\"\\n                  \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[4,5]},{\"statements\":[[0,\"          \"],[7,\"tr\"],[9],[0,\"\\n              \"],[7,\"td\"],[12,\"colspan\",[27,\"add-em\",[[27,\"if\",[[23,[\"hideIndex\"]],1,2],null],[23,[\"columnArray\",\"length\"]]],null]],[9],[0,\"\\n                  \"],[7,\"button\"],[12,\"id\",[28,[[21,\"panelId\"],\"-btn\"]]],[11,\"class\",\"btn btn-xs btn-info\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addItem\",[23,[\"value\"]]]],[9],[0,\"\\n                      \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add \"],[1,[21,\"title\"],false],[0,\"\\n                  \"],[10],[0,\"\\n              \"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"panel panel-default box-shadow--4dp\"],[9],[0,\"\\n\\n        \"],[7,\"div\"],[11,\"class\",\"panel-heading\"],[9],[0,\"\\n            \"],[7,\"h3\"],[11,\"class\",\"panel-title md-panel-chevron\"],[9],[0,\"\\n                \"],[7,\"a\"],[11,\"data-toggle\",\"collapse\"],[12,\"aria-expanded\",[27,\"if\",[[23,[\"collapsed\"]],\"false\",\"true\"],null]],[12,\"class\",[27,\"if\",[[23,[\"collapsed\"]],\"collapsed\"],null]],[12,\"href\",[28,[\"#\",[21,\"panelId\"]]]],[12,\"aria-controls\",[28,[\"#\",[21,\"panelId\"]]]],[9],[0,\"\\n                    \"],[7,\"span\"],[11,\"class\",\"fa\"],[9],[10],[0,\" \"],[1,[27,\"unless\",[[23,[\"pluralTitle\"]],[27,\"pluralize\",[[23,[\"title\"]]],null],[23,[\"pluralTitle\"]]],null],false],[0,\"\\n                    \"],[7,\"div\"],[12,\"class\",[28,[\"label label-pill \",[21,\"pillColor\"]]]],[9],[0,\" \"],[1,[23,[\"value\",\"length\"]],false],[0,\" \"],[10],[0,\"\\n                \"],[10],[0,\"\\n                \"],[7,\"button\"],[12,\"id\",[28,[[21,\"panelId\"],\"-btn\"]]],[11,\"class\",\"btn btn-xs btn-info pull-right\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addItem\",[23,[\"value\"]]]],[9],[0,\"\\n                    \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add\\n                \"],[10],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\\n        \"],[7,\"div\"],[12,\"id\",[21,\"panelId\"]],[12,\"class\",[28,[\"panel-collapse \",[27,\"if\",[[23,[\"collapsed\"]],\"collapse\",\"in\"],null]]]],[9],[0,\"\\n            \"],[7,\"div\"],[12,\"class\",[28,[\"panel-body \",[27,\"if\",[[23,[\"responsive\"]],\"table-responsive\"],null]]]],[9],[0,\"\\n\"],[0,\"                \"],[7,\"table\"],[11,\"class\",\"table table-striped table-hover fadeIn\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"columnArray\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"thead\"],[9],[0,\"\\n                          \"],[7,\"tr\"],[9],[0,\"\\n\"],[4,\"unless\",[[23,[\"hideIndex\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"th\"],[9],[0,\"#\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[23,[\"columnArray\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"th\"],[9],[1,[27,\"uc-words\",[[22,3,[]]],null],false],[10],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"                            \"],[7,\"th\"],[9],[10],[0,\"\\n                          \"],[10],[0,\"\\n                        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"arrayValues\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"tr\"],[9],[0,\"\\n\"],[4,\"unless\",[[23,[\"hideIndex\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"td\"],[9],[1,[22,2,[]],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                                \"],[14,7,[[27,\"hash\",null,[[\"item\",\"index\"],[[22,1,[]],[22,2,[]]]]]]],[0,\"\\n                                \"],[7,\"td\"],[9],[0,\"\\n                                    \"],[7,\"div\"],[11,\"class\",\"md-button-column\"],[9],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"disabled\",\"onConfirm\"],[\"btn btn-xs btn-danger\",[27,\"if\",[[23,[\"simple\"]],[27,\"if\",[[22,1,[\"value\"]],null,\"disabled\"],null]],null],[27,\"action\",[[22,0,[]],\"deleteItem\",[23,[\"value\"]],[22,2,[]]],null]]],{\"statements\":[[0,\"                                          \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete\\n\"]],\"parameters\":[]},null],[0,\"                                    \"],[10],[0,\"\\n                                \"],[10],[0,\"\\n                            \"],[10],[0,\"\\n\"]],\"parameters\":[1,2]},{\"statements\":[[0,\"                        \"],[7,\"tr\"],[9],[0,\"\\n                            \"],[7,\"td\"],[12,\"colspan\",[27,\"add-em\",[[27,\"if\",[[23,[\"hideIndex\"]],1,2],null],[23,[\"columnArray\",\"length\"]]],null]],[9],[0,\"\\n                                \"],[7,\"button\"],[12,\"id\",[28,[[21,\"panelId\"],\"-btn\"]]],[11,\"class\",\"btn btn-xs btn-info\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addItem\",[23,[\"value\"]]]],[9],[0,\"\\n                                    \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add \"],[1,[21,\"title\"],false],[0,\"\\n                                \"],[10],[0,\"\\n                            \"],[10],[0,\"\\n                        \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    \"],[10],[0,\"\\n                \"],[10],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-array-table/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-associated/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'associationType': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    store: Ember.inject.service(),

    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'scope', Ember.getWithDefault(model, 'scope', {}));
        Ember.set(model, 'resourceType', Ember.getWithDefault(model, 'resourceType', []));
        Ember.set(model, 'resourceCitation', Ember.getWithDefault(model, 'resourceCitation', {}));
        Ember.set(model, 'metadataCitation', Ember.getWithDefault(model, 'metadataCitation', {}));
      });
    },

    tagName: 'form',

    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default "false"
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    associationType: Ember.computed.alias('model.associationType'),

    linkedRecord: Ember.computed('model.mdRecordId', function () {
      let store = this.store;

      return store.peekAll('record').filterBy('recordId', Ember.get(this, 'model.mdRecordId')).get('firstObject');
    }),

    linkedAssociation: Ember.computed('linkedRecord.json.metadata.associatedResource.[]', function () {
      let ar = this.get('linkedRecord.json.metadata.associatedResource');

      if (!ar) {
        return null;
      }

      return ar.findBy('mdRecordId', this.recordId);
    }),

    linkedAssociationType: Ember.computed('linkedAssociation.associationType', {
      get() {
        return this.get('linkedAssociation.associationType');
      },
      set(key, value) {
        let assoc = this.linkedAssociation;
        let model = this.linkedRecord;

        if (!assoc) {
          Ember.set(model, 'json.metadata.associatedResource', Ember.getWithDefault(model, 'json.metadata.associatedResource', []));

          model.get('json.metadata.associatedResource').pushObject({
            mdRecordId: Ember.get(this, 'recordId'),
            associationType: value
          });

          model.notifyPropertyChange('hasDirtyHash');

          return value;
        }

        Ember.set(assoc, 'associationType', value);
        model.notifyPropertyChange('hasDirtyHash');

        return value;
      }
    }),

    editLinked(record) {
      return record;
    }
  });
});
;define('mdeditor/pods/components/object/md-associated/preview/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    store: Ember.inject.service(),
    classNameBindings: ['muted:text-muted'],

    /**
     * Whether to render the text muted.
     *
     * @property muted
     * @type {Boolean}
     * @default "true"
     */
    muted: true,

    citation: Ember.computed('item', 'item.mdRecordId', function () {
      if (!this.get('item.mdRecordId')) {
        return this.get('item.resourceCitation');
      }

      let store = this.store;
      let linked = store.peekAll('record').filterBy('recordId', Ember.get(this, 'item.mdRecordId')).get('firstObject.json.metadata.resourceInfo.citation');

      return linked || this.get('item.resourceCitation');
    }),

    metadataIdentifier: Ember.computed('item.{metadataCitation.identifier,mdRecordId}', function () {
      if (!this.get('item.mdRecordId')) {
        return this.get('item.metadataCitation.identifier.0');
      }

      let store = this.store;

      return store.peekAll('record').filterBy('recordId', Ember.get(this, 'item.mdRecordId')).get('firstObject.json.metadata.metadataInfo.metadataIdentifier');
    })
  });
});
;define("mdeditor/pods/components/object/md-associated/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cZaIpqYE", "block": "{\"symbols\":[\"model\",\"meta\"],\"statements\":[[4,\"with\",[[23,[\"item\"]]],null,{\"statements\":[[0,\"  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal\"],[9],[0,\"\\n    \"],[7,\"dt\"],[9],[0,\"\\n      \"],[7,\"h4\"],[11,\"class\",\"text-info\"],[9],[0,\"Resource #\"],[1,[21,\"index\"],false],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"dd\"],[9],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"col-xxl-6\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Association Type\"]],{\"statements\":[[0,\"          \"],[1,[22,1,[\"associationType\"]],false],[0,\"\\n\"],[4,\"if\",[[22,1,[\"mdRecordId\"]]],null,{\"statements\":[[0,\"            (\"],[7,\"em\"],[9],[0,\"linked\"],[10],[0,\")\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"col-xxl-6\"],[9],[0,\"\\n        \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Initiative Type\",[22,1,[\"initiativeType\"]]]]],false],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\\n  \"],[1,[27,\"object/md-citation/preview/body\",null,[[\"citation\"],[[23,[\"citation\"]]]]],false],[0,\"\\n\\n  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Metadata Identifier\"]],{\"statements\":[[4,\"with\",[[23,[\"metadataIdentifier\"]]],null,{\"statements\":[[0,\"      \"],[1,[22,2,[\"identifier\"]],false],[0,\" \"],[1,[27,\"if\",[[22,2,[\"namespace\"]],[27,\"concat\",[\"(\",[22,2,[\"namespace\"]],\")\"],null]],null],false],[0,\"\\n\"]],\"parameters\":[2]},{\"statements\":[[0,\"      \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No metadata identifier assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-associated/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-associated/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "oBEsH6+j", "block": "{\"symbols\":[\"meta\",\"type\",\"metdata\",\"citation\",\"&default\"],\"statements\":[[1,[27,\"input/md-codelist\",null,[[\"label\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"path\",\"model\",\"placeholder\",\"profilePath\",\"data-spy\"],[\"Association Type\",true,true,false,false,true,true,\"associationType\",\"associationType\",[22,0,[]],\"Choose Type of Association\",[27,\"concat\",[[23,[\"profilePath\"]],\".associationType\"],null],\"Association Type\"]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-codelist\",null,[[\"label\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"path\",\"model\",\"placeholder\",\"profilePath\"],[\"Initiative Type\",true,true,false,false,true,true,\"initiativeType\",\"initiativeType\",[23,[\"model\"]],\"Choose Type of Initiative\",[27,\"concat\",[[23,[\"profilePath\"]],\".initiativeType\"],null]]]],false],[0,\"\\n\\n\"],[4,\"unless\",[[23,[\"model\",\"mdRecordId\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n      \"],[1,[27,\"object/md-resource-type-array\",null,[[\"plain\",\"value\",\"required\",\"data-spy\",\"profilePath\"],[false,[23,[\"model\",\"resourceType\"]],true,\"Resource Types\",[27,\"concat\",[[23,[\"profilePath\"]],\".resourceType\"],null]]]],false],[0,\"\\n  \"],[10],[0,\"\\n\\n\\n\"],[4,\"with\",[[23,[\"model\",\"resourceCitation\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"profilePath\",\"simpleIdentifier\"],[[22,4,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".resourceCitation\"],null],true]]],false],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"profilePath\",\"shadow\",\"collapsible\",\"collapsed\"],[\"Metadata Citation\",[27,\"concat\",[[23,[\"profilePath\"]],\".metadataCitation\"],null],true,true,true]],{\"statements\":[[4,\"with\",[[23,[\"model\",\"metadataCitation\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"profilePath\",\"embedded\",\"simpleIdentifier\"],[[22,3,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".metadataCitation\"],null],true,true]]],false],[0,\"\\n\"]],\"parameters\":[3]},null]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"shadow\",\"block\",\"muted\",\"collapsible\",\"collapsed\",\"btnText\",\"btnClass\",\"btnAction\",\"btnIcon\"],[\"Linked Record\",false,false,false,false,false,\"Edit\",[27,\"concat\",[\"success\",[27,\"unless\",[[23,[\"linkedRecord\"]],\"disabled\"],null]],null],[27,\"action\",[[22,0,[]],[23,[\"editLinked\"]],[23,[\"linkedRecord\"]]],null],\"pencil\"]],{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"linkedRecord\"]]],null,{\"statements\":[[4,\"object/md-citation/preview/body\",null,[[\"citation\",\"class\"],[[23,[\"linkedRecord\",\"json\",\"metadata\",\"resourceInfo\",\"citation\"]],\"text-muted\"]],{\"statements\":[[0,\"        \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Resource Type(s)\"]],{\"statements\":[[4,\"each\",[[23,[\"linkedRecord\",\"json\",\"metadata\",\"resourceInfo\",\"resourceType\"]]],null,{\"statements\":[[0,\"                  \"],[1,[22,2,[\"type\"]],false],[0,\":\\n\"],[4,\"if\",[[22,2,[\"name\"]]],null,{\"statements\":[[0,\"                      \"],[1,[22,2,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                      \"],[7,\"em\"],[9],[0,\"Not named\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                  \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[2]},{\"statements\":[[0,\"                      \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No types assigned!\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"linkedRecord\",\"json\",\"metadata\",\"metadataInfo\",\"metadataIdentifier\"]]],null,{\"statements\":[[0,\"          \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Metadata Identifier\"]],{\"statements\":[[0,\"                \"],[1,[22,1,[\"identifier\"]],false],[0,\" \"],[1,[27,\"if\",[[22,1,[\"namespace\"]],[27,\"concat\",[\"(\",[22,1,[\"namespace\"]],\")\"],null]],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"          \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"card card-inverse card-danger\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n          \"],[7,\"h4\"],[11,\"class\",\"card-title\"],[9],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\" Linked record is missing!\"],[10],[0,\"\\n          \"],[7,\"p\"],[11,\"class\",\"card-text\"],[9],[0,\"Cannot find the linked record with id \"],[7,\"em\"],[9],[1,[23,[\"model\",\"mdRecordId\"]],false],[10],[0,\".\"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[10],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"recordId\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"card-footer\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\",\"titleClass\"],[\"Linked Association Type\",\"wrapped\"]],{\"statements\":[[0,\"            \"],[1,[27,\"input/md-codelist\",null,[[\"create\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"value\",\"placeholder\",\"profilePath\",\"data-spy\"],[true,true,false,false,true,true,\"associationType\",[23,[\"linkedAssociationType\"]],\"Choose Type of Association\",[27,\"concat\",[[23,[\"profilePath\"]],\".linkedAssociationType\"],null],false]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[14,5],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-associated/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-attribute/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Template = exports.Validations = undefined;


  const Validations = (0, _emberCpValidations.buildValidations)({
    'codeName': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'dataType': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'allowNull': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'definition': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  const TemplateClass = Ember.Object.extend(Validations, {
    init() {
      this._super(...arguments);

      Ember.set(this, 'allowNull', true);
      Ember.set(this, 'attributeReference', {});
      Ember.set(this, 'alias', []);
      Ember.set(this, 'valueRange', []);
      Ember.set(this, 'timePeriod', []);
    }
  });

  const theComp = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'allowNull', Ember.getWithDefault(model, 'allowNull', false));
        Ember.set(model, 'reference', Ember.getWithDefault(model, 'reference', {}));
        Ember.set(model, 'alias', Ember.getWithDefault(model, 'alias', []));
        Ember.set(model, 'valueRange', Ember.getWithDefault(model, 'valueRange', []));
        Ember.set(model, 'timePeriod', Ember.getWithDefault(model, 'timePeriod', []));
      });
    },

    /**
     * The string representing the path in the profile object for the domain.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the domain.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form',
    codeName: Ember.computed.alias('model.codeName'),
    dataType: Ember.computed.alias('model.dataType'),
    definition: Ember.computed.alias('model.definition'),
    allowNull: Ember.computed.alias('model.allowNull'),
    domains: Ember.computed.alias('dictionary.domain'),

    domainList: Ember.computed('domains.{@each.domainId,@each.codeName}', function () {
      let domains = Ember.get(this, 'domains') || [];

      return domains.map(domain => {
        if (Ember.get(domain, 'domainId')) {
          return {
            codeId: Ember.get(domain, 'domainId'),
            codeName: Ember.get(domain, 'codeName'),
            tooltip: Ember.get(domain, 'description')
          };
        }
      });
    }),

    rangeTemplate: Ember.Object.extend((0, _emberCpValidations.buildValidations)({
      'minRangeValue': [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      })],
      'maxRangeValue': [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      })]
    }), {
      init() {
        this._super(...arguments);
      }
    })
  });

  exports.Validations = Validations;
  exports.Template = TemplateClass;
  exports.default = theComp;
});
;define('mdeditor/pods/components/object/md-attribute/preview/component', ['exports', 'mdeditor/pods/components/object/md-attribute/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend(_component.Validations, {
    tagName: '',
    model: Ember.computed.alias('item'),
    name: Ember.computed.alias('model.codeName'),
    dataType: Ember.computed.alias('model.dataType'),
    definition: Ember.computed.alias('model.definition'),
    allowNull: Ember.computed.alias('model.allowNull')
  });
});
;define("mdeditor/pods/components/object/md-attribute/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "GnxrkOYJ", "block": "{\"symbols\":[],\"statements\":[[7,\"td\"],[11,\"class\",\"property\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,0,[]],\"name\",\"Descriptive name for the attribute(column).\",[27,\"concat\",[[23,[\"profilePath\"]],\".attribute.name\"],null],true]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"td\"],[11,\"class\",\"property\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-codelist\",null,[[\"create\",\"tooltip\",\"icon\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"model\",\"path\",\"placeholder\",\"profilePath\"],[true,true,false,true,true,\"dataType\",[22,0,[]],\"dataType\",\"The datatype for the attribute(column).\",[27,\"concat\",[[23,[\"profilePath\"]],\".attribute.dataType\"],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"td\"],[11,\"class\",\"property\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,0,[]],\"definition\",\"A brief definition of the attribute(column).\",[27,\"concat\",[[23,[\"profilePath\"]],\".attribute.definition\"],null],true]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"td\"],[11,\"class\",\"property text-center\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-boolean\",null,[[\"required\",\"value\",\"profilePath\"],[true,[23,[\"model\",\"allowNull\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".attribute.allowNull\"],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-attribute/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-attribute/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "jpSNEeNz", "block": "{\"symbols\":[\"tm\",\"rg\",\"profilePath\",\"val\"],\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"required\"],[\"Attribute Information\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".information\"],null],\"Attribute Information\",true]],{\"statements\":[[4,\"with\",[[27,\"concat\",[[23,[\"profilePath\"]],\".information\"],null]],null,{\"statements\":[[0,\"    \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"label\",\"data-spy\",\"profilePath\",\"class\"],[[22,0,[]],\"codeName\",\"The code used to identify this attribute, e.g.the column name.\",\"Code Name\",\"Code Name\",[27,\"concat\",[[22,3,[]],\".codeName\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"autoresize\",\"placeholder\",\"label\",\"data-spy\",\"embedded\",\"profilePath\"],[[22,0,[\"definition\"]],true,true,\"A brief description of the attribute.\",\"Definition\",\"Definition\",true,[27,\"concat\",[[22,3,[]],\".definition\"],null]]]],false],[0,\"\\n\\n\"],[0,\"\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"create\",\"tooltip\",\"icon\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"model\",\"path\",\"placeholder\",\"label\",\"data-spy\",\"profilePath\",\"class\"],[true,true,false,true,true,\"dataType\",[22,0,[]],\"dataType\",\"The datatype for the attribute(column).\",\"Data Type\",\"Data Type\",[27,\"concat\",[[22,3,[]],\".dataType\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-boolean\",null,[[\"label\",\"required\",\"text\",\"value\",\"profilePath\"],[\"Allow Null?\",true,\"Allow null values\",[23,[\"model\",\"allowNull\"]],[27,\"concat\",[[22,3,[]],\".allowNull\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\",\"data-spy\",\"class\"],[[23,[\"model\",\"commonName\"]],\"Enter a short common(alternate) name for the attribute.\",\"Common Name\",[27,\"concat\",[[22,3,[]],\".commonName\"],null],\"Common Name\",\"md-embedded\"]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"label\",\"value\",\"mapped\",\"create\",\"tooltip\",\"placeholder\",\"profilePath\",\"data-spy\",\"class\"],[\"Domain\",[23,[\"model\",\"domainId\"]],[23,[\"domainList\"]],false,true,\"Select or enter the domain for this attribute.\",[27,\"concat\",[[22,3,[]],\".domain\"],null],\"Domain\",\"md-embedded\"]]],false],[0,\"\\n\\n\"],[4,\"object/md-simple-array-table\",null,[[\"title\",\"required\",\"plain\",\"profilePath\",\"data-spy\",\"class\",\"value\"],[\"Alias\",false,true,[27,\"concat\",[[22,3,[]],\".alias\"],null],\"Alias\",\"md-embedded\",[23,[\"model\",\"alias\"]]]],{\"statements\":[[0,\"      \"],[7,\"td\"],[9],[0,\"\\n          \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,4,[\"item\",\"value\"]],\"Alternate names used to identify this attribute.\"]]],false],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"\\n\"],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"units\"]],\"A unit-of-measure for the attribute, e.g. 'meter', 'atmosphere', 'liter'\",\"Units\",[27,\"concat\",[[22,3,[]],\".units\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"type\",\"step\",\"model\",\"valuePath\",\"placeholder\",\"label\",\"profilePath\"],[\"number\",\".1\",[23,[\"model\"]],\"unitsResolution\",\"The smallest unit increment for the attribute value.\",\"Units Resolution\",[27,\"concat\",[[22,3,[]],\".unitsResolution\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-boolean\",null,[[\"label\",\"required\",\"text\",\"value\",\"profilePath\"],[\"Case Sensitive?\",true,\"Is the attribute content case sensitive?\",[23,[\"model\",\"isCaseSensitive\"]],[27,\"concat\",[[22,3,[]],\".caseSensitive\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"type\",\"model\",\"valuePath\",\"placeholder\",\"label\",\"profilePath\"],[\"number\",[23,[\"model\"]],\"fieldWidth\",\"The number of characters allowed in the attribute value.\",\"Field Width\",[27,\"concat\",[[22,3,[]],\".fieldWidth\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"missingValue\"]],\"The code which represents missing data.\",\"Missing Value\",[27,\"concat\",[[22,3,[]],\".missingValue\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"minValue\"]],\"The minimum value permissible for this attribute.\",\"Minimum Value\",[27,\"concat\",[[22,3,[]],\".minValue\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"maxValue\"]],\"The maximum value permissible for this attribute.\",\"Maximum Value\",[27,\"concat\",[[22,3,[]],\".maxValue\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[3]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"object/md-array-table\",null,[[\"columns\",\"value\",\"title\",\"plain\",\"templateClass\",\"profilePath\",\"data-spy\"],[\"Min Value, Max Value\",[23,[\"model\",\"valueRange\"]],\"Value Range\",false,[23,[\"rangeTemplate\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".valueRange\"],null],\"Value Range\"]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,2,[\"item\"]],\"minRangeValue\",\"The least value that the attribute can be assigned.\",[27,\"concat\",[[23,[\"profilePath\"]],\".minValue\"],null],true]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,2,[\"item\"]],\"maxRangeValue\",\"The greatest value that the attribute can be assigned.\",[27,\"concat\",[[23,[\"profilePath\"]],\".maxValue\"],null],true]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"],[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"data-spy\",\"buttonText\",\"ellipsis\",\"profilePath\",\"attributes\"],[[23,[\"model\",\"timePeriod\"]],\"Time Period\",\"Time Period\",\"Add Time Period\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".timePeriod\"],null],\"startDateTime,endDateTime\"]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-timePeriod\",null,[[\"model\",\"profilePath\"],[[22,1,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".timePeriod\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"profilePath\",\"shadow\",\"collapsible\",\"collapsed\"],[\"Attribute Reference\",[27,\"concat\",[[23,[\"profilePath\"]],\".attributeReference\"],null],true,true,true]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-citation\",null,[[\"profilePath\",\"model\",\"simpleIdentifier\"],[[27,\"concat\",[[23,[\"profilePath\"]],\".attributeReference\"],null],[23,[\"model\",\"attributeReference\"]],true]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-attribute/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-bbox/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'north': [(0, _emberCpValidations.validator)('number', {
      allowNone: false,
      gte: -90,
      lte: 90
    })],
    'south': [(0, _emberCpValidations.validator)('number', {
      allowNone: false,
      gte: -90,
      lte: 90
    }), (0, _emberCpValidations.validator)('number', {
      lte: Ember.computed.readOnly('model.north')
    })],
    'east': [(0, _emberCpValidations.validator)('number', {
      allowNone: false,
      gte: -180,
      lte: 180
    })],
    'west': [(0, _emberCpValidations.validator)('number', {
      allowNone: false,
      gte: -180,
      lte: 180
    }), (0, _emberCpValidations.validator)('number', {
      lte: Ember.computed.readOnly('model.east')
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    classNames: ['form'],

    north: Ember.computed.alias('model.northLatitude'),
    south: Ember.computed.alias('model.southLatitude'),
    east: Ember.computed.alias('model.eastLongitude'),
    west: Ember.computed.alias('model.westLongitude')

    // btnText: computed('isTruelyValid', function() {
    //   let text = this.get('validations.isTruelyValid') ? ''
    //   this.set('btnText', )
    // }),
  });
});
;define("mdeditor/pods/components/object/md-bbox/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "2EQTS27A", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"shadow\"],[false,false,[23,[\"profilePath\"]],false,false]],{\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-lg-6\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"type\",\"step\",\"model\",\"valuePath\",\"label\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"number\",\"0.0001\",[22,0,[]],\"north\",\"North\",\"Enter north latitude.\",[27,\"concat\",[[23,[\"profilePath\"]],\".north\"],null],true]]],false],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"type\",\"step\",\"model\",\"valuePath\",\"label\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"number\",\"0.0001\",[22,0,[]],\"east\",\"East\",\"Enter east longitude.\",[27,\"concat\",[[23,[\"profilePath\"]],\".east\"],null],true]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-lg-6\"],[9],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"type\",\"step\",\"model\",\"valuePath\",\"label\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"number\",\"0.0001\",[22,0,[]],\"south\",\"South\",\"Enter south latitude.\",[27,\"concat\",[[23,[\"profilePath\"]],\".south\"],null],true]]],false],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"type\",\"step\",\"model\",\"valuePath\",\"label\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"number\",\"0.0001\",[22,0,[]],\"west\",\"West\",\"Enter west latitude.\",[27,\"concat\",[[23,[\"profilePath\"]],\".west\"],null],true]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[14,1],[0,\"\\n\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-bbox/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-citation-array/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({

    init() {
      this._super(...arguments);

      if (!this.model) {
        this.set('model', Ember.A());
      }
    },

    /**
     * mdEditor class for input and edit of mdJSON 'citation' object
     * arrays.
     * The class manages the maintenance of an array of citation
     * objects using the md-object-table class.
     *
     * @module mdeditor
     * @submodule components-object
     * @class md-citation-array
     * @constructor
     */

    attributeBindings: ['data-spy'],

    /**
     * mdJSON object containing the 'citation' array.
     *
     * @property model
     * @type Object
     * @required
     */

    /**
     * List of mdJSON 'citation' object attributes to display in
     * md-object-table to aid in choosing the citation to edit or
     * delete.
     * The property is passed to md-object-table for configuration.
     *
     * @property attributes
     * @type String
     * @default 'title'
     */
    attributes: 'title',

    /**
     * Name to place on the mdEditor panel header for entry and edit of
     * 'citation' objects.
     * The property is passed to md-object-table for configuration.
     *
     * @property label
     * @type String
     * @default 'Citation'
     */
    label: 'Citation',

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property templateClass
     * @type Ember.Object
     */
    templateClass: Ember.Object.extend({
      init() {
        this._super(...arguments);
        //this.set('authority', {});
      }
    })
  });
});
;define("mdeditor/pods/components/object/md-citation-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3Qr+WGoT", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"object/md-objectroute-table\",null,[[\"items\",\"header\",\"buttonText\",\"ellipsis\",\"templateClass\",\"editItem\",\"attributes\"],[[23,[\"model\"]],[23,[\"label\"]],\"Add Citation\",[23,[\"ellipsis\"]],[23,[\"templateClass\"]],[23,[\"editItem\"]],[23,[\"attributes\"]]]]],false],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-citation-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-citation/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const formatCitation = function formatCitation(model) {
    Ember.set(model, 'responsibleParty', Ember.getWithDefault(model, 'responsibleParty', []));
    Ember.set(model, 'date', Ember.getWithDefault(model, 'date', []));
    Ember.set(model, 'alternateTitle', Ember.getWithDefault(model, 'alternateTitle', []));
    Ember.set(model, 'presentationForm', Ember.getWithDefault(model, 'presentationForm', []));
    Ember.set(model, 'onlineResource', Ember.getWithDefault(model, 'onlineResource', []));
    Ember.set(model, 'identifier', Ember.getWithDefault(model, 'identifier', []));
    Ember.set(model, 'otherCitationDetails', Ember.getWithDefault(model, 'otherCitationDetails', []));
    Ember.set(model, 'graphic', Ember.getWithDefault(model, 'graphic', []));
    Ember.set(model, 'series', Ember.getWithDefault(model, 'series', {}));

    return model;
  };

  const theComp = Ember.Component.extend({
    /**
     * mdEditor class for input and edit of mdJSON 'citation' objects.
     *
     * ```handlebars
     * \{{object/md-citation
     *  model=citation
     *  profilePath="path"
     *  simpleIdentifier=false
     *  embedded=false
     * }}
     *
     * @module mdeditor
     * @submodule components-object
     * @class md-citation
     * @constructor
     */

    didReceiveAttrs() {
      this._super(...arguments);

      //let model = getWithDefault(this, 'model', {}) || {};

      Ember.run.once(this, function () {
        this.set('model', Ember.getWithDefault(this, 'model', {}));
        formatCitation(this.model);
      });
    },
    tagName: 'form',

    /**
     * The string representing the path in the profile object for the citation.
     *
     * @property profilePath
     * @type {String}
     * @default "false"
     * @required
     */

    /**
     * The object to use as the data model for the citation.
     *
     * @property model
     * @type {Object}
     * @required
     */

    /**
     * Indicates whether the citation is embedded and should prevent recursion.
     *
     * @property embedded
     * @type {Boolean}
     * @default "false"
     */
    embedded: false,

    /**
     * The data-spy title, set to false to hide.
     *
     * @property data-spy
     * @type {String}
     * @default "Citation"
     */
    'data-spy': 'Citation',

    /**
     * Indicates whether the citation identifier Component should be rendered using
     * the inline form: md-identifier-object-table.
     *
     * @property simpleIdentifier
     * @type {Boolean}
     * @default "false"
     */
    simpleIdentifier: false
  });

  exports.formatCitation = formatCitation;
  exports.default = theComp;
});
;define('mdeditor/pods/components/object/md-citation/preview/body/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});
;define("mdeditor/pods/components/object/md-citation/preview/body/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uK3Urn7r", "block": "{\"symbols\":[\"party\",\"contact\",\"index\",\"id\",\"date\",\"title\",\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n      \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Title\",[23,[\"citation\",\"title\"]]]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Alternate Titles\"]],{\"statements\":[[4,\"each\",[[23,[\"citation\",\"alternateTitle\"]]],null,{\"statements\":[[0,\"              \"],[1,[22,6,[]],false],[0,\"\\n              \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[6]},{\"statements\":[[0,\"              \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No alternate titles assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"clearfix\"],[9],[10],[0,\"\\n  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Dates\"]],{\"statements\":[[4,\"each\",[[23,[\"citation\",\"date\"]]],null,{\"statements\":[[0,\"              \"],[1,[27,\"moment-format\",[[22,5,[\"date\"]],\"MMMM Do YYYY\"],null],false],[0,\"\\n              (\"],[1,[22,5,[\"dateType\"]],false],[0,\")\\n              \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[5]},{\"statements\":[[0,\"              \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No dates assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Identifier\"]],{\"statements\":[[4,\"each\",[[23,[\"citation\",\"identifier\"]]],null,{\"statements\":[[0,\"              \"],[1,[22,4,[\"identifier\"]],false],[0,\" \"],[1,[27,\"if\",[[22,4,[\"namespace\"]],[27,\"concat\",[\"(\",[22,4,[\"namespace\"]],\")\"],null]],null],false],[0,\"\\n              \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[4]},{\"statements\":[[0,\"              \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No identifiers assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"clearfix\"],[9],[10],[0,\"\\n  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Responsible Party\"]],{\"statements\":[[4,\"each\",[[23,[\"citation\",\"responsibleParty\"]]],null,{\"statements\":[[0,\"              \"],[1,[27,\"html-safe\",[[27,\"if\",[[22,1,[\"role\"]],[22,1,[\"role\"]],\"<em>No Roles assigned.</em>\"],null]],null],false],[0,\"\\n              (\\n\"],[4,\"each\",[[22,1,[\"party\"]]],null,{\"statements\":[[0,\"                  \"],[1,[27,\"if\",[[22,3,[]],\", \"],null],false],[0,\" \"],[1,[27,\"control/md-contact-link\",null,[[\"contactId\"],[[22,2,[\"contactId\"]]]]],false],[0,\"\\n\"]],\"parameters\":[2,3]},{\"statements\":[[0,\"                  \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No Contacts assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"              )\\n              \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"              \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No responsibility assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n  \"],[14,7],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-citation/preview/body/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-citation/preview/component", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * Title for the card
     *
     * @property title
     * @type {String}
     * @default "Citation"
     * @required
     */
    title: "Citation",

    /**
     * Indicates if object is required.
     *
     * @property required
     * @type {Boolean}
     * @default "false"
     */
    required: false,

    /**
     * Indicates if object text is muted.
     *
     * @property muted
     * @type {Boolean}
     * @default "true"
     */
    muted: true,

    /**
     * Passed in action.
     *
     * @method editCitation
     * @param {String} scrollTo Identifier to scrollTo
     * @required
     * @return {undefined}
     */

    actions: {
      editCitation(scrollTo) {
        this.editCitation(scrollTo);
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-citation/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "g+G24XjB", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"required\",\"muted\",\"spotlightEnabled\",\"btnText\",\"btnClass\",\"btnAction\",\"btnIcon\"],[[23,[\"title\"]],true,false,[23,[\"profilePath\"]],[23,[\"required\"]],[23,[\"muted\"]],[23,[\"spotlightEnabled\"]],\"Edit\",\"success\",[27,\"action\",[[22,0,[]],[23,[\"editCitation\"]],[27,\"dasherize\",[[23,[\"title\"]]],null]],null],\"pencil\"]],{\"statements\":[[0,\"\\n\"],[1,[27,\"object/md-citation/preview/body\",null,[[\"citation\"],[[23,[\"citation\"]]]]],false],[0,\"\\n\\n\"],[14,1],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"card-footer\"],[9],[0,\"\\n  \"],[7,\"button\"],[11,\"name\",\"button\"],[11,\"class\",\"btn btn-success pull-right\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"action\",[[22,0,[]],[23,[\"editCitation\"]],[27,\"dasherize\",[[23,[\"title\"]]],null]],null]]],[9],[0,\"\\n    \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit Citation\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-citation/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "KXzpkDh3", "block": "{\"symbols\":[\"val\",\"alt\",\"&default\"],\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"class\",\"shadow\",\"required\"],[\"Basic Information\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".basicInformation\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Basic Information\"],null],[27,\"if\",[[23,[\"embedded\"]],\"md-embedded\"],null],[27,\"if\",[[23,[\"embedded\"]],false,true],null],true]],{\"statements\":[[0,\"\\n\"],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"required\",\"profilePath\",\"data-spy\",\"class\"],[[23,[\"model\",\"title\"]],\"Enter the title for the resource.\",\"Title\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".title\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Title\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".alternateTitle\"],null]]],{\"statements\":[[4,\"object/md-simple-array-table\",null,[[\"data-spy\",\"title\",\"plain\",\"value\"],[false,\"Alternate Title\",true,[23,[\"model\",\"alternateTitle\"]]]],{\"statements\":[[0,\"        \"],[7,\"td\"],[9],[0,\"\\n            \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"value\"]],\"Additional titles for the resource.\"]]],false],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\",\"data-spy\",\"class\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".date\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Dates\"],null],\"md-embedded\"]],{\"statements\":[[0,\"    \"],[1,[27,\"object/md-date-array\",null,[[\"value\",\"plain\",\"data-spy\"],[[23,[\"model\",\"date\"]],true,false]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\\n\"],[4,\"unless\",[[23,[\"embedded\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"edition\"]],\"Enter the edition.\",\"Edition\",[27,\"concat\",[[23,[\"profilePath\"]],\".edition\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-codelist-multi\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"profilePath\"],[[23,[\"model\",\"presentationForm\"]],\"Presentation Form\",true,true,false,\"presentationForm\",false,\"Select or enter one or more forms.\",[27,\"concat\",[[23,[\"profilePath\"]],\".presentationForm\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"object/md-party-array\",null,[[\"title\",\"data-spy\",\"class\",\"collapsible\",\"collapsed\",\"required\",\"value\",\"profilePath\"],[\"Responsible Party\",[27,\"if\",[[23,[\"data-spy\"]],\"Responsible Parties\"],null],[27,\"if\",[[23,[\"embedded\"]],\"md-embedded\"],null],true,false,false,[23,[\"model\",\"responsibleParty\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".responsibleParty\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-online-resource-array\",null,[[\"model\",\"profilePath\",\"class\",\"data-spy\"],[[23,[\"model\",\"onlineResource\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".onlineResource\"],null],[27,\"if\",[[23,[\"embedded\"]],\"md-embedded\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Online Resource\"],null]]]],false],[0,\"\\n\\n\\n\"],[1,[27,\"object/md-identifier-array\",null,[[\"model\",\"profilePath\",\"data-spy\",\"editItem\",\"class\",\"visibility\"],[[23,[\"model\",\"identifier\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".identifier\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Identifier\"],null],[23,[\"editIdentifier\"]],[27,\"if\",[[23,[\"embedded\"]],\"md-embedded\"],null],[27,\"if\",[[23,[\"simpleIdentifier\"]],false,true],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-identifier-object-table\",null,[[\"model\",\"profilePath\",\"data-spy\",\"visibility\",\"short\",\"class\"],[[23,[\"model\",\"identifier\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".identifierSimple\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Identifier\"],null],[27,\"if\",[[23,[\"simpleIdentifier\"]],true,false],null],[23,[\"shortIdentifier\"]],[27,\"if\",[[23,[\"embedded\"]],\"md-embedded\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-identifier-object-table\",null,[[\"model\",\"profilePath\",\"data-spy\",\"visibility\",\"short\",\"class\"],[[23,[\"model\",\"identifier\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".identifierShort\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Identifier\"],null],false,true,[27,\"if\",[[23,[\"embedded\"]],\"md-embedded\"],null]]]],false],[0,\"\\n\\n\"],[4,\"unless\",[[23,[\"embedded\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"collapsible\",\"title\",\"profilePath\",\"data-spy\",\"content\"],[true,\"Series\",[27,\"concat\",[[23,[\"profilePath\"]],\".series\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Series\"],null],[23,[\"model\",\"series\"]]]],{\"statements\":[[0,\"    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"series\",\"seriesName\"]],\"Enter the name for the series.\",\"Name\",[27,\"concat\",[[23,[\"profilePath\"]],\".series.name\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"series\",\"seriesIssue\"]],\"Enter the issue for the series.\",\"Issue\",[27,\"concat\",[[23,[\"profilePath\"]],\".series.issue\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"series\",\"issuePage\"]],\"Enter the page(s) for the issue.\",\"Page\",[27,\"concat\",[[23,[\"profilePath\"]],\".series.page\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"object/md-simple-array-table\",null,[[\"title\",\"required\",\"plain\",\"data-spy\",\"profilePath\",\"value\"],[\"Other Details\",false,false,[27,\"if\",[[23,[\"data-spy\"]],\"Other Details\"],null],[27,\"concat\",[[23,[\"profilePath\"]],\".otherCitationDetails\"],null],[23,[\"model\",\"otherCitationDetails\"]]]],{\"statements\":[[0,\"    \"],[7,\"td\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\"],[[22,1,[\"item\",\"value\"]],\"Enter additional detail about the citation.\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n  \"],[1,[27,\"object/md-graphic-array\",null,[[\"model\",\"data-spy\",\"button-text\",\"label\",\"profilePath\"],[[23,[\"model\",\"graphic\"]],[27,\"if\",[[23,[\"data-spy\"]],\"Graphic\"],null],\"Add Graphic\",\"Graphic\",[27,\"concat\",[[23,[\"profilePath\"]],\".graphicOverview\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-citation/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-constraint/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'classification': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'type': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'useLimitation', Ember.getWithDefault(model, 'useLimitation', []));
        Ember.set(model, 'graphic', Ember.getWithDefault(model, 'graphic', []));
        Ember.set(model, 'responsibleParty', Ember.getWithDefault(model, 'responsibleParty', []));
        Ember.set(model, 'legal', Ember.getWithDefault(model, 'legal', {
          accessConstraint: [],
          useConstraint: [],
          otherConstraint: []
        }));
        Ember.set(model, 'security', Ember.getWithDefault(model, 'security', {}));
      });
    },
    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form',

    type: Ember.computed.alias('model.type'),
    useRequired: Ember.computed.equal('type', 'use'),
    securityRequired: Ember.computed.equal('type', 'security'),
    legalRequired: Ember.computed.equal('type', 'legal'),
    classification: Ember.computed.alias('model.security.classification'),
    // measureUnit: alias('model.measure.unitOfMeasure'),
    // measurePresent: or('measureType','measureUnit','measureValue'),

    typeOptions: Ember.computed(function () {
      return [{
        name: 'use',
        value: 'use'
      }, {
        name: 'legal',
        value: 'legal'
      }, {
        name: 'security',
        value: 'security'
      }];
    })
  });
});
;define("mdeditor/pods/components/object/md-constraint/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ozjHItes", "block": "{\"symbols\":[\"val\",\"val\",\"&default\"],\"statements\":[[1,[27,\"input/md-select\",null,[[\"label\",\"showValidations\",\"model\",\"path\",\"valuePath\",\"namePath\",\"objectArray\",\"tooltip\",\"tooltipPath\",\"searchEnabled\",\"placeholder\",\"profilePath\"],[\"Constraint Type\",true,[22,0,[]],\"type\",\"value\",\"name\",[23,[\"typeOptions\"]],true,\"tip\",false,\"The type of constraint.\",[27,\"concat\",[[23,[\"profilePath\"]],\".type\"],null]]]],false],[0,\"\\n\\n\"],[4,\"object/md-simple-array-table\",null,[[\"title\",\"data-spy\",\"plain\",\"required\",\"profilePath\",\"value\"],[\"Use Limitations\",false,false,[23,[\"useRequired\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".useLimitation\"],null],[23,[\"model\",\"useLimitation\"]]]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"value\"]],\"Describe Limitation affecting the fitness for use of the resource or metadata. For example, \\\"not to be used for navigation\\\".\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"required\",\"profilePath\",\"data-spy\",\"shadow\"],[\"Legal\",true,[23,[\"legalRequired\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".legal\"],null],false,true]],{\"statements\":[[0,\"\\n\"],[0,\"\\n  \"],[1,[27,\"input/md-codelist-multi\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"profilePath\",\"placeholder\"],[[23,[\"model\",\"legal\",\"accessConstraint\"]],\"Access Constraints\",false,true,false,\"restriction\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".legal.accessConstraint\"],null],\"Access constraints applied to assure the protection of privacy or intellectual property, and any special restrictions or limitations on obtaining the resource.\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-codelist-multi\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"profilePath\",\"placeholder\"],[[23,[\"model\",\"legal\",\"useConstraint\"]],\"Use Constraints\",false,true,false,\"restriction\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".legal.useConstraint\"],null],\"Constraints applied to assure the protection of privacy or intellectual property, and any special restrictions or limitations or warnings on using the resource.\"]]],false],[0,\"\\n\"],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\"],[false]],{\"statements\":[[4,\"object/md-simple-array-table\",null,[[\"title\",\"data-spy\",\"plain\",\"profilePath\",\"value\"],[\"Other Constraint\",false,true,[27,\"concat\",[[23,[\"profilePath\"]],\".legal.otherConstraint\"],null],[23,[\"model\",\"legal\",\"otherConstraint\"]]]],{\"statements\":[[0,\"      \"],[7,\"td\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"rows\",\"placeholder\"],[[22,1,[\"item\",\"value\"]],3,\"Other restrictions and legal prerequisites for accessing and using the resource.\"]]],false],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"required\",\"profilePath\",\"data-spy\",\"shadow\"],[\"Security\",true,[23,[\"securityRequired\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".security\"],null],false,true]],{\"statements\":[[0,\"  \"],[1,[27,\"input/md-codelist\",null,[[\"label\",\"mdCodeName\",\"showValidations\",\"model\",\"path\",\"placeholder\",\"profilePath\"],[\"Classification\",\"classification\",true,[22,0,[]],\"classification\",\"Name of the handling restrictions on the resource or metadata.\",[27,\"concat\",[[23,[\"profilePath\"]],\".security.classification\"],null]]]],false],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"placeholder\",\"profilePath\"],[[23,[\"model\",\"security\",\"classificationSystem\"]],\"Classification System Name\",\"Enter name of the classification system.\",[27,\"concat\",[[23,[\"profilePath\"]],\".security.classificationSystem\"],null]]]],false],[0,\"\\n  \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"security\",\"userNote\"]],\"Explanation of the application of the legal constraints or other restrictions and legal prerequisites for obtaining and using the resource.\",\"Note\",[27,\"concat\",[[23,[\"profilePath\"]],\".security.note\"],null]]]],false],[0,\"\\n  \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"security\",\"handlingDescription\"]],\"Enter additional information about the restrictions on handling the resource.\",\"Handling Description\",[27,\"concat\",[[23,[\"profilePath\"]],\".security.handlingDescription\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"object/md-party-array\",null,[[\"title\",\"value\",\"profilePath\"],[\"Responsible Party\",[23,[\"model\",\"responsibleParty\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".responsibleParty\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-graphic-array\",null,[[\"model\",\"button-text\",\"label\",\"profilePath\"],[[23,[\"model\",\"graphic\"]],\"Add Graphic\",\"Graphic or Logo\",[27,\"concat\",[[23,[\"profilePath\"]],\".graphic\"],null]]]],false],[0,\"\\n\\n\"],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-constraint/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-date-array/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    init() {
      this._super(...arguments);

      if (Ember.isNone(Ember.get(this, 'value'))) {
        Ember.set(this, 'value', []);
      }
    },

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property templateClass
     * @type Ember.Object
     */
    templateClass: Ember.Object.extend({
      init() {
        this._super(...arguments);
        this.setProperties({
          date: null,
          dateType: null
        });
      }
    })
  });
});
;define("mdeditor/pods/components/object/md-date-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ul++ORvH", "block": "{\"symbols\":[\"date\",\"&default\"],\"statements\":[[4,\"object/md-array-table\",null,[[\"columns\",\"required\",\"title\",\"value\",\"plain\",\"validation\",\"data-spy\",\"templateClass\"],[\"Date,Date Type,Description\",[23,[\"required\"]],\"Date\",[23,[\"value\"]],[23,[\"plain\"]],[23,[\"validation\"]],[23,[\"data-spy\"]],[23,[\"templateClass\"]]]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-date\",null,[[\"model\"],[[22,1,[\"item\"]]]]],false],[0,\"\\n  \"],[14,2],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-date-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-date/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    date: (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }),
    dateType: (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })
  });

  exports.default = Ember.Component.extend(Validations, {
    init() {
      this._super(...arguments);

      // if(isNone(get(this, 'model'))) {
      //   set(this, 'model', {});
      // }
    },

    tagName: '',
    date: Ember.computed.alias('model.date'),
    dateType: Ember.computed.alias('model.dateType')

  });
});
;define("mdeditor/pods/components/object/md-date/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "T33T3h0A", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-datetime\",null,[[\"valuePath\",\"model\",\"showValidations\",\"required\",\"forceDateOutput\"],[\"date\",[22,0,[]],true,true,true]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"td\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-codelist\",null,[[\"create\",\"required\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"path\",\"model\",\"placeholder\"],[true,true,true,false,[23,[\"disabled\"]],true,true,\"dateType\",\"dateType\",[22,0,[]],\"Choose date type\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[23,[\"model\",\"description\"]],\"Describe the date.\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-date/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-distribution/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model.json.metadata');

      Ember.run.once(this, function () {
        Ember.set(model, 'resourceDistribution', Ember.A(Ember.getWithDefault(model, 'resourceDistribution', [])));
      });
    },
    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    /**
     * The passed down addDistribution method.
     *
     * @method addDistribution
     * @required
     */

    /**
     * The passed down editDistribution method.
     *
     * @method editDistribution
     * @param {Number} index
     * @required
     */

    /**
     * The passed down deleteDistribution method.
     *
     * @method deleteDistribution
     * @param {Number} index
     * @required
     */

    attributeBindings: ['data-spy'],
    tagName: 'section',
    actions: {
      editDistribution(index) {
        this.editDistribution(index);
      },
      deleteDistribution(index) {
        this.deleteDistribution(index);
      },
      addDistribution() {
        this.addDistribution();
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-distribution/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "tsd6u3g9", "block": "{\"symbols\":[\"dist\",\"index\",\"dist\",\"party\",\"contact\",\"index\"],\"statements\":[[4,\"each\",[[23,[\"model\",\"json\",\"metadata\",\"resourceDistribution\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"shadow\",\"spotlightEnabled\"],[[27,\"concat\",[\"Distribution Section #\",[22,2,[]]],null],true,false,[23,[\"profilePath\"]],[27,\"concat\",[\"Distribution #\",[22,2,[]]],null],true,false]],{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"card-buttons\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n            \"],[7,\"button\"],[11,\"class\",\"btn btn-md btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"editDistribution\",[22,2,[]]]],[9],[0,\"\\n              \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit Distributors\"],[10],[0,\"\\n          \"],[10],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n            \"],[7,\"button\"],[11,\"class\",\"btn btn-md btn-danger btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"deleteDistribution\",[22,2,[]]]],[9],[0,\"\\n                \"],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Delete Section\"],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n        \"],[7,\"label\"],[9],[0,\"Distributors\"],[10],[0,\"\\n\"],[4,\"if\",[[22,1,[\"distributor\",\"length\"]]],null,{\"statements\":[[4,\"each\",[[22,1,[\"distributor\"]]],null,{\"statements\":[[0,\"          \"],[7,\"div\"],[9],[0,\"\\n\"],[4,\"with\",[[22,3,[\"contact\"]]],null,{\"statements\":[[0,\"              \"],[1,[27,\"html-safe\",[[27,\"if\",[[22,4,[\"role\"]],[22,4,[\"role\"]],\"<em>No Roles assigned.</em>\"],null]],null],false],[0,\"\\n              (\\n\"],[4,\"each\",[[22,4,[\"party\"]]],null,{\"statements\":[[0,\"                  \"],[1,[27,\"if\",[[22,6,[]],\", \"],null],false],[0,\" \"],[1,[27,\"control/md-contact-link\",null,[[\"contactId\"],[[22,5,[\"contactId\"]]]]],false],[0,\"\\n\"]],\"parameters\":[5,6]},{\"statements\":[[0,\"                  \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No Contacts assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"              )\\n\"]],\"parameters\":[4]},{\"statements\":[[0,\"              \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No responsibility assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"          \"],[10],[0,\"\\n\"]],\"parameters\":[3]},null]],\"parameters\":[]},{\"statements\":[[0,\"          \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n            No Distributors to display.\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"rows\",\"maxHeight\",\"placeholder\",\"label\",\"profilePath\"],[[22,1,[\"description\"]],5,300,\"Describe the distribution of the resource\",\"Description\",[27,\"concat\",[[23,[\"profilePath\"]],\".description\"],null]]]],false],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1,2]},{\"statements\":[[0,\"  \"],[7,\"h3\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"No distribution sections found.\\n    \"],[7,\"button\"],[11,\"class\",\"btn btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addDistribution\"]],[9],[0,\"\\n      \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Distribution Section\"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-distribution/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-distributor/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'role': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'contacts': (0, _emberCpValidations.validator)('length', {
      min: 1,
      message: 'At least one contact is required.'
    })
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'contact', Ember.getWithDefault(model, 'contact', {
          role: null,
          party: []
        }));
        Ember.set(model, 'orderProcess', Ember.A(Ember.getWithDefault(model, 'orderProcess', [{}])));
        Ember.set(model, 'transferOption', Ember.A(Ember.getWithDefault(model, 'transferOption', [{}])));
      });
    },

    tagName: 'form',

    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default "false"
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    role: Ember.computed.alias('model.contact.role'),
    contacts: Ember.computed('model.contact.party', {
      get() {
        let party = Ember.get(this, 'model.contact.party');
        return party ? party.mapBy('contactId') : null;
      },
      set(key, value) {
        let map = value.map(itm => {
          return {
            contactId: itm
          };
        });
        Ember.set(this, 'model.contact.party', map);
        return value;
      }
    })
  });
});
;define('mdeditor/pods/components/object/md-distributor/preview/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});
;define("mdeditor/pods/components/object/md-distributor/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "DQrq6pAS", "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-distributor/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-distributor/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "c4NEJ5ja", "block": "{\"symbols\":[\"order\",\"opt\",\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"contact\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"input/md-select-contacts\",null,[[\"label\",\"placeholder\",\"model\",\"path\",\"icon\",\"tooltip\",\"showValidations\",\"class\"],[\"Contacts\",\"Select one or more contacts\",[22,0,[]],\"contacts\",true,true,true,\"required\"]]],false],[0,\"\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"label\",\"path\",\"model\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"showValidations\",\"placeholder\"],[\"Role\",\"role\",[22,0,[]],true,true,false,[23,[\"disabled\"]],\"role\",true,\"Select or enter a role\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"transferOption\",\"firstObject\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"plain\",\"class\",\"data-spy\",\"collapsible\",\"collapsed\",\"bodyIsRow\"],[false,false,\"Transfer Options\",true,\"md-embedded\",false,true,false,false]],{\"statements\":[[0,\"      \"],[1,[27,\"object/md-transfer\",null,[[\"model\",\"profilePath\"],[[22,2,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".transferOption\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[2]},null],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"orderProcess\",\"firstObject\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"plain\",\"class\",\"data-spy\",\"collapsible\",\"collapsed\",\"bodyIsRow\",\"profilePath\"],[false,false,\"Order Process\",true,\"md-embedded\",false,true,true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".orderProcess\"],null]]],{\"statements\":[[0,\"      \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\",\"label\",\"autoresize\",\"profilePath\"],[[22,1,[\"fees\"]],\"Describe the fees and terms for retrieving the resource, including monetary units.\",\"Fees\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".orderProcess.fees\"],null]]]],false],[0,\"\\n      \"],[1,[27,\"input/md-datetime\",null,[[\"date\",\"placeholder\",\"label\",\"profilePath\"],[[22,1,[\"plannedAvailability\"]],\"Date when the resource will be avialable\",\"Planned Availability\",[27,\"concat\",[[23,[\"profilePath\"]],\".orderProcess.plannedAvailability\"],null]]]],false],[0,\"\\n      \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"maxheight\",\"placeholder\",\"label\",\"profilePath\"],[[22,1,[\"orderingInstructions\"]],100,\"Describe general instructions for obtaining the resource\",\"Ordering Instructions\",[27,\"concat\",[[23,[\"profilePath\"]],\".orderProcess.orderingInstructions\"],null]]]],false],[0,\"\\n      \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"autoresize\",\"placeholder\",\"label\",\"profilePath\"],[[22,1,[\"turnaround\"]],false,\"Describe the typical turnaround time for the filling of an order\",\"Turnaround\",[27,\"concat\",[[23,[\"profilePath\"]],\".orderProcess.turnaround\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null],[10],[0,\"\\n\"],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-distributor/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-documentation/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'resourceType': [(0, _emberCpValidations.validator)('array-required', {
      track: ['type']
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'resourceType', Ember.getWithDefault(model, 'resourceType', []));
        Ember.set(model, 'citation', Ember.A(Ember.getWithDefault(model, 'citation', [{}])));
      });
    },

    tagName: 'form',

    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default "false"
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    citation: Ember.computed.alias('model.citation'),
    resourceType: Ember.computed.alias('model.resourceType')
  });
});
;define('mdeditor/pods/components/object/md-documentation/preview/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNameBindings: ['muted:text-muted'],

    /**
     * Whether to render the text muted.
     *
     * @property muted
     * @type {Boolean}
     * @default "true"
     */
    muted: true
  });
});
;define("mdeditor/pods/components/object/md-documentation/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cAuUSLq9", "block": "{\"symbols\":[\"model\",\"type\"],\"statements\":[[4,\"with\",[[23,[\"item\"]]],null,{\"statements\":[[0,\"  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal\"],[9],[0,\"\\n    \"],[7,\"dt\"],[9],[0,\"\\n      \"],[7,\"h4\"],[11,\"class\",\"text-info\"],[9],[0,\"Document #\"],[1,[21,\"index\"],false],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"dd\"],[9],[10],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Resource Type(s)\"]],{\"statements\":[[4,\"each\",[[22,1,[\"resourceType\"]]],null,{\"statements\":[[0,\"            \"],[1,[22,2,[\"type\"]],false],[0,\":\\n\"],[4,\"if\",[[22,2,[\"name\"]]],null,{\"statements\":[[0,\"                \"],[1,[22,2,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[7,\"em\"],[9],[0,\"Not named\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"            \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[2]},{\"statements\":[[0,\"                \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No types assigned!\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\\n  \"],[1,[27,\"object/md-citation/preview/body\",null,[[\"citation\"],[[27,\"object-at\",[0,[22,1,[\"citation\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-documentation/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-documentation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "qwz7llLG", "block": "{\"symbols\":[\"citation\",\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n    \"],[1,[27,\"object/md-resource-type-array\",null,[[\"plain\",\"value\",\"required\",\"data-spy\",\"profilePath\"],[false,[23,[\"model\",\"resourceType\"]],true,\"Resource Types\",[27,\"concat\",[[23,[\"profilePath\"]],\".resourceType\"],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"citation\",\"firstObject\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"profilePath\",\"simpleIdentifier\"],[[22,1,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".citation\"],null],true]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[14,2],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-documentation/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-domain/component', ['exports', 'ember-cp-validations', 'uuid/v4'], function (exports, _emberCpValidations, _v) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'domainId': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'codeName': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'description': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'domainId', Ember.getWithDefault(model, 'domainId', (0, _v.default)()));
        Ember.set(model, 'domainItem', Ember.getWithDefault(model, 'domainItem', []));
        Ember.set(model, 'domainReference', Ember.getWithDefault(model, 'domainReference', {}));
      });
    },

    /**
     * The string representing the path in the profile object for the domain.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the domain.
     *
     * @property model
     * @type {Object}
     * @required
     */

    /**
     * The passed down editDomainItem method.
     *
     * @method editDomainItem
     * @param {Number} index
     * @required
     */

    /**
     * The passed down editCitation method.
     *
     * @method editCitation
     * @param {String} scrollTo
     * @required
     */

    tagName: 'form',
    domainId: Ember.computed.alias('model.domainId'),
    codeName: Ember.computed.alias('model.codeName'),
    description: Ember.computed.alias('model.description'),
    actions: {
      editDomainItem(id) {
        this.editDomainItem(id);
      },
      editCitation(scrollTo) {
        this.editCitation(scrollTo);
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-domain/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "vWfyY+G2", "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"required\"],[\"Domain Information\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".information\"],null],\"Domain Information\",true]],{\"statements\":[[0,\"  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"label\",\"profilePath\",\"data-spy\",\"class\"],[[22,0,[]],\"domainId\",\"Enter the identifier for the domain.\",\"Domain Identifier\",[27,\"concat\",[[23,[\"profilePath\"]],\".identifier\"],null],\"Identifier\",\"md-embedded\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"label\",\"data-spy\",\"profilePath\",\"class\"],[[22,0,[]],\"codeName\",\"Enter the name used to refer to the domain in schema definitions.\",\"Code Name\",\"Code Name\",[27,\"concat\",[[23,[\"profilePath\"]],\".codeName\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\",\"data-spy\",\"class\"],[[23,[\"model\",\"commonName\"]],\"Enter a short common name for the domain.\",\"Common Name\",[27,\"concat\",[[23,[\"profilePath\"]],\".commonName\"],null],\"Common Name\",\"md-embedded\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"autoresize\",\"placeholder\",\"label\",\"data-spy\",\"embedded\",\"profilePath\"],[[23,[\"model\",\"description\"]],true,true,\"A brief description of the domain.\",\"Description\",\"Description\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".description\"],null]]]],false],[0,\"\\n\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"attributes\",\"items\",\"header\",\"shadow\",\"buttonText\",\"ellipsis\",\"previewTemplateTable\",\"editItem\",\"verticalButtons\",\"profilePath\",\"hideIndex\",\"condensed\",\"editOnAdd\",\"scrollToId\",\"data-spy\"],[\"Name,Value,Definition\",[23,[\"model\",\"domainItem\"]],\"Domain Items\",true,\"Add Item\",[23,[\"fallse\"]],\"object/md-domainitem/preview\",[27,\"action\",[[22,0,[]],\"editDomainItem\"],null],false,[23,[\"profilePath\"]],false,false,false,\"md-domainitem\",\"Domain Items\"]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-citation/preview\",null,[[\"title\",\"profilePath\",\"citation\",\"muted\",\"required\",\"editCitation\"],[\"Domain Reference\",[27,\"concat\",[[23,[\"profilePath\"]],\".domainReference\"],null],[23,[\"model\",\"domainReference\"]],true,false,[27,\"action\",[[22,0,[]],\"editCitation\"],null]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-domain/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-domainitem/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Template = exports.Validations = undefined;


  const Validations = (0, _emberCpValidations.buildValidations)({
    'name': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'value': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'definition': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  const TemplateClass = Ember.Object.extend(Validations, {
    init() {
      this._super(...arguments);

      Ember.set(this, 'reference', {});
    }
  });

  const theComp = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'reference', Ember.getWithDefault(model, 'reference', {}));
      });
    },

    /**
     * The string representing the path in the profile object for the domain.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the domain.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form',
    name: Ember.computed.alias('model.name'),
    value: Ember.computed.alias('model.value'),
    definition: Ember.computed.alias('model.definition')
  });

  exports.Validations = Validations;
  exports.Template = TemplateClass;
  exports.default = theComp;
});
;define('mdeditor/pods/components/object/md-domainitem/preview/component', ['exports', 'mdeditor/pods/components/object/md-domainitem/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend(_component.Validations, {
    tagName: '',
    model: Ember.computed.alias('item'),
    name: Ember.computed.alias('model.name'),
    value: Ember.computed.alias('model.value'),
    definition: Ember.computed.alias('model.definition')
  });
});
;define("mdeditor/pods/components/object/md-domainitem/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ugnvAmnW", "block": "{\"symbols\":[],\"statements\":[[7,\"td\"],[11,\"class\",\"property\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,0,[]],\"name\",\"Descriptive name for the domain value.\",[27,\"concat\",[[23,[\"profilePath\"]],\".domainItem.name\"],null],true]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"td\"],[11,\"class\",\"property\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,0,[]],\"value\",\"Value of the domain item.\",[27,\"concat\",[[23,[\"profilePath\"]],\".domainItem.value\"],null],true]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"td\"],[11,\"class\",\"property\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,0,[]],\"definition\",\"A brief definition for the domain item.\",[27,\"concat\",[[23,[\"profilePath\"]],\".domainItem.definition\"],null],true]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-domainitem/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-domainitem/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "KBzg5U1d", "block": "{\"symbols\":[\"citation\"],\"statements\":[[0,\"  \"],[1,[27,\"input/md-input\",null,[[\"label\",\"data-spy\",\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"Name\",\"Name\",[22,0,[]],\"name\",\"Descriptive name for the domain value.\",[27,\"concat\",[[23,[\"profilePath\"]],\".domainItem.name\"],null],true]]],false],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"label\",\"data-spy\",\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"Value\",\"Value\",[22,0,[]],\"value\",\"Value of the domain item.\",[27,\"concat\",[[23,[\"profilePath\"]],\".domainItem.value\"],null],true]]],false],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"label\",\"data-spy\",\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"Definition\",\"Definition\",[22,0,[]],\"definition\",\"A brief definition for the domain item.\",[27,\"concat\",[[23,[\"profilePath\"]],\".domainItem.definition\"],null],true]]],false],[0,\"\\n\\n\"],[4,\"with\",[[23,[\"model\",\"reference\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"shadow\"],[\"Item Reference\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".reference\"],null],\"Item Reference\",true]],{\"statements\":[[0,\"      Content\\n      \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"profilePath\",\"simpleIdentifier\",\"embedded\"],[[22,1,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".reference\"],null],true,true]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-domainitem/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-entity/component', ['exports', 'mdeditor/pods/components/object/md-attribute/component', 'ember-cp-validations', 'uuid/v4'], function (exports, _component, _emberCpValidations, _v) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'codeName': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'definition': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    init() {
      this._super(...arguments);
      (true && !(Ember.get(this, 'dictionary')) && Ember.assert(`You must supply a dictionary for ${this.toString()}.`, Ember.get(this, 'dictionary')));
    },

    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'entityId', Ember.getWithDefault(model, 'entityId', (0, _v.default)()));
        Ember.set(model, 'alias', Ember.getWithDefault(model, 'alias', []));
        Ember.set(model, 'primaryKeyAttributeCodeName', Ember.getWithDefault(model, 'primaryKeyAttributeCodeName', []));
        Ember.set(model, 'index', Ember.getWithDefault(model, 'index', []));
        Ember.set(model, 'attribute', Ember.getWithDefault(model, 'attribute', []));
        Ember.set(model, 'foreignKey', Ember.getWithDefault(model, 'foreignKey', []));
        Ember.set(model, 'entityReference', Ember.getWithDefault(model, 'entityReference', []));
      });
    },

    /**
     * The string representing the path in the profile object for the entity.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The parent dictionary object for this entity used to lookup references.
     *
     * @property dictionary
     * @type {Object}
     * @required
     */

    /**
     * The object to use as the data model for the entity.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form',

    foreignKeyTemplate: Ember.Object.extend((0, _emberCpValidations.buildValidations)({
      'referencedEntityCodeName': [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      })],
      'localAttributeCodeName': [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      }), (0, _emberCpValidations.validator)('array-required', {
        track: []
      })],
      'referencedAttributeCodeName': [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      }), (0, _emberCpValidations.validator)('array-required', {
        track: []
      })]
    }), {
      init() {
        this._super(...arguments);
        this.set('localAttributeCodeName', []);
        this.set('referencedAttributeCodeName', []);
      }
    }),

    indexTemplate: Ember.Object.extend((0, _emberCpValidations.buildValidations)({
      'codeName': [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      })],
      'allowDuplicates': [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      })],
      'attributeCodeName': [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      }), (0, _emberCpValidations.validator)('array-required', {
        track: []
      })]
    }), {
      init() {
        this._super(...arguments);
        this.set('attributeCodeName', []);
        this.set('allowDuplicates', false);
      }
    }),

    attributeTemplate: _component.Template,
    //entityId: alias('model.entityId'),
    codeName: Ember.computed.alias('model.codeName'),
    description: Ember.computed.alias('model.description'),
    entities: Ember.computed.alias('dictionary.entity'),
    attributes: Ember.computed.alias('model.attribute'),

    attributeList: Ember.computed('attributes.{@each.codeName,[]}', function () {
      let attr = Ember.get(this, 'model.attribute');
      if (attr) {
        return attr.map(attr => {
          return {
            codeId: Ember.get(attr, 'codeName'),
            codeName: Ember.get(attr, 'codeName'),
            tooltip: Ember.get(attr, 'definition')
          };
        });
      }
      return [];
    }),

    entityList: Ember.computed('entities.{@each.entityId,@each.codeName}', function () {
      return Ember.get(this, 'entities').map(attr => {
        if (Ember.get(attr, 'entityId')) {
          return {
            codeId: Ember.get(attr, 'entityId'),
            codeName: Ember.get(attr, 'codeName'),
            tooltip: Ember.get(attr, 'definition')
          };
        }
      });
    }),

    /**
     * The passed down editCitation method.
     *
     * @method editCitation
     * @param {Number} id
     * @required
     */

    /**
     * The passed down editAttribute method.
     *
     * @method editAttribute
     * @param {Number} id
     * @required
     */

    actions: {
      getEntityAttributes(id) {
        let entity = Ember.A(this.get('dictionary.entity')).findBy('entityId', id);

        if (entity) {
          let a = Ember.get(entity, 'attribute').map(attr => {
            return {
              codeId: Ember.get(attr, 'codeName'),
              codeName: Ember.get(attr, 'codeName'),
              tooltip: Ember.get(attr, 'definition')
            };
          });

          return a;
        }

        return [];
      },

      editCitation(id) {
        this.editCitation(id);
      },

      editAttribute(id) {
        this.editAttribute(id);
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-entity/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "K7TbH7EL", "block": "{\"symbols\":[\"itm\",\"fk\",\"val\"],\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"required\"],[\"Entity Information\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".information\"],null],\"Entity Information\",true]],{\"statements\":[[0,\"  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\",\"data-spy\",\"class\"],[[23,[\"model\",\"entityId\"]],\"Enter the identifier for the entity.\",\"Entity Identifier\",[27,\"concat\",[[23,[\"profilePath\"]],\".identifier\"],null],\"Identifier\",\"md-embedded\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"label\",\"data-spy\",\"profilePath\",\"class\"],[[22,0,[]],\"codeName\",\"Enter the name used to refer to the entity in schema definitions or application software.\",\"Code Name\",\"Code Name\",[27,\"concat\",[[23,[\"profilePath\"]],\".codeName\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"autoresize\",\"placeholder\",\"label\",\"data-spy\",\"embedded\",\"profilePath\"],[[23,[\"model\",\"definition\"]],true,true,\"A brief description of the entity.\",\"Definition\",\"Definition\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".definition\"],null]]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\",\"data-spy\",\"class\"],[[23,[\"model\",\"commonName\"]],\"Enter a short common name for the entity.\",\"Common Name\",[27,\"concat\",[[23,[\"profilePath\"]],\".commonName\"],null],\"Common Name\",\"md-embedded\"]]],false],[0,\"\\n\\n\"],[4,\"object/md-simple-array-table\",null,[[\"title\",\"required\",\"plain\",\"profilePath\",\"data-spy\",\"class\",\"value\"],[\"Alias\",false,true,[27,\"concat\",[[23,[\"profilePath\"]],\".alias\"],null],\"Alias\",\"md-embedded\",[23,[\"model\",\"alias\"]]]],{\"statements\":[[0,\"    \"],[7,\"td\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,3,[\"item\",\"value\"]],\"Alternate names used to identify this entity.\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"attributes\",\"items\",\"header\",\"shadow\",\"buttonText\",\"ellipsis\",\"previewTemplateTable\",\"editItem\",\"verticalButtons\",\"profilePath\",\"hideIndex\",\"condensed\",\"responsive\",\"editOnAdd\",\"scrollToId\",\"data-spy\",\"templateClass\"],[\"Name,Data Type, Definition, Allow Null?\",[23,[\"model\",\"attribute\"]],\"Attributes\",true,\"Add Attribute\",[23,[\"fallse\"]],\"object/md-attribute/preview\",[27,\"action\",[[22,0,[]],\"editAttribute\"],null],false,[23,[\"profilePath\"]],false,false,true,false,\"md-attribute\",\"Attributes\",[23,[\"attributeTemplate\"]]]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\"],[\"Entity Structure\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".structure\"],null],\"Entity Structure\"]],{\"statements\":[[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\",\"class\"],[[23,[\"model\",\"fieldSeparatorCharacter\"]],\"The character which indicates the end of data field contents.\",\"Field Separator Character\",[27,\"concat\",[[23,[\"profilePath\"]],\".structure.fieldSeparatorCharacter\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"type\",\"step\",\"model\",\"valuePath\",\"placeholder\",\"label\",\"profilePath\",\"class\"],[\"number\",1,[23,[\"model\"]],\"numberOfHeaderLines\",\"The number of lines at the beginning of the file.\",\"# Header Lines\",[27,\"concat\",[[23,[\"profilePath\"]],\".structure.numberOfHeaderLines\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\",\"class\"],[[23,[\"model\",\"quoteCharacter\"]],\"Character used to quote fields in the data representation.\",\"Quote Character\",[27,\"concat\",[[23,[\"profilePath\"]],\".structure.quoteCharacter\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\"],[\"Entity Keys\",true,false,[27,\"concat\",[[23,[\"profilePath\"]],\".keys\"],null],\"Entity Keys\"]],{\"statements\":[[0,\"\\n  \"],[1,[27,\"input/md-codelist-multi\",null,[[\"label\",\"value\",\"mapped\",\"create\",\"tooltip\",\"placeholder\",\"profilePath\",\"data-spy\",\"class\"],[\"Primary Key Attributes\",[23,[\"model\",\"primaryKeyAttributeCodeName\"]],[23,[\"attributeList\"]],true,true,\"The codeNames of the attributes that compose the primary key.\",[27,\"concat\",[[23,[\"profilePath\"]],\"keys.primaryKey\"],null],\"Primary\",\"md-embedded\"]]],false],[0,\"\\n\\n\"],[4,\"object/md-array-table\",null,[[\"columns\",\"value\",\"title\",\"class\",\"plain\",\"responsive\",\"templateClass\",\"profilePath\",\"data-spy\"],[\"Local Attributes,Referenced Entity,Referenced Attributes\",[23,[\"model\",\"foreignKey\"]],\"Foreign Key Attributes\",\"md-embedded\",true,true,[23,[\"foreignKeyTemplate\"]],[27,\"concat\",[[23,[\"profilePath\"]],\"keys.foreignKey\"],null],\"Foreign\"]],{\"statements\":[[0,\"    \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-codelist-multi\",null,[[\"model\",\"path\",\"mapped\",\"create\",\"tooltip\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,2,[\"item\"]],\"localAttributeCodeName\",[23,[\"attributeList\"]],true,true,\"Select the local(child) attributes that compose the foreign key.\",[27,\"concat\",[[23,[\"profilePath\"]],\".localAttributes\"],null],true]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-codelist\",null,[[\"model\",\"mapped\",\"create\",\"path\",\"placeholder\",\"showValidations\"],[[22,2,[\"item\"]],[23,[\"entityList\"]],true,\"referencedEntityCodeName\",\"Select the referenced (or parent) entity.\",true]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-codelist-multi\",null,[[\"model\",\"path\",\"mapped\",\"create\",\"tooltip\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,2,[\"item\"]],\"referencedAttributeCodeName\",[27,\"compute\",[[27,\"action\",[[22,0,[]],\"getEntityAttributes\"],null],[22,2,[\"item\",\"referencedEntityCodeName\"]]],null],true,true,\"Select the referenced(parent) attributes that compose the foreign key.\",[27,\"concat\",[[23,[\"profilePath\"]],\".referencedAttributes\"],null],true]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"object/md-array-table\",null,[[\"columns\",\"value\",\"title\",\"class\",\"responsive\",\"templateClass\",\"profilePath\",\"data-spy\"],[\"Name,Attributes,Duplicates?\",[23,[\"model\",\"index\"]],\"Entity Index\",\"md-embedded\",true,[23,[\"indexTemplate\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".index\"],null],\"Entity Indexes\"]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"showValidations\",\"profilePath\"],[[22,1,[\"item\"]],\"codeName\",\"Name of the index.\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".index.name\"],null]]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-codelist-multi\",null,[[\"model\",\"path\",\"mapped\",\"create\",\"tooltip\",\"placeholder\",\"profilePath\",\"showValidations\"],[[22,1,[\"item\"]],\"attributeCodeName\",[23,[\"attributeList\"]],true,true,\"Select or enter the attributes that compose the index key.\",[27,\"concat\",[[23,[\"profilePath\"]],\".index.attributes\"],null],true]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"td\"],[11,\"class\",\"text-center\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-boolean\",null,[[\"required\",\"value\",\"profilePath\"],[true,[22,1,[\"item\",\"allowDuplicates\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".index.allowDuplicates\"],null]]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\\n\"],[1,[27,\"object/md-citation-array\",null,[[\"model\",\"profilePath\",\"data-spy\",\"editItem\",\"label\"],[[23,[\"model\",\"entityReference\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".entityReference\"],null],\"Entity Reference\",[27,\"action\",[[22,0,[]],\"editCitation\"],null],\"Entity Reference\"]]],false],[0,\"\\n\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-entity/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-funding/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'allocation': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      disabled: Ember.computed.notEmpty('model.timePeriod')
    })],
    'timePeriod': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      disabled: Ember.computed.notEmpty('model.allocation')
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'allocation', Ember.getWithDefault(model, 'allocation', []));
        Ember.set(model, 'timePeriod', Ember.getWithDefault(model, 'timePeriod', {}));
      });
    },
    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form',
    allocation: Ember.computed.alias('model.allocation'),
    timePeriod: Ember.computed.alias('model.timePeriod')
  });
});
;define('mdeditor/pods/components/object/md-funding/preview/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});
;define("mdeditor/pods/components/object/md-funding/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "m4Uo4FQc", "block": "{\"symbols\":[\"model\",\"alloc\"],\"statements\":[[4,\"with\",[[23,[\"item\"]]],null,{\"statements\":[[0,\"  \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal\"],[9],[0,\"\\n\"],[0,\"    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n        \"],[7,\"label\"],[9],[0,\"Start Date:\"],[10],[0,\"\\n        \"],[1,[27,\"if\",[[22,1,[\"timePeriod\",\"startDateTime\"]],[27,\"moment-format\",[[22,1,[\"timePeriod\",\"startDateTime\"]],\"MM-DD-YYYY\"],null],\"Not defined\"],null],false],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n        \"],[7,\"label\"],[9],[0,\"End Date:\"],[10],[0,\"\\n        \"],[1,[27,\"if\",[[22,1,[\"timePeriod\",\"endDateTime\"]],[27,\"moment-format\",[[22,1,[\"timePeriod\",\"endDateTime\"]],\"MM-DD-YYYY\"],null],\"Not defined\"],null],false],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"table-responsive\"],[9],[0,\"\\n    \"],[7,\"table\"],[11,\"class\",\"table table-condensed table-bordered\"],[9],[0,\"\\n      \"],[7,\"thead\"],[9],[0,\"\\n        \"],[7,\"tr\"],[9],[0,\"\\n          \"],[7,\"th\"],[9],[0,\"Amount\"],[10],[0,\"\\n          \"],[7,\"th\"],[9],[0,\"Currency\"],[10],[0,\"\\n          \"],[7,\"th\"],[9],[0,\"Source\"],[10],[0,\"\\n          \"],[7,\"th\"],[9],[0,\"Recipient\"],[10],[0,\"\\n          \"],[7,\"th\"],[9],[0,\"Match?\"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[22,1,[\"allocation\"]]],null,{\"statements\":[[0,\"          \"],[7,\"tr\"],[9],[0,\"\\n            \"],[7,\"td\"],[9],[1,[27,\"get-dash\",[[22,2,[]],\"amount\"],null],false],[10],[0,\"\\n            \"],[7,\"td\"],[9],[1,[27,\"get-dash\",[[22,2,[]],\"currency\"],null],false],[10],[0,\"\\n            \"],[7,\"td\"],[9],[1,[27,\"control/md-contact-title\",null,[[\"contactId\",\"default\"],[[22,2,[\"sourceId\"]],\"--\"]]],false],[10],[0,\"\\n            \"],[7,\"td\"],[9],[1,[27,\"control/md-contact-title\",null,[[\"contactId\",\"default\"],[[22,2,[\"recipientId\"]],\"--\"]]],false],[10],[0,\"\\n            \"],[7,\"td\"],[9],[1,[27,\"get-dash\",[[22,2,[]],\"matching\"],null],false],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[2]},{\"statements\":[[0,\"          \"],[7,\"tr\"],[9],[0,\"\\n            \"],[7,\"td\"],[11,\"colspan\",\"5\"],[9],[0,\"No allocations found.\"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-funding/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-funding/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "fYsUaAlA", "block": "{\"symbols\":[\"editing\"],\"statements\":[[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"data-spy\",\"shadow\",\"buttonText\",\"ellipsis\",\"attributes\",\"profilePath\",\"collapsible\",\"isCollapsed\",\"verticalButtons\"],[[23,[\"model\",\"allocation\"]],\"Disbursement\",\"Disbursement\",true,\"Add Disbursement\",true,\"amount,currency,matching\",\"record.funding.allocation\",false,false,true]],{\"statements\":[[0,\"\\n  \"],[1,[27,\"object/md-allocation\",null,[[\"model\",\"profilePath\"],[[22,1,[]],\"record.funding.allocation\"]]],false],[0,\"\\n\\n\"]],\"parameters\":[1]},null],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"model\",\"timePeriod\"]]],null,{\"statements\":[[0,\"\\n\"],[1,[27,\"object/md-timePeriod\",null,[[\"model\",\"profilePath\"],[[23,[\"model\",\"timePeriod\"]],\"record.funding.timePeriod\"]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"maxlength\",\"value\",\"label\",\"data-spy\",\"placeholder\",\"profilePath\"],[500,[23,[\"model\",\"description\"]],\"Description\",\"Description\",\"Description: Less than 500 characters\",\"record.funding.timePeriod\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-funding/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-graphic-array/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    /**
     * mdEditor class for input and edit of mdJSON 'graphic' object arrays. The
     * class manages the maintenance of an array of graphic objects using the
     * md-object-table class.
     *
     * ```handlebars
     * \{{object/md-graphic-array
     *   model=model
     *   data-spy="Graphic"
     *   button-text="Add Graphic"
     *   label="Graphic"
     * }}
     * ```
     *
     * @class md-graphic-array
     * @constructor
     */

    attributeBindings: ['data-spy'],

    /**
     * mdJSON object containing the 'graphic' array.
     *
     * @property model
     * @type Object
     * @required
     */

    /**
     * List of mdJSON 'graphic' object attributes to display in
     * md-object-table to aid in choosing the onlineResource to edit or
     * delete.
     * The property is passed to md-object-table for configuration.
     *
     * @property attributes
     * @type String
     * @default 'name, uri'
     */
    attributes: 'fileName,fileDescription',

    /**
     * Name to place on the mdEditor panel header for entry and edit of
     * 'onlineResource' objects.
     * The property is passed to md-object-table for configuration.
     *
     * @property label
     * @type String
     * @default 'Graphic'
     */
    label: 'Graphic',

    /**
     * Label for the 'add item' button.
     * The property is passed to md-object-table for configuration.
     *
     * @property buttonText
     * @type String
     * @default 'Graphic'
     */
    buttonText: 'Add Graphic',

    previewTemplate: 'object/md-graphic-array/md-graphic-preview',

    templateClass: Ember.Object.extend({
      init() {
        this._super(...arguments);

        this.set('fileConstraint', Ember.A());
        this.set('fileUri', Ember.A());
      }
    })
  });
});
;define("mdeditor/pods/components/object/md-graphic-array/md-graphic-preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6xPp4tvl", "block": "{\"symbols\":[\"image\"],\"statements\":[[7,\"strong\"],[9],[1,[23,[\"item\",\"fileName\"]],false],[0,\":\"],[10],[0,\"\\n\"],[4,\"each\",[[23,[\"item\",\"fileUri\"]]],null,{\"statements\":[[4,\"if\",[[22,1,[\"uri\"]]],null,{\"statements\":[[0,\"    \"],[7,\"img\"],[12,\"src\",[22,1,[\"uri\"]]],[11,\"class\",\"md-logo-preview img-responsive img-thumbnail\"],[11,\"alt\",\"Image Preview\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-graphic-array/md-graphic-preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-graphic-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "pk/JI8R4", "block": "{\"symbols\":[\"editing\",\"&default\"],\"statements\":[[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"buttonText\",\"templateClass\",\"previewTemplate\",\"attributes\"],[[23,[\"model\"]],[23,[\"label\"]],[23,[\"buttonText\"]],[23,[\"templateClass\"]],[23,[\"previewTemplate\"]],[23,[\"attributes\"]]]],{\"statements\":[[0,\"    Editing: \"],[1,[22,1,[\"fileName\"]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"placeholder\",\"required\"],[[22,1,[\"fileName\"]],\"Name\",\"File Name\",true]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"placeholder\"],[[22,1,[\"fileType\"]],\"File Type\",\"Enter the file format(s) of the logo.\"]]],false],[0,\"\\n\\n    \"],[1,[27,\"input/md-textarea\",null,[[\"maxlength\",\"value\",\"label\",\"placeholder\"],[500,[22,1,[\"fileDescription\"]],\"Description\",\"Description of the file: Less than 500 characters\"]]],false],[0,\"\\n\\n    \"],[1,[27,\"object/md-online-resource-array\",null,[[\"shadow\",\"model\",\"ellipsis\",\"imagePicker\",\"profilePath\"],[false,[22,1,[\"fileUri\"]],true,true,[23,[\"profilePath\"]]]]],false],[0,\"\\n\\n\"]],\"parameters\":[1]},null],[14,2],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-graphic-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-identifier-array/component', ['exports', 'mdeditor/pods/components/object/md-identifier/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({

    init() {
      this._super(...arguments);

      if (!this.model) {
        this.set('model', Ember.A());
      }
    },

    /**
     * mdEditor class for input and edit of mdJSON 'identifier' object
     * arrays.
     * The class manages the maintenance of an array of identifier
     * objects using the md-objectroute-table class.
     *
     * @module mdeditor
     * @submodule components-object
     * @class md-identifier-array
     * @uses md-objectroute-table
     * @constructor
     */

    attributeBindings: ['data-spy'],

    /**
     * mdJSON object containing the 'identifier' array.
     *
     * @property model
     * @type Object
     * @required
     */

    /**
     * List of mdJSON 'identifier' object attributes to display in
     * md-object-table to aid in choosing the identifier to edit or
     * delete.
     * The property is passed to md-object-table for configuration.
     *
     * @property attributes
     * @type String
     * @default 'name, uri'
     */
    attributes: 'identifier,namespace,description',

    /**
     * Name to place on the mdEditor panel header for entry and edit of
     * 'identifier' objects.
     * The property is passed to md-object-table for configuration.
     *
     * @property label
     * @type String
     * @default 'Identifier'
     */
    label: 'Identifier',

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property templateClass
     * @type Ember.Object
     */
    templateClass: Ember.Object.extend(_component.Validations, {
      init() {
        this._super(...arguments);
        this.set('authority', {});
      }
    })
  });
});
;define("mdeditor/pods/components/object/md-identifier-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Ps7Ss6s8", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"object/md-objectroute-table\",null,[[\"items\",\"header\",\"buttonText\",\"ellipsis\",\"templateClass\",\"editItem\",\"attributes\"],[[23,[\"model\"]],[23,[\"label\"]],\"Add Identifier\",[23,[\"ellipsis\"]],[23,[\"templateClass\"]],[23,[\"editItem\"]],[23,[\"attributes\"]]]]],false],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-identifier-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-identifier-object-table/component', ['exports', 'mdeditor/pods/components/object/md-identifier-array/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * mdEditor class for input and edit of mdJSON 'identifier' object
     * arrays.
     * The class manages the maintenance of an array of identifier
     * objects using the md-object-table class.
     *
     * @module mdeditor
     * @submodule components-object
     * @class md-identifier-object-table
     * @uses md-object-table
     * @constructor
     */

    /**
     * Label for the panel
     *
     * @property label
     * @type {String}
     * @default undefined
     */

    /**
     * Array of identifiers
     *
     * @property model
     * @type {Array}
     * @default undefined
     */

    /**
     * Attributes displayed in the preview table.
     *
     * @property attributes
     * @type {String}
     * @default 'identifier,namespace'
     */
    attributes: 'identifier,namespace',

    ellipsis: true,

    /**
     * Default profile visibility
     *
     * @property visibility
     * @type {Boolean}
     * @default false
     */
    visibility: false
  });
});
;define("mdeditor/pods/components/object/md-identifier-object-table/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "jNzjeSQM", "block": "{\"symbols\":[\"editing\"],\"statements\":[[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"buttonText\",\"ellipsis\",\"templateClass\",\"attributes\"],[[23,[\"model\"]],[23,[\"label\"]],\"Add Identifier\",[23,[\"ellipsis\"]],[23,[\"templateClass\"]],[23,[\"attributes\"]]]],{\"statements\":[[0,\"\\n\"],[1,[27,\"object/md-identifier\",null,[[\"model\",\"short\",\"profilePath\"],[[22,1,[]],[23,[\"short\"]],[23,[\"profilePath\"]]]]],false],[0,\"\\n\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-identifier-object-table/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-identifier/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Validations = undefined;


  const Validations = (0, _emberCpValidations.buildValidations)({
    'identifier': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  const theComp = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.getWithDefault(this, 'model', {}) || {};

      Ember.run.once(this, function () {
        Ember.set(model, 'authority', Ember.getWithDefault(model, 'authority', {}));
      });
    },

    classNames: ['md-identifier'],
    attributeBindings: ['data-spy'],

    /**
     * The identifier object to render
     *
     * @property model
     * @type {object}
     * @required
     */

    /**
     * Render short form of the identifier template, i.e. no authority
     *
     * @property short
     * @type {Boolean}
     */

    /**
     * Determines whether to render identifier field with confirmation button
     *
     * @property confirmIdentifier
     * @type {Boolean}
     */

    identifier: Ember.computed.alias('model.identifier')
  });

  exports.Validations = Validations;
  exports.default = theComp;
});
;define("mdeditor/pods/components/object/md-identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Fg8zA9Jv", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"component\",[[27,\"if\",[[23,[\"confirmIdentifier\"]],\"input/md-input-confirm\",\"input/md-input\"],null]],[[\"valuePath\",\"model\",\"confirmTip\",\"placeholder\",\"label\",\"required\",\"showValidations\",\"profilePath\",\"data-spy\",\"class\"],[\"identifier\",[22,0,[]],\"Note! Editing the identifier may break links. Be aware.\",\"Enter the identifier for the resource\",\"Identifier\",true,true,[27,\"concat\",[[23,[\"profilePath\"]],\".identifier\"],null],[27,\"if\",[[23,[\"data-spy\"]],\"Identifier\"],null],\"md-embedded\"]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-codelist\",null,[[\"label\",\"data-spy\",\"class\",\"placeholder\",\"create\",\"required\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"mdCodeName\",\"valuePath\",\"value\",\"profilePath\"],[\"Namespace\",[27,\"if\",[[23,[\"data-spy\"]],\"Namespace\"],null],\"md-embedded\",\"Select or type a namespace for the identifier.\",true,false,true,false,[23,[\"disabled\"]],true,\"namespace\",\"code\",[23,[\"model\",\"namespace\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".namespace\"],null]]]],false],[0,\"\\n\\n\\n\"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"version\"]],\"Enter the version for the identifier.\",\"Version\",[27,\"concat\",[[23,[\"profilePath\"]],\".version\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\"],[[23,[\"model\",\"description\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".description\"],null],\"Description\",\"Enter a description of the identifier.\"]]],false],[0,\"\\n\\n\"],[4,\"unless\",[[23,[\"short\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"profilePath\",\"shadow\",\"collapsible\",\"data-spy\",\"content\"],[\"Authority\",[27,\"concat\",[[23,[\"profilePath\"]],\".authority\"],null],true,true,[27,\"if\",[[23,[\"data-spy\"]],\"Authority\"],null],[23,[\"model\",\"authority\"]]]],{\"statements\":[[0,\"    \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"profilePath\",\"embedded\",\"data-spy\",\"simpleIdentifier\"],[[23,[\"model\",\"authority\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".authority\"],null],true,[23,[\"data-spy\"]],true]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-identifier/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-keyword-citation/component', ['exports', 'mdeditor/pods/components/object/md-online-resource/component', 'ember-cp-validations'], function (exports, _component, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'onlineResource': [(0, _emberCpValidations.validator)('format', {
      regex: _component.regex,
      isWarning: true,
      message: 'This field should be a valid, resolvable uri.',
      dependentKeys: ['onlineResource', 'model.thesaurus.onlineResource.0.uri']
    })],
    title: (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })
  });

  exports.default = Ember.Component.extend(Validations, {
    disabled: Ember.computed('model.thesaurus.identifier.0.identifier', function () {
      return this.get('model.thesaurus.identifier.0.identifier') !== 'custom';
    }),
    title: Ember.computed.alias('model.thesaurus.title'),
    onlineResource: Ember.computed('model.thesaurus.onlineResource.0.uri', {
      get() {
        return this.get('model.thesaurus.onlineResource.0.uri');
      },
      set(key, value) {
        let ol = this.get('model.thesaurus.onlineResource');
        if (!Ember.isArray(ol)) {
          this.set('model.thesaurus.onlineResource', [{}]);
        }
        this.set('model.thesaurus.onlineResource.0.uri', value);
        return value;
      }
    }),
    date: Ember.computed('model.thesaurus.date.0.date', {
      get() {
        return this.get('model.thesaurus.date.0.date');
      },
      set(key, value) {
        let ol = this.get('model.thesaurus.date');
        if (!Ember.isArray(ol)) {
          this.set('model.thesaurus.date', [{}]);
        }
        this.set('model.thesaurus.date.0.date', value);
        return value;
      }
    }),
    dateType: Ember.computed('model.thesaurus.date.0.dateType', {
      get() {
        return this.get('model.thesaurus.date.0.dateType');
      },
      set(key, value) {
        let ol = this.get('model.thesaurus.date');
        if (!Ember.isArray(ol)) {
          this.set('model.thesaurus.date', [{}]);
        }
        this.set('model.thesaurus.date.0.dateType', value);
        return value;
      }
    })
  });
});
;define("mdeditor/pods/components/object/md-keyword-citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "f7ofq9bm", "block": "{\"symbols\":[\"thesaurus\",\"&default\"],\"statements\":[[4,\"with\",[[23,[\"model\",\"thesaurus\"]]],null,{\"statements\":[[7,\"form\"],[11,\"class\",\"md-keyword-citation form-horizontal\"],[9],[0,\"\\n  \"],[7,\"fieldset\"],[12,\"disabled\",[21,\"disabled\"]],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"col-sm-2 control-label required\"],[9],[0,\"Title\"],[10],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"class\",\"placeholder\",\"valuePath\",\"model\",\"showValidations\",\"required\"],[\"col-sm-10\",\"Enter title\",\"title\",[22,0,[]],true,true]]],false],[0,\"\\n    \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n        \"],[7,\"label\"],[11,\"class\",\"col-sm-2 control-label\"],[9],[0,\"Date\"],[10],[0,\"\\n        \"],[1,[27,\"input/md-datetime\",null,[[\"date\",\"class\"],[[23,[\"date\"]],\"col-xxl-4 col-md-10 col-sm-4\"]]],false],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group clearfix visible-md-block visible-lg-block\"],[9],[10],[0,\"\\n        \"],[7,\"label\"],[11,\"class\",\"col-sm-2 control-label\"],[9],[0,\"Date Type\"],[10],[0,\"\\n        \"],[1,[27,\"input/md-codelist\",null,[[\"class\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"mdCodeName\",\"value\",\"placeholder\"],[\"col-xxl-4 col-md-10 col-sm-4\",false,true,false,[23,[\"disabled\"]],true,\"dateType\",[23,[\"dateType\"]],\"Choose date type\"]]],false],[0,\"\\n      \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"col-sm-2 control-label\"],[9],[0,\"Type\"],[10],[0,\"\\n      \"],[1,[27,\"input/md-codelist\",null,[[\"class\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"mdCodeName\",\"value\",\"placeholder\"],[\"col-xxl-5 col-lg-7 col-sm-10\",true,true,false,[23,[\"disabled\"]],true,\"keywordType\",[23,[\"model\",\"keywordType\"]],\"Choose keyword type\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"col-sm-2 control-label\"],[9],[0,\"Edition\"],[10],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"class\",\"placeholder\",\"value\",\"required\"],[\"col-sm-10\",\"Enter edition or version\",[22,1,[\"edition\"]],false]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"col-sm-2 control-label\"],[9],[0,\"URL\"],[10],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"class\",\"type\",\"valuePath\",\"model\",\"showValidations\",\"placeholder\"],[\"col-sm-10\",\"url\",\"onlineResource\",[22,0,[]],true,\"Enter online link\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[14,2],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-keyword-citation/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-keyword-list/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    readOnly: Ember.computed('model.thesaurus.identifier.0.identifier', function () {
      return this.get('model.thesaurus.identifier.0.identifier') !== 'custom';
    }),

    actions: {
      addKeyword(model) {
        this.addKeyword(model);
      },
      deleteKeyword(model, object) {
        this.deleteKeyword(model, object);
      },
      hideThesaurus(el) {
        Ember.$(el).closest('.md-keywords-container').toggleClass('hide-thesaurus');
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-keyword-list/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "mEEie29x", "block": "{\"symbols\":[\"keyword\",\"keyword\",\"&default\"],\"statements\":[[4,\"unless\",[[23,[\"readOnly\"]]],null,{\"statements\":[[0,\"  \"],[7,\"table\"],[11,\"class\",\"table table-striped table-hover fadeIn\"],[9],[0,\"\\n    \"],[7,\"thead\"],[9],[0,\"\\n      \"],[7,\"tr\"],[9],[0,\"\\n        \"],[7,\"th\"],[9],[0,\"Keyword\"],[10],[0,\"\\n        \"],[7,\"th\"],[9],[0,\"Id (Optional)\"],[10],[0,\"\\n        \"],[7,\"th\"],[9],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"keyword\"]]],null,{\"statements\":[[0,\"        \"],[7,\"tr\"],[9],[0,\"\\n          \"],[7,\"td\"],[9],[0,\"\\n            \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"keyword\"]],\"Keyword\"]]],false],[0,\"\\n          \"],[10],[0,\"\\n          \"],[7,\"td\"],[9],[0,\"\\n            \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"identifier\"]],\"Unique identifier\"]]],false],[0,\"\\n          \"],[10],[0,\"\\n          \"],[7,\"td\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"md-button-column\"],[9],[0,\"\\n              \"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-danger\"],[3,\"action\",[[22,0,[]],\"deleteKeyword\",[23,[\"model\",\"keyword\"]],[22,2,[]]]],[9],[0,\"\\n                \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[2]},{\"statements\":[[0,\"  \"],[7,\"tr\"],[9],[0,\"\\n    \"],[7,\"td\"],[11,\"colspan\",\"3\"],[9],[0,\"\\n      Add some keywords.\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[7,\"tr\"],[9],[0,\"\\n        \"],[7,\"td\"],[11,\"colspan\",\"3\"],[9],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addKeyword\",[23,[\"model\",\"keyword\"]]]],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Keyword\\n          \"],[10],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-info\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"hideThesaurus\",[22,0,[\"element\"]]]],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"eye\"],null],false],[0,\" Toggle Thesaurus\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"\\n  \"],[7,\"ul\"],[11,\"class\",\"list-group\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"keyword\"]]],null,{\"statements\":[[0,\"      \"],[7,\"li\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-danger pull-right\"],[3,\"action\",[[22,0,[]],\"deleteKeyword\",[23,[\"model\",\"keyword\"]],[22,1,[]]]],[9],[0,\"\\n          \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete\\n        \"],[10],[0,\"\\n        \"],[1,[22,1,[\"keyword\"]],false],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"    \"],[7,\"li\"],[11,\"class\",\"list-group-item\"],[9],[0,\"Add some keywords.\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[4,\"if\",[[23,[\"editThesaurus\"]]],null,{\"statements\":[[0,\"    \"],[7,\"li\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n      \"],[7,\"button\"],[11,\"class\",\"btn btn-block btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[23,[\"editThesaurus\"]],[23,[\"listId\"]]]],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit keywords.\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-keyword-list/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-lineage/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(function () {
        Ember.set(model, 'scope', Ember.getWithDefault(model, 'scope', {}));
        Ember.set(model, 'citation', Ember.getWithDefault(model, 'citation', []));
        Ember.set(model, 'processStep', Ember.getWithDefault(model, 'processStep', []));
        Ember.set(model, 'source', Ember.getWithDefault(model, 'source', []));
      });
    },

    tagName: 'form',

    /**
     * The string representing the path in the profile object for the citation.
     *
     * @property profilePath
     * @type {String}
     * @default "false"
     * @required
     */

    /**
     * The object to use as the data model for the citation.
     *
     * @property model
     * @type {Object}
     * @required
     */

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property stepTemplateClass
     * @type Ember.Object
     */
    stepTemplateClass: Ember.Object.extend({
      init() {
        this._super(...arguments);
        this.set('timePeriod', {});
      }
    }),

    sourceTemplate: Ember.Object.extend()
  });
});
;define('mdeditor/pods/components/object/md-lineage/preview/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    showMore: false,
    limit: 1,
    showLimit: Ember.computed('limit', 'showMore', function () {
      return this.showMore ? 100 : this.limit;
    })
  });
});
;define("mdeditor/pods/components/object/md-lineage/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "xKcZbyeq", "block": "{\"symbols\":[\"step\",\"i\"],\"statements\":[[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n    \"],[7,\"dt\"],[9],[0,\"\\n      \"],[7,\"h4\"],[11,\"class\",\"text-info\"],[9],[0,\"Lineage #\"],[1,[21,\"index\"],false],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"dd\"],[9],[10],[0,\"\\n    \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Statement\",[27,\"word-limit\",[[23,[\"item\",\"statement\"]]],[[\"wordLength\"],[20]]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-12\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Process Step\"]],{\"statements\":[[4,\"each\",[[23,[\"item\",\"processStep\"]]],null,{\"statements\":[[4,\"if\",[[27,\"lt\",[[22,2,[]],[23,[\"showLimit\"]]],null]],null,{\"statements\":[[0,\"          \"],[7,\"p\"],[9],[0,\"\\n            \"],[7,\"span\"],[11,\"class\",\"text-info\"],[9],[1,[27,\"if\",[[22,1,[\"stepId\"]],[22,1,[\"stepId\"]],[22,2,[]]],null],false],[10],[0,\": \"],[1,[27,\"word-limit\",[[22,1,[\"description\"]]],[[\"limit\",\"wordLength\"],[20,20]]],false],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1,2]},{\"statements\":[[0,\"            \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No proces steps assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[4,\"if\",[[23,[\"item\",\"processStep\",\"length\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"showMore\"]]],null,{\"statements\":[[0,\"      \"],[7,\"p\"],[11,\"class\",\"text-right\"],[9],[0,\"\\n        \"],[7,\"a\"],[11,\"role\",\"button\"],[11,\"class\",\"plain-link\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"toggle\",[\"showMore\",[22,0,[]]],null]]],[9],[0,\" \"],[1,[27,\"fa-icon\",[\"caret-up\"],null],false],[0,\" Less\"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[7,\"p\"],[11,\"class\",\"text-right\"],[9],[0,\"\\n        \"],[7,\"a\"],[11,\"role\",\"button\"],[11,\"class\",\"plain-link\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"toggle\",[\"showMore\",[22,0,[]]],null]]],[9],[1,[27,\"fa-icon\",[\"caret-down\"],null],false],[0,\" More\"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-lineage/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-lineage/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "pdW5GyIF", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\",\"data-spy\",\"required\",\"autoresize\",\"maxrows\"],[[23,[\"model\",\"statement\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".statement\"],null],\"Statement\",\"A general statement of the actions taken to verify, transform, repair, and integrate the resource.\",\"Statement\",true,true,25]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"attributes\",\"items\",\"header\",\"buttonText\",\"ellipsis\",\"previewTemplateTable\",\"templateClass\",\"editItem\",\"profilePath\",\"verticalButtons\",\"hideIndex\",\"condensed\",\"editOnAdd\",\"scrollToId\",\"data-spy\"],[\"description\",[23,[\"model\",\"processStep\"]],\"Process Step\",\"Add Step\",false,\"object/md-source/preview\",[23,[\"stepTemplateClass\"]],[23,[\"editProcessStep\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".processStep\"],null],true,false,false,false,\"md-process-step\",\"Process Step\"]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"attributes\",\"items\",\"header\",\"shadow\",\"buttonText\",\"ellipsis\",\"previewTemplateTable\",\"editItem\",\"profilePath\",\"verticalButtons\",\"hideIndex\",\"condensed\",\"editOnAdd\",\"scrollToId\",\"data-spy\"],[\"description\",[23,[\"model\",\"source\"]],\"Source\",true,\"Add Source\",false,\"object/md-source/preview\",[23,[\"editSource\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".source\"],null],true,false,false,false,\"md-source\",\"Source\"]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-citation-array\",null,[[\"model\",\"profilePath\",\"data-spy\",\"editItem\",\"label\"],[[23,[\"model\",\"citation\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".citation\"],null],\"Lineage Citation\",[23,[\"editCitation\"]],\"Citation\"]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"profilePath\",\"data-spy\"],[[23,[\"model\",\"scope\",\"scopeCode\"]],\"Scope\",true,true,true,\"scope\",false,\"Select type of resource.\",[27,\"concat\",[[23,[\"profilePath\"]],\".scope\"],null],\"Scope\"]]],false],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-lineage/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-locale-array/component', ['exports', 'mdeditor/pods/components/object/md-locale/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    attributeBindings: ['data-spy'],

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property templateClass
     * @type Ember.Object
     */
    templateClass: _component.Template
  });
});
;define("mdeditor/pods/components/object/md-locale-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+enL2f9A", "block": "{\"symbols\":[\"locale\",\"item\"],\"statements\":[[4,\"object/md-array-table\",null,[[\"columns\",\"title\",\"required\",\"plain\",\"value\",\"validation\",\"data-spy\",\"templateClass\"],[\"Language,Character Set,Country\",[23,[\"title\"]],[23,[\"required\"]],[23,[\"plain\"]],[23,[\"value\"]],[23,[\"validation\"]],false,[23,[\"templateClass\"]]]],{\"statements\":[[4,\"with\",[[22,1,[\"item\"]]],null,{\"statements\":[[0,\"     \"],[7,\"td\"],[9],[0,\"\\n       \"],[1,[27,\"input/md-codelist\",null,[[\"path\",\"model\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"showValidations\",\"placeholder\"],[\"language\",[22,2,[]],true,true,false,[23,[\"disabled\"]],\"language\",true,\"Select or enter a language code.\"]]],false],[0,\"\\n     \"],[10],[0,\"\\n     \"],[7,\"td\"],[9],[0,\"\\n       \"],[1,[27,\"input/md-codelist\",null,[[\"path\",\"model\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"showValidations\",\"placeholder\"],[\"characterSet\",[22,2,[]],false,true,false,[23,[\"disabled\"]],\"characterSet\",true,\"Select character set.\"]]],false],[0,\"\\n     \"],[10],[0,\"\\n     \"],[7,\"td\"],[9],[0,\"\\n       \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"placeholder\"],[[22,2,[\"country\"]],false,true,false,[23,[\"disabled\"]],\"countries\",\"Select country code.\"]]],false],[0,\"\\n     \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-locale-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-locale/component', ['exports', 'ember-cp-validations', 'ember-copy'], function (exports, _emberCpValidations, _emberCopy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Validations = undefined;


  const Validations = (0, _emberCpValidations.buildValidations)({
    'language': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }),
    'characterSet': (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })
  });

  const theComp = Ember.Component.extend(Validations, {
    settings: Ember.inject.service(),

    didReceiveAttrs() {
      this._super(...arguments);

      let model = this.model || {};
      let settings = Ember.get(this, 'settings.data');

      (true && !(!Ember.isNone(model)) && Ember.assert('Model passed to md-locale must be an object', !Ember.isNone(model)));


      if (Object.keys(model).length === 0) {
        Ember.run.once(() => {
          Ember.setProperties(model, {
            language: (0, _emberCopy.copy)(settings.get('language')),
            characterSet: (0, _emberCopy.copy)(settings.get('characterSet')),
            country: (0, _emberCopy.copy)(settings.get('country'))
          });
        });
      }
    },

    language: Ember.computed.alias('model.language'),
    characterSet: Ember.computed.alias('model.characterSet')
  });

  exports.Validations = Validations;
  exports.default = theComp;
});
;define("mdeditor/pods/components/object/md-locale/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VjKN88HF", "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-md-4\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"path\",\"model\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"label\",\"showValidations\",\"placeholder\"],[\"language\",[22,0,[]],true,true,false,[23,[\"disabled\"]],\"language\",\"Language\",true,\"Select or enter a language code.\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-md-4\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"path\",\"model\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"label\",\"showValidations\",\"placeholder\"],[\"characterSet\",[22,0,[]],false,true,false,[23,[\"disabled\"]],\"characterSet\",\"Character Set\",true,\"Select character set.\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-md-4\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"label\",\"placeholder\"],[[23,[\"model\",\"country\"]],false,true,false,[23,[\"disabled\"]],\"countries\",\"Country\",\"Select country code.\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-locale/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-maintenance/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const formatMaint = function formatMaint(model) {
    Ember.setProperties(model, {
      'date': Ember.getWithDefault(model, 'date', []),
      'scope': Ember.getWithDefault(model, 'scope', []),
      'note': Ember.getWithDefault(model, 'note', []),
      'contact': Ember.getWithDefault(model, 'contact', [])
    });

    return model;
  };

  const theComp = Ember.Component.extend({
    /**
     * mdEditor class for input and edit of mdJSON 'maintenance' objects.
     *
     * @class md-maintenance
     * @constructor
     *   myClass = new MyClass()
     */

    tagName: 'form',

    /**
     * The string representing the path in the profile object.
     *
     * @property profilePath
     * @type {String}
     * @default "false"
     * @required
     */

    /**
     * The object to use as the data model.
     *
     * @property model
     * @type {Object}
     * @required
     */

    /**
     * Setup default values for the model.
     *
     * @method didReceiveAttrs
     */
    didReceiveAttrs() {
      this._super(...arguments);

      Ember.run.once(this, function () {
        this.set('model', Ember.getWithDefault(this, 'model', {}));
        formatMaint(this.model);
      });
    },

    scopes: Ember.computed('scope', {
      get() {
        let scope = Ember.get(this, 'model.scope');
        return scope ? scope.mapBy('scopeCode') : [];
      },
      set(key, value) {
        let map = value.map(itm => {
          return {
            scopeCode: itm
          };
        });
        Ember.set(this, 'model.scope', map);
        return value;
      }
    })
  });

  exports.formatMaint = formatMaint;
  exports.default = theComp;
});
;define("mdeditor/pods/components/object/md-maintenance/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "EKVnRj/7", "block": "{\"symbols\":[\"val\",\"&default\"],\"statements\":[[1,[27,\"input/md-codelist\",null,[[\"label\",\"create\",\"required\",\"tooltip\",\"icon\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"value\",\"placeholder\",\"profilePath\"],[\"Frequency\",true,true,true,false,true,true,\"maintenanceFrequency\",[23,[\"model\",\"frequency\"]],\"Choose a value.\",[27,\"concat\",[[23,[\"profilePath\"]],\".frequency\"],null]]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\",\"data-spy\",\"class\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".date\"],null],\"Dates\",\"md-embedded\"]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-date-array\",null,[[\"value\",\"plain\",\"data-spy\"],[[23,[\"model\",\"date\"]],true,false]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".contact\"],null]]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-party-array\",null,[[\"title\",\"data-spy\",\"collapsible\",\"collapsed\",\"required\",\"value\",\"class\",\"plain\"],[\"Contact\",\"Contacts\",true,false,false,[23,[\"model\",\"contact\"]],\"md-embedded\",true]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".note\"],null]]],{\"statements\":[[4,\"object/md-simple-array-table\",null,[[\"title\",\"required\",\"plain\",\"class\",\"value\"],[\"Notes\",false,true,\"md-embedded\",[23,[\"model\",\"note\"]]]],{\"statements\":[[0,\"    \"],[7,\"td\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\"],[[22,1,[\"item\",\"value\"]],\"Enter notes regarding the maintenance of the resource.\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"input/md-codelist-multi\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"profilePath\"],[[23,[\"scopes\"]],\"Scope\",true,true,true,\"scope\",false,\"Select type of resource.\",[27,\"concat\",[[23,[\"profilePath\"]],\".scope\"],null]]]],false],[0,\"\\n\\n\"],[14,2],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-maintenance/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-medium/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(function () {
        Ember.set(model, 'mediumSpecification', Ember.getWithDefault(model, 'mediumSpecification', {}));
        Ember.set(model, 'identifier', Ember.getWithDefault(model, 'identifier', {}));
        Ember.set(model, 'mediumFormat', Ember.getWithDefault(model, 'mediumFormat', []));
      });
    },
    tagName: 'form',

    /**
     * The profile path for the component
     *
     * @property profilePath
     * @type {String}
     */

    title: Ember.computed.alias('model.mediumSpecification.title')
  });
});
;define("mdeditor/pods/components/object/md-medium/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VVgrEak0", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"input/md-input\",null,[[\"label\",\"value\",\"placeholder\"],[\"Medium Title\",[23,[\"model\",\"mediumSpecification\",\"title\"]],\"Name of the medium\"]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"profilePath\",\"plain\"],[false,false,[27,\"concat\",[[23,[\"profilePath\"]],\".storage\"],null],true]],{\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"label\"],[11,\"class\",\"text-info col-md-2\"],[9],[0,\"Storage\"],[10],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"type\",\"value\",\"step\",\"label\",\"placeholder\",\"profilePath\",\"class\"],[\"number\",[23,[\"model\",\"density\"]],\"0.01\",\"Density\",\"Density at which the data are recorded.\",[27,\"concat\",[[23,[\"profilePath\"]],\".density\"],null],\"col-md-3\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"profilePath\",\"placeholder\",\"class\"],[[23,[\"model\",\"units\"]],\"Density Units\",[27,\"concat\",[[23,[\"profilePath\"]],\".units\"],null],\"Units of measure for the recording density.\",\"col-md-3\"]]],false],[0,\"\\n\\n  \"],[1,[27,\"input/md-input\",null,[[\"type\",\"value\",\"step\",\"label\",\"placeholder\",\"profilePath\",\"class\"],[\"number\",[23,[\"model\",\"numberOfVolumes\"]],\"1\",\"Number Of Volumes\",\"The number of volumes in the media resource.\",[27,\"concat\",[[23,[\"profilePath\"]],\".numberOfVolumes\"],null],\"col-md-3\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-codelist-multi\",null,[[\"label\",\"value\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"class\",\"profilePath\"],[\"Storage Format\",[23,[\"model\",\"mediumFormat\"]],true,true,false,\"mediumFormat\",false,\"Method used to write to the medium.\",\"col-sm-10 col-sm-offset-2\",[27,\"concat\",[[23,[\"profilePath\"]],\".mediumFormat\"],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"plain\",\"profilePath\"],[false,false,true,[27,\"concat\",[[23,[\"profilePath\"]],\".identifier\"],null]]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-identifier\",null,[[\"profilePath\",\"short\",\"model\"],[[27,\"concat\",[[23,[\"profilePath\"]],\".identifier\"],null],true,[23,[\"model\",\"identifier\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"autoresize\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"note\"]],false,\"Describe other limitations or requirements for using the medium.\",\"Note\",[27,\"concat\",[[23,[\"profilePath\"]],\".note\"],null]]]],false],[0,\"\\n\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-medium/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-object-table/component', ['exports', 'mdeditor/mixins/object-template', 'ember-in-viewport'], function (exports, _objectTemplate, _emberInViewport) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend(_emberInViewport.default, _objectTemplate.default, {

    /**
     * mdEditor class for managing a table of similar mdJSON objects
     * for selection for edit or deletion.
     * The class is configurable for reuse with mdJSON object arrays.
     *
     * ```handlebars
     * \{{#object/md-object-table
     *  items=model
     *  header=label
     *  buttonText=buttonText
     *  templateClass=templateClass
     *  previewTemplate=previewTemplate
     *  ellipsis=ellipsis
     *  attributes=attributes as |editing|
     * }}
     *
     * {{/object/md-object-table}}
     * ```
     *
     * @class md-object-table
     * @submodule components-object
     * @module mdeditor
     * @constructor
     * @uses object-template
     */

    spotlight: Ember.inject.service(),

    didReceiveAttrs() {
      this._super(...arguments);

      this.applyTemplateArray('items');
    },

    attributeBindings: ['data-spy'],
    classNameBindings: ['shadow:box-shadow--4dp'],
    classNames: ['md-object-table'],

    //reset the 'editing' flag
    didUpdateAttrs() {
      this._super(...arguments);
      this.set('editing', false);
    },

    /**
     * Array of the mdJSON object to display in the object table for
     * selection to edit or delete.
     *
     * @property items
     * @type Array
     * @default Ember.A()
     * @required
     */
    items: Ember.A(),

    /**
     * List of items object attributes to display in
     * md-object-table to aid in choosing the item to edit or
     * delete.
     *
     * @property attributes
     * @type String
     * @required
     */

    /**
     * Name to place on the mdEditor panel header for entry and edit of
     * items objects.
     *
     * @property header
     * @type String
     * @required
     */

    /**
     * The path of template to render in the table preview for each row.
     * Template content will be wrapped in a `<td>` element.
     *
     * @property previewTemplate
     * @type {String}
     * @optional
     * @default undefined
     */

    /**
     * The path of template to render in the table preview for each row.
     * Template content will NOT be wrapped in a `<td>` element. The `property`
     * class should be applied to each `<td>`.`
     *
     * @property previewTemplateTable
     * @type {String}
     * @optional
     * @default undefined
     */

    /**
     * The prefix to use for creating the id for each row element. A dash,'-',
     * followed by the item array index will be appended to the prefix to form the
     * id.
     *
     * @property scrollToId
     * @type {String}
     * @optional
     * @default undefined
     */

    /**
     * The template class to use for new items. This should be a constructor.
     * Objects should be created by extending Ember.Object.
     *  ```javascript
     *  Ember.Object.extend({
     *    init() {
     *      this._super(...arguments);
     *
     *      this.set('foo', A());
     *      this.set('bar', A());
     *    }
     *  })
     *  ```
     *
     * @property templateClass
     * @type {Any}
     * @constructor
     * @default null
     * @required
     */
    templateClass: null,

    /**
     * Determines add button text
     *
     * @property buttonText
     * @type String
     * @default Add
     */
    buttonText: "Add",

    /**
     * Render the row actions vertically.
     *
     * @property verticalButtons
     * @type {Boolean}
     * @default undefined
     */

    /**
     * Inital collapse state for the panel.
     *
     * @property isCollapsed
     * @type {Boolean}
     * @default undefined
     */

    /**
     * Indicates at least one object is required.
     *
     * @property required
     * @type {Boolean}
     * @default undefined
     */

    /**
     * Whether the panel is collapsible.
     *
     * @property collapsible
     * @type {Boolean}
     * @default true
     */
    collapsible: true,

    /**
     * True to truncate the preview table cell text.
     *
     * @property ellipsis
     * @type {Boolean}
     * @default undefined
     */

    /**
     * If true, a box shadow will be rendered around the panel.
     *
     * @property shadow
     * @type {Boolean}
     * @default true
     */
    shadow: true,

    /**
     * If true, an alert will be rendered with an "add" button when no items are
     * present.
     *
     * @property alertIfEmpty
     * @type {Boolean}
     * @default false
     */
    alertIfEmpty: false,

    /**
     * The height to offset from top of container when scrolling.
     *
     * @property offset
     * @type {Number}
     * @default 130
     */
    offset: 130,

    /**
     * Uses isCollapsed if defined, otherwise inspects array length.
     *
     * @property collapsed
     * @type {Boolean}
     * @readOnly
     * @category computed
     * @requires isCollapsed
     */
    collapsed: Ember.computed('isCollapsed', 'items.[]', function () {
      let isCollapsed = this.isCollapsed;
      let value = this.items;

      if (isCollapsed !== undefined) {
        return isCollapsed;
      } else if (value && value.length > 0) {
        return false;
      } else {
        return true;
      }
    }),

    /**
     * Render an alert if the items array is empty and alertIfEmpty is true.
     *
     * @property showAlert
     * @type {Boolean}
     * @default "false"
     * @readOnly
     * @category computed
     * @requires items.length,alertIfEmpty
     */
    showAlert: Ember.computed('items.length', 'alertIfEmpty', function () {
      return Ember.get(this, 'items.length') === 0 && Ember.get(this, 'alertIfEmpty');
    }),

    panelId: Ember.computed('items.@each.val', 'editing', function () {
      return 'panel-' + this.elementId;
    }),

    btnSize: Ember.computed('verticalButtons', function () {
      return this.verticalButtons ? 'md' : 'xs';
    }),

    /**
     * Render the footer if the items array length is greater than 5.
     *
     * @property showFooter
     * @type {Boolean}
     * @readOnly
     * @category computed
     * @requires items.length
     */
    showFooter: Ember.computed.gt('items.length', 5),

    /*citems: computed('items.@each.val', function () {
      let i = this.get('items')
        .map(function (itm) {
          return Ember.Object.create(itm);
        });
      return i;
    }),*/

    attrArray: Ember.computed('attributes', function () {
      let attr = this.attributes;

      return attr ? attr.split(',') : null;
    }),

    attrTitleArray: Ember.computed('attrArray', function () {
      return this.attrArray.map(function (item) {
        return item.trim().split('.').get('lastObject').dasherize().replace(/-/g, ' ');
      });
    }),

    editing: false,

    scrollTo(el) {
      let offset = this.offset;

      if (this.viewportEntered) {
        // el.scrollIntoView({
        //   block: "end",
        //   behavior: "smooth"
        // });

        Ember.$('html,body').animate({
          scrollTop: Ember.$(el).offset().top - offset
        }, 'slow');
      }
    },

    editingChanged: Ember.observer('editing', function () {
      // deal with the change
      //Ember.run.schedule('afterRender', this, function () {
      let panel = this.$('> .md-object-table > .panel-collapse');
      let table = panel.find('> .panel-body > table, > .panel-body > .object-editor');
      let items = this.items;
      let editing = this.editing;
      let el = this.element;
      let comp = this;

      if (editing === 'adding') {
        items.pushObject(this.saveItem);
      }

      if (editing === false && items.length) {
        let last = Object.keys(items.get('lastObject'));

        if (Ember.isEmpty(last)) {
          items.popObject();
        }
      }

      if (panel.hasClass('in')) {
        let out = editing ? table[0] : table[1];
        let inn = editing ? table[1] : table[0];

        Ember.$(out).fadeOut(100, function () {
          Ember.$(inn).fadeIn(100, function () {
            comp.scrollTo(el);
          });
        });

        table.toggleClass('fadeOut fadeIn');
      } else {
        //add a one-time listener to wait until panel is open
        panel.one('shown.bs.collapse', function () {
          table.toggleClass('fadeOut fadeIn');
          comp.scrollTo(el);
        });
        panel.collapse('show');
      }
      //});
    }),

    pillColor: Ember.computed('items.[]', function () {
      let count = this.get('items.length') || 0;

      return count > 0 ? 'label-info' : 'label-warning';
    }),

    actions: {
      deleteItem: function deleteItem(items, index) {
        items.removeAt(index);
      },

      addItem: function addItem() {
        const Template = this.templateClass;
        const owner = Ember.getOwner(this);
        const spotlight = this.spotlight;

        let itm = Ember.typeOf(Template) === 'class' ? Template.create(owner.ownerInjection()) : Ember.Object.create({});

        this.set('saveItem', itm);
        this.set('editing', 'adding');
        spotlight.setTarget(this.elementId);
      },

      editItem: function editItem(items, index) {
        const spotlight = this.spotlight;

        this.set('saveItem', items.objectAt(index));
        this.set('editing', 'editing');
        spotlight.setTarget(this.elementId);
      },

      cancelEdit: function cancelEdit() {
        const spotlight = this.spotlight;

        this.set('editing', false);
        spotlight.close();
      }
    }

  });
});
;define("mdeditor/pods/components/object/md-object-table/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Pbs65sbf", "block": "{\"symbols\":[\"item\",\"index\",\"prop\",\"prop\",\"&default\"],\"statements\":[[4,\"unless\",[[23,[\"showAlert\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[12,\"class\",[28,[\"md-object-table panel panel-default \",[27,\"if\",[[23,[\"editing\"]],\"editing\"],null]]]],[9],[0,\"\\n\\n      \"],[7,\"div\"],[11,\"class\",\"panel-heading\"],[9],[0,\"\\n          \"],[7,\"h3\"],[11,\"class\",\"panel-title md-panel-chevron\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"collapsible\"]]],null,{\"statements\":[[0,\"              \"],[7,\"a\"],[11,\"role\",\"button\"],[11,\"data-toggle\",\"collapse\"],[12,\"href\",[28,[\"#\",[27,\"unless\",[[23,[\"editing\"]],[23,[\"panelId\"]]],null]]]],[12,\"aria-expanded\",[27,\"if\",[[23,[\"collapsed\"]],\"false\",\"true\"],null]],[12,\"class\",[27,\"if\",[[23,[\"collapsed\"]],\"collapsed\"],null]],[12,\"aria-controls\",[21,\"panelId\"]],[9],[0,\"\\n                  \"],[7,\"span\"],[11,\"class\",\"fa\"],[9],[10],[0,\" \"],[1,[21,\"header\"],false],[0,\"\\n                  \"],[7,\"div\"],[12,\"class\",[28,[\"label label-pill \",[21,\"pillColor\"]]]],[9],[0,\" \"],[1,[23,[\"items\",\"length\"]],false],[0,\" \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"              \"],[1,[21,\"header\"],false],[0,\"\\n              \"],[7,\"label\"],[12,\"class\",[28,[\"label label-pill \",[21,\"pillColor\"]]]],[9],[0,\" \"],[1,[23,[\"items\",\"length\"]],false],[0,\" \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n              \"],[7,\"button\"],[12,\"id\",[28,[[21,\"panelId\"],\"-btn\"]]],[12,\"class\",[28,[\"btn btn-xs btn-info pull-right \",[27,\"if\",[[23,[\"editing\"]],\"hidden\"],null]]]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addItem\",[23,[\"items\"]]]],[9],[0,\"\\n                  \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add\\n              \"],[10],[0,\"\\n              \"],[7,\"button\"],[12,\"class\",[28,[\"btn btn-xs btn-info pull-right \",[27,\"unless\",[[23,[\"editing\"]],\"hidden\"],null]]]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancelEdit\"]],[9],[0,\"\\n                  \"],[7,\"span\"],[11,\"class\",\"fa fa-check\"],[9],[10],[0,\" OK\\n              \"],[10],[0,\"\\n          \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\\n      \"],[7,\"div\"],[12,\"id\",[21,\"panelId\"]],[12,\"class\",[28,[\"panel-collapse \",[27,\"if\",[[23,[\"collapsed\"]],\"collapse\",\"in\"],null]]]],[9],[0,\"\\n          \"],[7,\"div\"],[12,\"class\",[28,[\"panel-body \",[27,\"if\",[[23,[\"condensed\"]],\"condensed\"],null],\" \",[27,\"if\",[[23,[\"responsive\"]],\"table-responsive\"],null]]]],[9],[0,\"\\n\"],[0,\"              \"],[7,\"table\"],[12,\"class\",[28,[\"table table-striped table-hover fadeIn \",[27,\"if\",[[23,[\"ellipsis\"]],\"ellipsis\"],null]]]],[9],[0,\"\\n\"],[4,\"unless\",[[23,[\"previewTemplate\"]]],null,{\"statements\":[[0,\"                  \"],[7,\"thead\"],[9],[0,\"\\n                    \"],[7,\"tr\"],[9],[0,\"\\n\"],[4,\"unless\",[[23,[\"hideIndex\"]]],null,{\"statements\":[[0,\"                      \"],[7,\"th\"],[9],[0,\"#\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[23,[\"attrTitleArray\"]]],null,{\"statements\":[[0,\"                      \"],[7,\"th\"],[9],[1,[27,\"uc-words\",[[22,4,[]]],null],false],[10],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"                      \"],[7,\"th\"],[9],[10],[0,\"\\n                    \"],[10],[0,\"\\n                  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"items\"]]],null,{\"statements\":[[0,\"                      \"],[7,\"tr\"],[12,\"id\",[27,\"if\",[[23,[\"scrollToId\"]],[27,\"concat\",[[23,[\"scrollToId\"]],\"-\",[22,2,[]]],null],\"\"],null]],[9],[0,\"\\n\"],[4,\"unless\",[[23,[\"hideIndex\"]]],null,{\"statements\":[[0,\"                          \"],[7,\"td\"],[11,\"class\",\"md-table-index\"],[9],[0,\"\\n                            \"],[1,[22,2,[]],false],[0,\"\\n                          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,[\"previewTemplateTable\"]]],null,{\"statements\":[[0,\"                              \"],[1,[27,\"component\",[[23,[\"previewTemplateTable\"]]],[[\"item\",\"index\",\"profilePath\"],[[22,1,[]],[22,2,[]],[23,[\"profilePath\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"previewTemplate\"]]],null,{\"statements\":[[0,\"                              \"],[7,\"td\"],[11,\"class\",\"property\"],[9],[1,[27,\"component\",[[23,[\"previewTemplate\"]]],[[\"item\",\"index\",\"profilePath\"],[[22,1,[]],[22,2,[]],[23,[\"profilePath\"]]]]],false],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"each\",[[23,[\"attrArray\"]]],null,{\"statements\":[[4,\"if\",[[27,\"get\",[[22,1,[]],[22,3,[]]],null]],null,{\"statements\":[[0,\"                                  \"],[7,\"td\"],[11,\"class\",\"property\"],[9],[7,\"div\"],[11,\"class\",\"wrap\"],[9],[1,[27,\"get\",[[22,1,[]],[22,3,[]]],null],false],[10],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                  \"],[7,\"td\"],[9],[7,\"em\"],[9],[0,\"Not Defined\"],[10],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[3]},null],[0,\"                          \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                          \"],[7,\"td\"],[12,\"class\",[28,[\"md-row-actions \",[27,\"if\",[[23,[\"verticalButtons\"]],\"vertical\"],null],\" \",[21,\"alignButtons\"]]]],[9],[0,\"\\n                            \"],[7,\"div\"],[11,\"class\",\"btn-toolbar\"],[11,\"role\",\"toolbar\"],[11,\"aria-label\",\"Row Toolbar\"],[9],[0,\"\\n                              \"],[7,\"div\"],[12,\"class\",[28,[\"btn-group\",[27,\"if\",[[23,[\"verticalButtons\"]],\"-vertical\"],null]]]],[11,\"role\",\"group\"],[11,\"aria-label\",\"Action Buttons\"],[9],[0,\"\\n                                \"],[7,\"button\"],[12,\"class\",[28,[\"btn btn-\",[21,\"btnSize\"],\" btn-success\"]]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"editItem\",[23,[\"items\"]],[22,2,[]]]],[9],[0,\"\\n                                  \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" \"],[1,[27,\"if\",[[23,[\"editBtnText\"]],[23,[\"editBtnText\"]],\"Edit\"],null],false],[0,\"\\n                                \"],[10],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[[27,\"concat\",[\"btn btn-\",[23,[\"btnSize\"]],\" btn-danger\"],null],[27,\"action\",[[22,0,[]],\"deleteItem\",[23,[\"items\"]],[22,2,[]]],null]]],{\"statements\":[[0,\"                                  \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete\\n\"]],\"parameters\":[]},null],[0,\"\\n                              \"],[10],[0,\"\\n\\n                              \"],[7,\"div\"],[12,\"class\",[28,[\"btn-group\",[27,\"if\",[[23,[\"verticalButtons\"]],\"-vertical\"],null]]]],[11,\"role\",\"group\"],[11,\"aria-label\",\"Row Error\"],[9],[0,\"\\n\"],[4,\"if\",[[22,1,[\"validations\",\"isInvalid\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"span\"],[11,\"class\",\"md-error\"],[9],[0,\"\\n                                  \"],[1,[27,\"fa-icon\",[\"exclamation-circle\"],[[\"fixedWidth\"],[true]]],false],[0,\"\\n\"],[4,\"ember-tooltip\",null,[[\"side\",\"tooltipClassName\"],[\"right\",\"ember-tooltip md-tooltip danger\"]],{\"statements\":[[0,\"                                  This item has errors.\\n\"]],\"parameters\":[]},null],[0,\"                                \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[7,\"span\"],[11,\"class\",\"md-error\"],[9],[0,\"\\n                                  \"],[7,\"span\"],[11,\"class\",\"fa fa-fw\"],[9],[10],[0,\"\\n                                \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                              \"],[10],[0,\"\\n                            \"],[10],[0,\"\\n                          \"],[10],[0,\"\\n                      \"],[10],[0,\"\\n\"]],\"parameters\":[1,2]},{\"statements\":[[0,\"                      \"],[7,\"tr\"],[9],[0,\"\\n                          \"],[7,\"td\"],[12,\"colspan\",[27,\"add-em\",[[23,[\"attrArray\",\"length\"]],[27,\"if\",[[23,[\"hideIndex\"]],1,2],null]],null]],[9],[0,\"\\n                            \"],[7,\"button\"],[12,\"id\",[28,[[21,\"panelId\"],\"-btn\"]]],[11,\"class\",\"btn btn-xs btn-info\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addItem\",[23,[\"items\"]]]],[9],[0,\"\\n                                \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" \"],[1,[21,\"buttonText\"],false],[0,\"\\n                            \"],[10],[0,\"\\n                          \"],[10],[0,\"\\n                      \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                  \"],[10],[0,\"\\n              \"],[10],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"object-editor fadeOut\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"editing\"]]],null,{\"statements\":[[0,\"                    \"],[14,5,[[23,[\"saveItem\"]]]],[0,\"\\n                    \"],[7,\"hr\"],[9],[10],[0,\"\\n                    \"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-info\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancelEdit\"]],[9],[0,\"\\n                        \"],[7,\"span\"],[11,\"class\",\"fa fa-check\"],[9],[10],[0,\" OK\\n                    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"              \"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"showFooter\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\"],[11,\"class\",\"panel-footer text-right\"],[9],[0,\"\\n              \"],[7,\"button\"],[12,\"id\",[28,[[21,\"panelId\"],\"-btn\"]]],[12,\"class\",[28,[\"btn btn-sm btn-info \",[27,\"if\",[[23,[\"editing\"]],\"hidden\"],null]]]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addItem\",[23,[\"items\"]]]],[9],[0,\"\\n                  \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add \"],[1,[21,\"header\"],false],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n    \"],[7,\"h3\"],[9],[0,\"No \"],[7,\"span\"],[12,\"class\",[27,\"if\",[[23,[\"required\"]],\"required\"],null]],[9],[1,[21,\"header\"],false],[10],[0,\" found.\\n      \"],[7,\"button\"],[11,\"class\",\"btn btn-success btn-lg\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addItem\",[23,[\"items\"]]]],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add \"],[1,[27,\"singularize\",[[23,[\"header\"]]],null],false],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,[\"addSubbar\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[[23,[\"addSubbar\"]],[27,\"component\",[\"control/subbar-link\"],[[\"clickText\",\"clickIcon\",\"clickType\",\"click\"],[[23,[\"buttonText\"]],\"plus\",\"success\",[27,\"action\",[[22,0,[]],\"addItem\"],null]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-object-table/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-objectroute-table/component', ['exports', 'mdeditor/pods/components/object/md-object-table/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * The route used to edit items
     *
     * @property itemRoute
     * @type {String}
     * @required
     */

    alertIfEmpty: true,

    /**
    * Indicates whether to immediately navigate to the edit route on add
    *
    * @property editOnAdd
    * @type {Boolean}
    * @default "true"
    */
    editOnAdd: true,

    /**
     * Method used to load form for editing item. Should be overidden.
     *
     * @method editItem
     */
    editItem() {
      return this;
    },

    editBtnText: 'More...',
    layoutName: 'components/object/md-object-table',

    actions: {
      addItem: function addItem() {
        const Template = this.templateClass;
        const owner = Ember.getOwner(this);

        let editItem = this.editItem;
        let items = this.items;
        let itm = Ember.typeOf(Template) === 'class' ? Template.create(owner.ownerInjection()) : Ember.Object.create({});

        if (Ember.isBlank(editItem)) {
          (true && !(false) && Ember.assert(`You must supply an editItem method to ${this.toString()}.`));
        }

        items.pushObject(itm);

        if (this.editOnAdd) {
          editItem(items.indexOf(itm));
        }
      },

      editItem: function editItem(items, index) {
        this.editItem(index);
      }
    }
  });
});
;define('mdeditor/pods/components/object/md-online-resource-array/component', ['exports', 'mdeditor/pods/components/object/md-online-resource/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({

    didReceiveAttrs() {
      this._super(...arguments);

      if (!this.model) {
        Ember.run.once(this, () => this.set('model', Ember.A()));
      }
    },

    /**
     * mdEditor class for input and edit of mdJSON 'onlineResource' object
     * arrays.
     * The class manages the maintenance of an array of online resource
     * objects using the md-object-table class.
     *
     * @module mdeditor
     * @submodule components-object
     * @class md-online-resource-array
     * @constructor
     */

    attributeBindings: ['data-spy'],

    /**
     * mdJSON object containing the 'onlineResource' array.
     *
     * @property model
     * @type Object
     * @required
     */

    /**
     * Display the image picker and preview
     *
     * @property imagePicker
     * @type {Boolean}
     * @default undefined
     */

    /**
     * Truncate the text
     *
     * @property ellipsis
     * @type {Boolean}
     * @default true
     */
    ellipsis: true,

    /**
     * List of mdJSON 'onlineResource' object attributes to display in
     * md-object-table to aid in choosing the onlineResource to edit or
     * delete.
     * The property is passed to md-object-table for configuration.
     *
     * @property attributes
     * @type String
     * @default 'name, uri'
     */
    attributes: 'name,uri',

    /**
     * Name to place on the mdEditor panel header for entry and edit of
     * 'onlineResource' objects.
     * The property is passed to md-object-table for configuration.
     *
     * @property label
     * @type String
     * @default 'Online Resource'
     */
    label: 'Online Resource',

    /**
     * If true, a box shadow will be rendered around the card.
     *
     * @property shadow
     * @type {Boolean}
     * @default true
     */
    shadow: true,

    /**
     * The template to use for the preview table rows. If not overridden, will use
     * the `md-image-preview` template if `imagePicker = true`.
     *
     * @property previewTemplate
     * @type {String}
     * @readOnly
     * @category computed
     * @requires imagePicker
     */
    previewTemplate: Ember.computed('imagePicker', function () {
      return this.imagePicker ? "object/md-online-resource-array/md-image-preview" : null;
    }),

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property templateClass
     * @type Ember.Object
     */
    templateClass: Ember.Object.extend(_component.Validations, {
      init() {
        this._super(...arguments);
        //this.set('uri', null);
      }
    })
  });
});
;define("mdeditor/pods/components/object/md-online-resource-array/md-image-preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XHiy4oqr", "block": "{\"symbols\":[],\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"md-preview-image text-center\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"item\",\"uri\"]]],null,{\"statements\":[[0,\"    \"],[7,\"img\"],[12,\"src\",[23,[\"item\",\"uri\"]]],[11,\"class\",\"img-responsive img-thumbnail\"],[11,\"alt\",\"Image Preview\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    URI Not Defined\\n\"]],\"parameters\":[]}],[0,\"  \"],[10],[0,\"\\n\"],[7,\"dl\"],[11,\"class\",\"dl-horizontal\"],[9],[0,\"\\n  \"],[7,\"dt\"],[9],[0,\"Name\"],[10],[0,\"\\n  \"],[7,\"dd\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"wrap\"],[9],[1,[27,\"html-safe\",[[27,\"if\",[[23,[\"item\",\"name\"]],[23,[\"item\",\"name\"]],\"<em>Not Defined</em>\"],null]],null],false],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"dt\"],[9],[0,\"URI\"],[10],[0,\"\\n  \"],[7,\"dd\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"wrap\"],[9],[1,[27,\"html-safe\",[[27,\"if\",[[23,[\"item\",\"uri\"]],[23,[\"item\",\"uri\"]],\"<em>Not Defined</em>\"],null]],null],false],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-online-resource-array/md-image-preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-online-resource-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "EiqUyBk7", "block": "{\"symbols\":[\"editing\",\"&default\"],\"statements\":[[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"shadow\",\"buttonText\",\"ellipsis\",\"previewTemplate\",\"templateClass\",\"attributes\"],[[23,[\"model\"]],[23,[\"label\"]],[23,[\"shadow\"]],\"Add Resource\",[23,[\"ellipsis\"]],[23,[\"previewTemplate\"]],[23,[\"templateClass\"]],[23,[\"attributes\"]]]],{\"statements\":[[0,\"    Editing: \"],[1,[22,1,[\"name\"]],false],[0,\"\\n\\n    \"],[1,[27,\"object/md-online-resource\",null,[[\"imagePicker\",\"model\",\"profilePath\"],[[23,[\"imagePicker\"]],[22,1,[]],[23,[\"profilePath\"]]]]],false],[0,\"\\n\\n\"]],\"parameters\":[1]},null],[14,2],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-online-resource-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-online-resource/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.regex = exports.Validations = undefined;


  const regex = new RegExp("([A-Za-z][A-Za-z0-9+\\-.]*):(?:(//)(?:((?:[A-Za-z0-9\\-._~!$&'()*+,;=:]|%[0-9A-Fa-f]{2})*)@)?((?:\\[(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}|::(?:[0-9A-Fa-f]{1,4}:){5}|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::)(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)|[Vv][0-9A-Fa-f]+\\.[A-Za-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[A-Za-z0-9\\-._~!$&'()*+,;=]|%[0-9A-Fa-f]{2})*))(?::([0-9]*))?((?:/(?:[A-Za-z0-9\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|/((?:(?:[A-Za-z0-9\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)?)|((?:[A-Za-z0-9\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|)(?:\\?((?:[A-Za-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?(?:\\#((?:[A-Za-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?");

  const Validations = (0, _emberCpValidations.buildValidations)({
    'uri': [(0, _emberCpValidations.validator)('format', {
      regex: regex,
      isWarning: true,
      message: 'This field should be a valid, resolvable uri.'
    }), (0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  const theComp = Ember.Component.extend({
    didReceiveAttrs() {
      this._super(...arguments);

      Ember.run.once(this, () => {
        let plain = this.model;

        if (plain && !Ember.get(plain, 'validations')) {
          const Model = Ember.Object.extend(Validations, plain);
          const owner = Ember.getOwner(this);

          let model = Model.create(owner.ownerInjection(), plain);
          this.set('model', model);
        }
      });
    },

    flashMessages: Ember.inject.service(),
    classNames: ['md-online-resource'],
    attributeBindings: ['data-spy'],

    /**
     * Display the image picker and preview
     *
     * @property imagePicker
     * @type {Boolean}
     * @default undefined
     */

    actions: {
      handleFile(file) {
        if (file.size > 50000) {
          Ember.get(this, 'flashMessages').danger(`The image exceeded the maximum size of 50KB: ${file.size} bytes.
            Please use an online URL to load the image.`);
        } else {
          let model = this.model;

          Ember.set(model, 'name', file.name);
          Ember.set(model, 'uri', file.data);

          if (file.size > 25000) {
            Ember.get(this, 'flashMessages').warning(`The image exceeded the recommended size of 25KB: ${file.size} bytes`);
          }
          //reset the input field
          //this.$('.import-file-picker input:file').val('');
        }
      }
    }
  });

  exports.Validations = Validations;
  exports.regex = regex;
  exports.default = theComp;
});
;define("mdeditor/pods/components/object/md-online-resource/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6j/5S9p0", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"placeholder\",\"profilePath\"],[[23,[\"model\",\"name\"]],\"Name\",\"Online Resource Name\",[27,\"concat\",[[23,[\"profilePath\"]],\".name\"],null]]]],false],[0,\"\\n\\n\"],[0,\"\\n\"],[1,[27,\"input/md-input\",null,[[\"type\",\"valuePath\",\"model\",\"profilePath\",\"label\",\"placeholder\"],[\"url\",\"uri\",[23,[\"model\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".url\"],null],\"URI\",\"Online Resource URI\"]]],false],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"imagePicker\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n\"],[4,\"file-picker\",null,[[\"class\",\"fileLoaded\",\"preview\",\"accept\",\"readAs\"],[\"md-file-picker text-center\",\"handleFile\",false,\".jpeg,.jpg,.png,.gif,.svg\",\"readAsDataURL\"]],{\"statements\":[[0,\"        \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-info\"],[11,\"type\",\"button\"],[9],[0,\"\\n          \"],[1,[27,\"fa-icon\",[\"bullseye\"],null],false],[0,\" Click to Select or Drop Image\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"md-preview-image text-center\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"uri\"]]],null,{\"statements\":[[0,\"            \"],[7,\"img\"],[12,\"src\",[23,[\"model\",\"uri\"]]],[11,\"class\",\"img-responsive img-thumbnail\"],[11,\"alt\",\"Image Preview\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            Enter URI or select file to preview.\\n\"]],\"parameters\":[]}],[0,\"    \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"input/md-input\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\"],[[23,[\"model\",\"protocol\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".protocol\"],null],\"Protocol\",\"Protocol for accessing the Online Resource\"]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"maxlength\",\"value\",\"label\",\"profilePath\",\"placeholder\"],[500,[23,[\"model\",\"description\"]],\"Description\",[27,\"concat\",[[23,[\"profilePath\"]],\".description\"],null],\"Description of the Online Resource: Less than 500 characters\"]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"mdCodeName\",\"label\",\"placeholder\",\"profilePath\",\"tooltip\",\"allowClear\",\"width\"],[[23,[\"model\",\"function\"]],\"onlineFunction\",\"Function\",\"Select function of the Online Resource\",[27,\"concat\",[[23,[\"profilePath\"]],\".onlineFunction\"],null],true,true,\"70%\"]]],false],[0,\"\\n\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-online-resource/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-party-array/component', ['exports', 'mdeditor/pods/components/object/md-party/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    attributeBindings: ['data-spy'],

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property templateClass
     * @type Ember.Object
     */
    templateClass: _component.Template
  });
});
;define("mdeditor/pods/components/object/md-party-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "g0S4CpEO", "block": "{\"symbols\":[\"party\",\"item\"],\"statements\":[[4,\"object/md-array-table\",null,[[\"columns\",\"title\",\"pluralTitle\",\"required\",\"plain\",\"value\",\"validation\",\"data-spy\",\"templateClass\"],[\"Role,Contacts\",[23,[\"title\"]],[23,[\"pluralTitle\"]],[23,[\"required\"]],[23,[\"plain\"]],[23,[\"value\"]],[23,[\"validation\"]],false,[23,[\"templateClass\"]]]],{\"statements\":[[4,\"with\",[[22,1,[\"item\"]]],null,{\"statements\":[[0,\"     \"],[7,\"td\"],[9],[0,\"\\n       \"],[1,[27,\"input/md-codelist\",null,[[\"path\",\"model\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"showValidations\",\"placeholder\"],[\"role\",[22,2,[]],true,true,false,[23,[\"disabled\"]],\"role\",true,\"Select or enter a role\"]]],false],[0,\"\\n     \"],[10],[0,\"\\n     \"],[7,\"td\"],[9],[0,\"\\n       \"],[1,[27,\"input/md-select-contacts\",null,[[\"placeholder\",\"model\",\"path\",\"icon\",\"tooltip\",\"showValidations\"],[\"Select one or more contacts\",[22,2,[]],\"_contacts\",true,true,true]]],false],[0,\"\\n     \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-party-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-party/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Template = exports.Validations = undefined;


  const Validations = (0, _emberCpValidations.buildValidations)({
    'role': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    '_contacts': (0, _emberCpValidations.validator)('length', {
      min: 1,
      message: 'At least one contact is required.'
    })
  });

  const Template = Ember.Object.extend(Validations, {
    init() {
      this._super(...arguments);
      this.set('party', Ember.A());
      this.set('role', null);
    },
    _contacts: Ember.computed('party', {
      get() {
        let party = Ember.get(this, 'party');
        return party.mapBy('contactId');
      },
      set(key, value) {
        let map = value.map(itm => {
          return {
            contactId: itm
          };
        });
        Ember.set(this, 'party', map);
        return value;
      }
    })
  });

  const theComp = Ember.Component.extend(Validations, {
    _contacts: Ember.computed('model', {
      get() {
        let party = Ember.get(this, 'model.party');
        return party ? party.mapBy('contactId') : [];
      },
      set(key, value) {
        let map = value.map(itm => {
          return {
            contactId: itm
          };
        });
        Ember.set(this, 'model.party', map);
        return value;
      }
    }),

    role: Ember.computed.alias('model.role'),
    didReceiveAttrs() {
      this._super(...arguments);

      let model = this.model;

      Ember.run.once(this, function () {
        Ember.set(model, 'party', Ember.getWithDefault(model, 'party', []));
        Ember.set(model, 'role', Ember.getWithDefault(model, 'role', null));
      });
    },

    attributeBindings: ['data-spy'],
    templateClass: Template
  });

  exports.Validations = Validations;
  exports.Template = Template;
  exports.default = theComp;
});
;define("mdeditor/pods/components/object/md-party/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cRoJTZSx", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"input/md-codelist\",null,[[\"label\",\"path\",\"model\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"showValidations\",\"placeholder\"],[\"Role\",\"role\",[22,0,[]],true,true,false,[23,[\"disabled\"]],\"role\",true,\"Select or enter a role\"]]],false],[0,\"\\n\"],[1,[27,\"input/md-select-contacts\",null,[[\"label\",\"placeholder\",\"model\",\"path\",\"icon\",\"tooltip\",\"showValidations\"],[\"Contacts\",\"Select one or more contacts\",[22,0,[]],\"_contacts\",true,true,true]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-party/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-phone-array/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'phoneNumber': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    }), (0, _emberCpValidations.validator)('format', {
      type: 'phone',
      isWarning: true,
      message: 'This field should be a valid phone number.'
    })]
  });

  exports.default = Ember.Component.extend({

    /**
     * mdEditor class for input and edit of mdJSON 'phone' object.
     * The class manages the maintenance of an array of phone objects.
     *
     * @class md-phone-array
     * @module mdeditor
     * @submodule components-object
     * @constructor
     */

    attributeBindings: ['data-spy'],

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property templateClass
     * @type Ember.Object
     */
    templateClass: Ember.Object.extend(Validations, {
      init() {
        this._super(...arguments);
        this.set('service', Ember.A());
      }
    })

  });
});
;define("mdeditor/pods/components/object/md-phone-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Tbulzfno", "block": "{\"symbols\":[\"phone\"],\"statements\":[[4,\"object/md-array-table\",null,[[\"columns\",\"title\",\"value\",\"validation\",\"data-spy\",\"templateClass\"],[\"Name,Number,Services\",\"Phone\",[23,[\"value\"]],[23,[\"validation\"]],null,[23,[\"templateClass\"]]]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,1,[\"item\",\"phoneName\"]],\"Name or location or phone\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"showValidations\",\"placeholder\"],[\"phoneNumber\",[22,1,[\"item\"]],true,\"Phone number\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-codelist-multi\",null,[[\"create\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"mdCodeName\",\"value\",\"placeholder\"],[true,true,false,[23,[\"disabled\"]],true,\"telephone\",[22,1,[\"item\",\"service\"]],\"Choose phone type\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-phone-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-process-step/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    init() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'timePeriod', Ember.getWithDefault(model, 'timePeriod', {}));
      });
    },

    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'stepId', Ember.getWithDefault(model, 'stepId', Ember.get(this, 'itemId')));
        Ember.set(model, 'timePeriod', Ember.getWithDefault(model, 'timePeriod', {}));
        Ember.set(model, 'scope', Ember.getWithDefault(model, 'scope', {}));
        Ember.set(model, 'reference', Ember.getWithDefault(model, 'reference', []));
        Ember.set(model, 'processor', Ember.getWithDefault(model, 'processor', []));
        Ember.set(model, 'stepSource', Ember.getWithDefault(model, 'stepSource', []));
        Ember.set(model, 'stepProduct', Ember.getWithDefault(model, 'stepProduct', []));
      });
    },

    tagName: 'form',

    /**
     * The string representing the path in the profile object for the processStep.
     *
     * @property profilePath
     * @type {String}
     * @default "false"
     * @required
     */

    /**
     * The object to use as the data model for the processStep.
     *
     * @property model
     * @type {Object}
     * @required
     */

    sourceTemplate: Ember.Object.extend()
  });
});
;define("mdeditor/pods/components/object/md-process-step/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "hFjOn/qa", "block": "{\"symbols\":[\"source\",\"source\",\"&default\"],\"statements\":[[1,[27,\"input/md-input\",null,[[\"value\",\"model\",\"valuePath\",\"label\",\"data-spy\",\"placeholder\",\"required\",\"profilePath\"],[[23,[\"model\",\"stepId\"]],null,null,\"Step ID\",\"Step ID\",\"Enter an identifer for the step.\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".stepId\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"profilePath\",\"label\",\"placeholder\",\"data-spy\",\"showValidations\"],[[23,[\"model\",\"description\"]],true,[27,\"concat\",[[23,[\"profilePath\"]],\".description\"],null],\"Description\",\"Description of the process or methodology step.\",\"Step Description\",true]]],false],[0,\"\\n\\n\"],[4,\"object/md-array-table\",null,[[\"columns\",\"value\",\"title\",\"templateClass\",\"profilePath\",\"data-spy\"],[\"Description\",[23,[\"model\",\"stepSource\"]],\"Step Source\",[23,[\"sourceTemplate\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".stepSource\"],null],\"Step Source\"]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"description\"]],\"Information about the source data used in the process step.\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"],[4,\"object/md-array-table\",null,[[\"columns\",\"value\",\"title\",\"templateClass\",\"profilePath\",\"data-spy\"],[\"Description\",[23,[\"model\",\"stepProduct\"]],\"Step Product\",[23,[\"sourceTemplate\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".stepProduct\"],null],\"Step Product\"]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\"],[[22,1,[\"item\",\"value\"]],\"Information about an intermediate data set that (1) is significant in the opinion of the data producer, (2) is generated in the processing step, and (3) is used in later processing steps.\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[1,[27,\"object/md-party-array\",null,[[\"title\",\"data-spy\",\"class\",\"collapsible\",\"collapsed\",\"required\",\"value\",\"profilePath\"],[\"Processors\",\"Processors\",[27,\"if\",[[23,[\"embedded\"]],\"md-embedded\"],null],true,false,false,[23,[\"model\",\"processor\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".processor\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-citation-array\",null,[[\"model\",\"profilePath\",\"data-spy\",\"editItem\",\"label\"],[[23,[\"model\",\"reference\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".reference\"],null],\"Step Reference\",[23,[\"editCitation\"]],\"Step Reference\"]]],false],[0,\"\\n\\n\"],[1,[27,\"object/md-time-period\",null,[[\"model\",\"profilePath\",\"data-spy\",\"label\"],[[23,[\"model\",\"timePeriod\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".timePeriod\"],null],\"Time Period\",\"Time Period\"]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"profilePath\",\"data-spy\"],[[23,[\"model\",\"scope\",\"scopeCode\"]],\"Scope\",true,true,true,\"scope\",false,\"Select type of resource.\",[27,\"concat\",[[23,[\"profilePath\"]],\".scope\"],null],\"Scope\"]]],false],[0,\"\\n\"],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-process-step/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-profile/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});
;define('mdeditor/pods/components/object/md-profile/custom/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: 'form',
    definitions: Ember.inject.service('profile'),
    schemas: Ember.inject.service(),
    notSelected: Ember.computed.setDiff('schemas.schemas', 'record.schemas'),
    selected: Ember.computed.alias('record.schemas'),
    // profileOptions: alias('profile.profiles'),
    actions: {
      setValue(selected) {
        console.log(selected);
        this.record.set('profileId', selected ? selected.codeId : null);
      },
      selectItem(item) {
        // item.set('_animate', true);
        // item.set('_selected', true);
        Ember.run.later(this, function () {
          this.selected.pushObject(item);
          this.record.save();
        }, 250);
      },
      deselectItem(item) {
        // item.set('_selected', false);
        Ember.run.later(this, function () {
          this.selected.removeObject(item);
          this.record.save();
        }, 250);
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-profile/custom/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "O/zfXT+3", "block": "{\"symbols\":[\"schema\",\"schema\",\"&default\"],\"statements\":[[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"label\",\"placeholder\",\"showValidations\"],[[23,[\"record\"]],\"title\",\"Title\",\"Enter a short title for the profile.\",true]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"model\",\"valuePath\",\"label\",\"placeholder\",\"showValidations\"],[[23,[\"record\"]],\"description\",\"Description\",\"Enter a description of the profile.\",true]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-select\",null,[[\"model\",\"path\",\"label\",\"valuePath\",\"namePath\",\"placeholder\",\"objectArray\",\"searchEnabled\",\"showValidations\",\"allowClear\",\"setValue\"],[[23,[\"record\"]],\"profileId\",\"Profile Definition\",\"identifier\",\"title\",\"Select the profile definition.\",[23,[\"definitions\",\"profiles\"]],true,true,true,[27,\"action\",[[22,0,[]],\"setValue\"],null]]]],false],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"card md-card\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"card-header\"],[9],[0,\"\\n        \"],[7,\"h4\"],[11,\"class\",\"card-title\"],[9],[0,\"\\n          Select Schemas\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"card-block no-padding\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"list-group no-margin md-itis-taxalist\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"notSelected\"]]],null,{\"statements\":[[4,\"liquid-unless\",[[27,\"contains\",[[22,2,[]],[23,[\"selected\"]]],null]],[[\"class\",\"enableGrowth\",\"shrinkDelay\"],[[27,\"concat\",[\"list-group-item \",[27,\"if\",[[22,2,[]],\"md-itis-unselected\"],null]],null],true,500]],{\"statements\":[[0,\"              \"],[7,\"div\"],[11,\"class\",\"media list-group-item\"],[9],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"media-body\"],[9],[0,\"\\n                  \"],[7,\"h4\"],[11,\"class\",\"media-heading\"],[9],[0,\"\\n                    \"],[1,[22,2,[\"title\"]],false],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"p\"],[9],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"Type:\"],[10],[0,\" \"],[1,[22,2,[\"formattedType\"]],false],[10],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"Description:\"],[10],[0,\" \"],[1,[22,2,[\"description\"]],false],[10],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"Global?:\"],[10],[0,\" \"],[1,[22,2,[\"formattedGlobal\"]],false],[10],[0,\"\\n                  \"],[10],[0,\"\\n                \"],[10],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"media-right media-middle\"],[9],[0,\"\\n                  \"],[7,\"button\"],[11,\"class\",\"btn btn-success btn-lg btn-block\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"selectItem\",[22,2,[]]]],[9],[0,\"Add\"],[10],[0,\"\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[2]},{\"statements\":[[0,\"              \"],[7,\"div\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n                \"],[7,\"p\"],[11,\"class\",\"list-group-item-text\"],[9],[0,\"\\n                  No schemas avialable.\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[0,\"  \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"card md-card hd-success card-inverse card-outline-success\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"card-header\"],[9],[0,\"\\n        \"],[7,\"h4\"],[11,\"class\",\"card-title\"],[9],[0,\"\\n          Schemas Selected\\n\"],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"card-block no-padding\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"list-group no-margin md-itis-selectedlist\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"selected\"]]],null,{\"statements\":[[4,\"liquid-if\",[[27,\"contains\",[[22,1,[]],[23,[\"selected\"]]],null]],[[\"class\",\"enableGrowth\",\"shrinkDelay\"],[\"list-group-item md-itis-selected\",true,500]],{\"statements\":[[0,\"              \"],[7,\"div\"],[11,\"class\",\"media\"],[9],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"media-body\"],[9],[0,\"\\n                  \"],[7,\"h4\"],[11,\"class\",\"media-heading\"],[9],[0,\"\\n                    \"],[1,[22,1,[\"title\"]],false],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"p\"],[9],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"Type:\"],[10],[0,\" \"],[1,[22,1,[\"formattedType\"]],false],[10],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"Description:\"],[10],[0,\" \"],[1,[22,1,[\"description\"]],false],[10],[0,\"\\n                    \"],[7,\"div\"],[9],[7,\"strong\"],[9],[0,\"Global?:\"],[10],[0,\" \"],[1,[22,1,[\"formattedGlobal\"]],false],[10],[0,\"\\n                  \"],[10],[0,\"\\n                \"],[10],[0,\"\\n                \"],[7,\"div\"],[11,\"class\",\"media-left media-middle\"],[9],[0,\"\\n                  \"],[7,\"button\"],[11,\"class\",\"btn btn-danger btn-lg btn-block\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"deselectItem\",[22,1,[]]]],[9],[0,\"Remove\"],[10],[0,\"\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},{\"statements\":[[0,\"            \"],[7,\"div\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n              \"],[7,\"p\"],[11,\"class\",\"list-group-item-text\"],[9],[0,\"\\n                Select schemas from the list.\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[10],[0,\"\\n\"],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-profile/custom/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-profile/form/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: 'form'
  });
});
;define("mdeditor/pods/components/object/md-profile/form/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "G0scuBMt", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"label\",\"placeholder\",\"showValidations\"],[[23,[\"record\"]],\"uri\",\"URL\",\"Enter URL of the profile.\",true]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"placeholder\",\"showValidations\"],[[23,[\"record\",\"alias\"]],\"Alias\",\"Enter an alternative title.\",true]]],false],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n  \"],[7,\"label\"],[11,\"class\",\"\"],[9],[0,\"Version\"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n    \"],[7,\"span\"],[9],[1,[27,\"if\",[[23,[\"record\",\"localVersion\"]],[23,[\"record\",\"localVersion\"]],\"--\"],null],false],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"record\",\"hasUpdate\"]]],null,{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"label label-pill label-info\"],[9],[0,\"Update Available (\"],[1,[23,[\"record\",\"remoteVersion\"]],false],[0,\")\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"hr\"],[9],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-profile/preview\",null,[[\"record\"],[[23,[\"record\"]]]]],false],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-profile/form/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-profile/preview/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNameBindings: ['textMuted'],
    textMuted: true,
    config: Ember.computed.or('record.config', 'record')
  });
});
;define("mdeditor/pods/components/object/md-profile/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6rwuGvAP", "block": "{\"symbols\":[\"&default\"],\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n    \"],[7,\"label\"],[11,\"class\",\"\"],[9],[0,\"Title\"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"\"],[9],[1,[23,[\"config\",\"title\"]],false],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n    \"],[7,\"label\"],[11,\"class\",\"\"],[9],[0,\"Description\"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"\"],[9],[1,[23,[\"config\",\"description\"]],false],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n    \"],[7,\"label\"],[11,\"class\",\"\"],[9],[0,\"Identifier\"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"\"],[9],[1,[23,[\"config\",\"identifier\"]],false],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n    \"],[7,\"label\"],[11,\"class\",\"\"],[9],[0,\"Namespace\"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"\"],[9],[1,[23,[\"config\",\"namespace\"]],false],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-profile/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-profile/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iSApw+NS", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[27,\"get\",[[27,\"get\",[[23,[\"record\",\"validations\",\"attrs\"]],\"config\"],null],\"isInvalid\"],null]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"alert alert-danger\"],[11,\"role\",\"alert\"],[9],[1,[27,\"fa-icon\",[\"exclamation\"],null],false],[0,\"\\n    \"],[1,[27,\"get\",[[27,\"get\",[[23,[\"record\",\"validations\",\"attrs\"]],\"config\"],null],\"message\"],null],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"object/md-profile/form\",null,[[\"record\"],[[23,[\"record\"]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-profile/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-repository-array/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    settings: Ember.inject.service(),
    repositoryTemplate: Ember.Object.extend({
      init() {
        this._super(...arguments);

        this.set('citation', {});
      }
    }),
    actions: {
      lookupTitle(value) {
        let defs = this.get('settings.data.repositoryDefaults');
        let titles = defs.filterBy('repository', value.repository);

        if (Ember.get(titles, 'length')) {

          Ember.set(value, 'citation.title', Ember.get(titles.objectAt(0), 'title'));
        }
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-repository-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yTH60Tfg", "block": "{\"symbols\":[\"meta\",\"&default\"],\"statements\":[[4,\"object/md-array-table\",null,[[\"columns\",\"value\",\"plain\",\"data-spy\",\"title\",\"templateClass\"],[\"Repository, Collection Title\",[23,[\"value\"]],[23,[\"plain\"]],[23,[\"data-spy\"]],\"Metadata Repository\",[23,[\"repositoryTemplate\"]]]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"change\"],[[22,1,[\"item\",\"repository\"]],true,true,false,\"metadataRepository\",true,\"Select or enter a repository.\",[27,\"action\",[[22,0,[]],\"lookupTitle\",[22,1,[\"item\"]]],null]]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"type\",\"value\",\"placeholder\"],[\"text\",[22,1,[\"item\",\"citation\",\"title\"]],\"Text string used to identify a set of resources in the repository.\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[14,2],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-repository-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-resource-type-array/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'type': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend({

    /**
     * mdEditor class for input and edit of mdJSON 'phone' object.
     * The class manages the maintenance of an array of phone objects.
     *
     * @class md-phone-array
     * @module mdeditor
     * @submodule components-object
     * @constructor
     */

    attributeBindings: ['data-spy'],

    /**
     * See [md-array-table](md-array-table.html#property_templateClass).
     *
     * @property templateClass
     * @type Ember.Object
     */
    templateClass: Ember.Object.extend(Validations, {
      init() {
        this._super(...arguments);
      }
    })

  });
});
;define("mdeditor/pods/components/object/md-resource-type-array/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "KdhF+VV7", "block": "{\"symbols\":[\"type\",\"item\"],\"statements\":[[4,\"object/md-array-table\",null,[[\"columns\",\"title\",\"data-spy\",\"value\",\"validation\",\"plain\",\"required\",\"templateClass\"],[\"Type, Name\",\"Resource Type\",false,[23,[\"value\"]],[23,[\"validation\"]],[23,[\"plain\"]],[23,[\"required\"]],[23,[\"templateClass\"]]]],{\"statements\":[[0,\"  \"],[7,\"td\"],[9],[0,\"\\n\"],[4,\"with\",[[22,1,[\"item\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"input/md-codelist\",null,[[\"create\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"mdCodeName\",\"showValidations\",\"model\",\"path\",\"placeholder\"],[true,true,true,[23,[\"disabled\"]],true,\"scope\",true,[22,2,[]],\"type\",\"Choose type of resource\"]]],false],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"  \"],[10],[0,\"\\n  \"],[7,\"td\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,1,[\"item\",\"name\"]],\"Name of resource\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-resource-type-array/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-schema/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    classNames: ['md-schema']
  });
});
;define('mdeditor/pods/components/object/md-schema/form/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const typeOptions = [{
    name: 'Metadata',
    value: 'record'
    //tip: 'tooltip'
  }, {
    name: 'Contact',
    value: 'contact'
    //tip: 'tooltip'
  }, {
    name: 'Dictionary',
    value: 'dictionary'
    //tip: 'tooltip'
  }];

  exports.default = Ember.Component.extend({
    typeOptions: typeOptions
  });
});
;define("mdeditor/pods/components/object/md-schema/form/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "PSxDlzZ7", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"label\",\"placeholder\",\"showValidations\"],[[23,[\"record\"]],\"title\",\"Title\",\"Enter title for schema.\",true]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"label\",\"placeholder\",\"showValidations\"],[[23,[\"record\"]],\"uri\",\"URL\",\"Enter URL of root schema.\",true]]],false],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"form-group flex\"],[9],[0,\"\\n  \"],[7,\"label\"],[9],[0,\"Version\"],[10],[0,\"\\n  \"],[7,\"span\"],[9],[1,[27,\"if\",[[23,[\"record\",\"localVersion\"]],[23,[\"record\",\"localVersion\"]],\"--\"],null],false],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"record\",\"hasUpdate\"]]],null,{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"label label-pill label-info\"],[9],[0,\"Update Available (\"],[1,[23,[\"record\",\"remoteVersion\"]],false],[0,\")\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"model\",\"valuePath\",\"label\",\"placeholder\",\"showValidations\"],[[23,[\"record\"]],\"description\",\"Description\",\"Enter a description of the schema.\",true]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-select\",null,[[\"model\",\"path\",\"label\",\"valuePath\",\"namePath\",\"placeholder\",\"objectArray\",\"searchEnabled\",\"showValidations\"],[[23,[\"record\"]],\"schemaType\",\"Type\",\"value\",\"name\",\"Select the record type for schema.\",[23,[\"typeOptions\"]],false,true]]],false],[0,\"\\n\\n\"],[4,\"liquid-unless\",[[23,[\"record\",\"isNew\"]]],[[\"use\"],[\"toDown\"]],{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"form-group from-group-inlne\"],[9],[0,\"\\n      \"],[7,\"label\"],[9],[0,\"Apply Globally?\"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"form-control\"],[9],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"inline-block\"],[9],[0,\"\\n              \"],[1,[27,\"input/md-toggle\",null,[[\"value\",\"onToggle\",\"showLabels\",\"onLabel\",\"offLabel\",\"size\",\"theme\"],[[23,[\"record\",\"isGlobal\"]],[27,\"action\",[[22,0,[]],[27,\"mut\",[[23,[\"record\",\"isGlobal\"]]],null]],null],true,\"Yes\",\"No\",\"medium\",\"form\"]]],false],[0,\"\\n          \"],[10],[0,\"\\n      \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-schema/form/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-schema/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "WnAOUr2A", "block": "{\"symbols\":[\"s\"],\"statements\":[[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"shadow\",\"block\"],[false,false,true,false]],{\"statements\":[[0,\"\\n\"],[7,\"form\"],[9],[0,\"\\n  \"],[7,\"ul\"],[11,\"class\",\"nav nav-tabs\"],[11,\"role\",\"tablist\"],[9],[0,\"\\n    \"],[7,\"li\"],[11,\"role\",\"presentation\"],[11,\"class\",\"active\"],[9],[7,\"a\"],[12,\"href\",[27,\"concat\",[\"#\",[23,[\"elementId\"]],\"-form\"],null]],[11,\"aria-controls\",\"form\"],[11,\"role\",\"tab\"],[11,\"data-toggle\",\"tab\"],[9],[0,\"Info\"],[10],[10],[0,\"\\n    \"],[7,\"li\"],[11,\"role\",\"presentation\"],[9],[0,\"\\n      \"],[7,\"a\"],[12,\"href\",[27,\"concat\",[\"#\",[23,[\"elementId\"]],\"-schema\"],null]],[11,\"aria-controls\",\"schemas\"],[11,\"role\",\"tab\"],[11,\"data-toggle\",\"tab\"],[9],[0,\"\\n        Schemas\\n        \"],[7,\"div\"],[12,\"class\",[27,\"concat\",[\"inline-block label label-pill label-\",[27,\"unless\",[[23,[\"record\",\"customSchemas\",\"length\"]],\"warning\",\"info\"],null]],null]],[9],[0,\"\\n          \"],[1,[23,[\"record\",\"customSchemas\",\"length\"]],false],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"tab-content\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"role\",\"tabpanel\"],[11,\"class\",\"tab-pane fade in active\"],[12,\"id\",[27,\"concat\",[[23,[\"elementId\"]],\"-form\"],null]],[9],[0,\"\\n        \"],[1,[27,\"object/md-schema/form\",null,[[\"record\"],[[23,[\"record\"]]]]],false],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"role\",\"tabpanel\"],[11,\"class\",\"tab-pane fade\"],[12,\"id\",[27,\"concat\",[[23,[\"elementId\"]],\"-schema\"],null]],[9],[0,\"\\n        \"],[7,\"ul\"],[11,\"class\",\"list-group\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"record\",\"customSchemas\"]]],null,{\"statements\":[[0,\"            \"],[7,\"li\"],[11,\"class\",\"list-group-item\"],[9],[1,[22,1,[\"id\"]],false],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-schema/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-simple-array-table/component', ['exports', 'mdeditor/pods/components/object/md-array-table/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _component.default.extend({
    /**
     * mdEditor component for input and edit of arrays of scalars. The
     * component is rendered as an editable table.
     *
     * ```handlebars
     * {{#object/md-simple-array-table
     *   title="Simple"
     *   required=false
     *   plain=true
     *   value=model as |val|
     * }}
     *   <td>
     *       {{input/md-input value=val.item.value
     *       placeholder="Enter value"}}
     *   </td>
     * {{/object/md-simple-array-table}}
     * ```
     * @class md-simple-array-table
     * @module mdeditor
     * @submodule components-object
     * @extends md-array-table
     * @constructor
     */

    layoutName: 'components/object/md-array-table',
    simple: true,

    /**
     * Convert the input 'primitive' array to an 'ember' array of objects
     *
     * @property arrayValues
     * @type {Array}
     * @category computed
     * @requires value.[]
     */
    arrayValues: Ember.computed('value.[]', {
      get() {
        let items = this.value;

        if (items === undefined) {
          items = [];
          //items[0] = '';
        }

        return items.reduce(function (acc, value) {
          acc.pushObject({
            value: value
          });
          return acc;
        }, []);
      },

      set(key, value) {
        this.set('value', value.filterBy('value').mapBy('value'));
        return value;
      }
    }),

    /**
     * Set the value when arrayValues is updated
     *
     * @property valuesObserver
     * @type {Observer}
     * @category computed
     * @requires arrayValues.@each.value
     */
    valuesObserver: Ember.observer('arrayValues.@each.value', function () {
      this.set('arrayValues', this.arrayValues);
    })
  });
});
;define('mdeditor/pods/components/object/md-source/component', ['exports', 'ember-cp-validations', 'uuid/v4'], function (exports, _emberCpValidations, _v) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'description': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'sourceId', Ember.getWithDefault(model, 'sourceId', (0, _v.default)()));
        Ember.set(model, 'sourceCitation', Ember.getWithDefault(model, 'sourceCitation', {}));
        Ember.set(model, 'metadataCitation', Ember.getWithDefault(model, 'metadataCitation', []));
        Ember.set(model, 'spatialResolution', Ember.getWithDefault(model, 'spatialResolution', {}));
        Ember.set(model, 'referenceSystem', Ember.getWithDefault(model, 'referenceSystem', {}));
        Ember.set(model, 'referenceSystem.referenceSystemIdentifier', Ember.getWithDefault(model, 'referenceSystem.referenceSystemIdentifier', {}));
        Ember.set(model, 'sourceProcessStep', Ember.getWithDefault(model, 'sourceProcessStep', []));
        Ember.set(model, 'scope', Ember.getWithDefault(model, 'scope', {}));
      });
    },

    /**
     * The string representing the path in the profile object for the domain.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the domain.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form',
    domainId: Ember.computed.alias('model.domainId'),
    codeName: Ember.computed.alias('model.codeName'),
    description: Ember.computed.alias('model.description')
  });
});
;define('mdeditor/pods/components/object/md-source/preview/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend( /*Validations,*/{
    tagName: '',
    model: Ember.computed.alias('item'),
    name: Ember.computed.alias('model.description')
  });
});
;define("mdeditor/pods/components/object/md-source/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "mii6LfjG", "block": "{\"symbols\":[],\"statements\":[[7,\"td\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"placeholder\",\"maxrows\"],[[23,[\"model\",\"description\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".source.description\"],null],\"A brief description about the source dataset used in creating the data.\",7]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-source/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-source/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "wqCYBFQ8", "block": "{\"symbols\":[\"editing\"],\"statements\":[[1,[27,\"input/md-input\",null,[[\"value\",\"model\",\"valuePath\",\"label\",\"data-spy\",\"placeholder\",\"required\",\"profilePath\"],[[23,[\"model\",\"sourceId\"]],null,null,\"Source ID\",\"Source ID\",\"Enter unique identifer for the source.\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".sourceId\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"profilePath\",\"label\",\"placeholder\",\"data-spy\",\"showValidations\"],[[23,[\"model\",\"description\"]],true,[27,\"concat\",[[23,[\"profilePath\"]],\".description\"],null],\"Description\",\"Description of the source.\",\"Source Description\",true]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"profilePath\",\"data-spy\"],[[23,[\"model\",\"scope\",\"scopeCode\"]],\"Scope\",true,true,true,\"scope\",false,\"Select type of resource.\",[27,\"concat\",[[23,[\"profilePath\"]],\".scope\"],null],\"Scope\"]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"profilePath\",\"data-spy\",\"shadow\",\"content\"],[\"Source Citation\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".sourceCitation\"],null],\"Source Citation\",true,[23,[\"model\",\"sourceCitation\"]]]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"simpleIdentifier\",\"profilePath\",\"embedded\",\"data-spy\"],[[23,[\"model\",\"sourceCitation\"]],true,[27,\"concat\",[[23,[\"profilePath\"]],\".sourceCitation\"],null],true,false]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"data-spy\",\"buttonText\",\"previewTemplate\",\"profilePath\",\"attributes\"],[[23,[\"model\",\"metadataCitation\"]],\"Metadata Citation\",\"Metadata Citation\",\"Add Citation\",\"\",[27,\"concat\",[[23,[\"profilePath\"]],\".metadataCitation\"],null],\"title\"]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"simpleIdentifier\",\"data-spy\",\"embedded\",\"profilePath\"],[[22,1,[]],true,false,true,[27,\"concat\",[[23,[\"profilePath\"]],\".metadataCitation\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"profilePath\",\"data-spy\",\"shadow\",\"content\"],[\"Spatial Reference System\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".referenceSystem\"],null],\"Spatial Reference System\",true,[23,[\"model\",\"referenceSystem\"]]]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-srs\",null,[[\"model\",\"profilePath\"],[[23,[\"model\",\"referenceSystem\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".referenceSystem\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"data-spy\",\"profilePath\",\"content\"],[\"Spatial Resolution\",true,\"Spatial Resolution\",[27,\"concat\",[[23,[\"profilePath\"]],\".spatialResolution\"],null],[23,[\"model\",\"spatialResolution\"]]]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-spatial-resolution\",null,[[\"model\",\"profilePath\"],[[23,[\"model\",\"spatialResolution\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".spatialResolution\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-source/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-spatial-extent/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const isNan = Number.isNaN;
  exports.default = Ember.Component.extend({
    didReceiveAttrs() {
      this._super(...arguments);

      let geo = Ember.get(this, 'extent.geographicExtent.0');

      Ember.run.once(function () {
        Ember.set(geo, 'boundingBox', Ember.getWithDefault(geo, 'boundingBox', {}));
      });
    },

    isTrulyNone(val) {
      return Ember.isNone(val) || isNan(val);
    },

    bboxPoly: Ember.computed('bbox', 'bbox.{northLatitude,southLatitude,eastLongitude,westLongitude}', function () {
      let bbox = this.bbox;

      if (!bbox) {
        return null;
      }

      if (this.isTrulyNone(bbox.southLatitude) || this.isTrulyNone(bbox.westLongitude) || this.isTrulyNone(bbox.northLatitude) || this.isTrulyNone(bbox.eastLongitude)) {
        return null;
      }

      return [[bbox.southLatitude, bbox.westLongitude], [bbox.northLatitude, bbox.westLongitude], [bbox.northLatitude, bbox.eastLongitude], [bbox.southLatitude, bbox.eastLongitude]];
    }),

    bboxPolyObserver: Ember.observer('bboxPoly', function () {
      let map = this.map;
      let bbox = this.bboxPoly;

      if (map && bbox) {
        this.setupMap({
          target: map
        });
      }
    }),

    bbox: Ember.computed.alias('extent.geographicExtent.0.boundingBox'),
    geographicElement: Ember.computed.alias('extent.geographicExtent.0.geographicElement'),
    showMap: Ember.computed.or('bboxPoly', 'geographicElement'),
    setupMap(m) {
      let map = m.target;
      let geo = this.geographicElement || [];
      let bbox = this.bboxPoly;
      let features;

      features = bbox ? geo.concat([L.rectangle(bbox).toGeoJSON()]) : [].concat(geo);

      let bounds = L.geoJson(features).getBounds();

      map.fitBounds(bounds);

      this.set('map', map);
    },
    actions: {
      calculateBox() {
        let geo = this.geographicElement;

        if (!(geo && geo.length)) {
          return null;
        }

        let bounds = L.geoJson(geo).getBounds();
        let bbox = this.bbox;

        Ember.setProperties(bbox, {
          northLatitude: bounds.getNorth(),
          southLatitude: bounds.getSouth(),
          eastLongitude: bounds.getEast(),
          westLongitude: bounds.getWest()
        });
      },

      editExtent(index) {
        this.editExtent(index);
      },

      deleteExtent(index) {
        this.deleteExtent(index);
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-spatial-extent/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "LauqAhox", "block": "{\"symbols\":[\"l\"],\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"data-spy\",\"shadow\",\"spotlightEnabled\"],[[27,\"concat\",[\"Geographic Extent #\",[23,[\"index\"]]],null],true,false,false,true,false]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"card-buttons\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-md btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"editExtent\",[23,[\"index\"]]]],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit Extent Features\"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn-md btn-danger  btn-block md-btn-responsive\",[27,\"action\",[[22,0,[]],\"deleteExtent\",[23,[\"index\"]]],null]]],{\"statements\":[[0,\"            \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Delete Extent\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-xxxl-6\"],[9],[0,\"\\n          \"],[7,\"label\"],[9],[0,\"Bounding Box\"],[10],[0,\"\\n\"],[4,\"object/md-bbox\",null,[[\"model\",\"profilePath\"],[[23,[\"bbox\"]],\"record.extent.bbox\"]],{\"statements\":[[4,\"if\",[[23,[\"geographicElement\",\"length\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n              \"],[7,\"button\"],[11,\"class\",\"btn btn-primary\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"calculateBox\"]],[9],[0,\"Calculate\"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-xxxl-6 md-extent-description\"],[9],[0,\"\\n          \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"rows\",\"maxHeight\",\"placeholder\",\"label\"],[[23,[\"extent\",\"description\"]],5,300,\"Description of extent\",\"Description\"]]],false],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-6 md-extent-map\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"showMap\"]]],null,{\"statements\":[[4,\"leaflet-map\",null,[[\"lat\",\"lng\",\"zoom\",\"maxZoom\",\"onLoad\"],[0,0,2,18,[27,\"action\",[[22,0,[]],[23,[\"setupMap\"]]],null]]],{\"statements\":[[4,\"layer-group\",null,[[\"name\",\"baselayer\",\"default\"],[\"Terrain\",true,true]],{\"statements\":[[0,\"            \"],[1,[27,\"tile-layer\",null,[[\"url\",\"attribution\"],[\"//stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png\",[23,[\"mapAttribution\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"geographicElement\",\"length\"]]],null,{\"statements\":[[4,\"feature-group\",null,[[\"name\",\"default\"],[\"Features\",true]],{\"statements\":[[4,\"each\",[[23,[\"geographicElement\"]]],null,{\"statements\":[[0,\"              \"],[1,[27,\"geojson-layer\",null,[[\"geoJSON\"],[[22,1,[]]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"bboxPoly\"]]],null,{\"statements\":[[4,\"feature-group\",null,[[\"name\",\"default\"],[\"Bounding Box\",true]],{\"statements\":[[0,\"                \"],[1,[27,\"polygon-layer\",null,[[\"locations\",\"color\",\"fillOpacity\"],[[23,[\"bboxPoly\"]],\"#29abe0\",0]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n          \"],[1,[21,\"layer-control\"],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n          No Features to display.\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-spatial-extent/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-spatial-info/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'spatialReferenceSystem', Ember.getWithDefault(model, 'spatialReferenceSystem', []));
        Ember.set(model, 'spatialRepresentationType', Ember.getWithDefault(model, 'spatialRepresentationType', []));
        Ember.set(model, 'spatialResolution', Ember.getWithDefault(model, 'spatialResolution', []));
      });
    },
    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form'
  });
});
;define("mdeditor/pods/components/object/md-spatial-info/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8YqPfWP8", "block": "{\"symbols\":[\"editing\",\"editing\",\"&default\"],\"statements\":[[1,[27,\"input/md-codelist-multi\",null,[[\"value\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"label\",\"profilePath\"],[[23,[\"model\",\"spatialRepresentationType\"]],true,true,false,\"spatialRepresentation\",false,\"Select method used to represent geographic information\",\"Spatial Representation Type\",[27,\"concat\",[[23,[\"profilePath\"]],\".spatialRepresentationType\"],null]]]],false],[0,\"\\n\\n\"],[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"buttonText\",\"ellipsis\",\"profilePath\",\"attributes\"],[[23,[\"model\",\"spatialReferenceSystem\"]],\"Spatial Reference System\",\"Add Reference System\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".spatialReferenceSystem\"],null],\"referenceSystemType,referenceSystemIdentifier.identifier\"]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-srs\",null,[[\"model\",\"profilePath\"],[[22,2,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".spatialReferenceSystem\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"],[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"buttonText\",\"ellipsis\",\"profilePath\",\"attributes\"],[[23,[\"model\",\"spatialResolution\"]],\"Spatial Resolution\",\"Add Spatial Resolution\",true,[27,\"concat\",[[23,[\"profilePath\"]],\".spatialResolution\"],null],\"scaleFactor,levelOfDetail,measure.type\"]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-spatial-resolution\",null,[[\"model\",\"profilePath\"],[[22,1,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".spatialResolution\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[14,3],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-spatial-info/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-spatial-resolution/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'scaleFactor': {
      disabled: Ember.computed.alias('model.scaleDisabled'),
      validators: [(0, _emberCpValidations.validator)('presence', {
        presence: true,
        ignoreBlank: true
      }), (0, _emberCpValidations.validator)('number', {
        integer: true,
        allowBlank: true,
        positive: true,
        gt: 0
      })]
    },
    'levelOfDetail': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      disabled: Ember.computed.alias('model.levelDisabled')
    })],
    'measure': [(0, _emberCpValidations.validator)('dependent', {
      on: ['measureType', 'measureValue', 'measureUnit']
    })],
    'measureType': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'measureUnit': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'measureValue': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      if (model) {
        Ember.run.once(this, function () {
          Ember.set(model, 'measure', Ember.getWithDefault(model, 'measure', {}));
        });
      }
    },
    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    classNames: ['form'],
    scaleFactor: Ember.computed.alias('model.scaleFactor'),
    scaleDisabled: Ember.computed('model.levelOfDetail', 'measurePresent', function () {
      return !Ember.isEmpty(this.get('model.levelOfDetail')) || this.measurePresent;
    }),
    levelOfDetail: Ember.computed.alias('model.levelOfDetail'),
    levelDisabled: Ember.computed('model.scaleFactor', 'measurePresent', function () {
      let scaleFactor = this.get('model.scaleFactor');
      return !Ember.isEmpty(scaleFactor) && !Number.isNaN(scaleFactor) || this.measurePresent;
    }),
    measure: Ember.computed.alias('model.measure'),
    measureDisabled: Ember.computed('model.{scaleFactor,levelOfDetail}', function () {
      let scaleFactor = this.get('model.scaleFactor');
      return !Ember.isEmpty(scaleFactor) && !Number.isNaN(scaleFactor) || !Ember.isEmpty(this.get('model.levelOfDetail'));
    }),
    measureType: Ember.computed.alias('model.measure.type'),
    measureValue: Ember.computed.alias('model.measure.value'),
    measureUnit: Ember.computed.alias('model.measure.unitOfMeasure'),
    measurePresent: Ember.computed.or('measureType', 'measureUnit', 'measureValue'),

    typeOptions: Ember.computed(function () {
      return [{
        name: 'distance',
        value: 'distance'
      }, {
        name: 'length',
        value: 'length'
      }, {
        name: 'angle',
        value: 'angle'
      }, {
        name: 'measure',
        value: 'measure'
      }, {
        name: 'scale',
        value: 'scale'
      }];
    })
  });
});
;define("mdeditor/pods/components/object/md-spatial-resolution/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "t6U1y0Qz", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"input/md-input\",null,[[\"type\",\"model\",\"valuePath\",\"label\",\"placeholder\",\"profilePath\",\"showValidations\",\"disabled\",\"class\"],[\"number\",[22,0,[]],\"scaleFactor\",\"Scale Factor\",\"Enter the geographic(map) scale for the resource.\",[27,\"concat\",[[23,[\"profilePath\"]],\".scaleFactor\"],null],true,[23,[\"scaleDisabled\"]],[27,\"if\",[[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],\"scaleFactor\"],null],\"isInvalid\"],null],\"required\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"autoresize\",\"label\",\"placeholder\",\"showValidations\",\"disabled\",\"profilePath\",\"class\"],[[22,0,[]],\"levelOfDetail\",true,\"Level Of Detail\",\"Enter description of the spatial resolution of the resource.\",true,[23,[\"levelDisabled\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".levelOfDetail\"],null],[27,\"if\",[[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],\"levelOfDetail\"],null],\"isInvalid\"],null],\"required\"],null]]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"data-spy\",\"shadow\",\"profilePath\",\"class\"],[false,false,false,false,[27,\"concat\",[[23,[\"profilePath\"]],\".measure\"],null],[27,\"if\",[[23,[\"measureDisabled\"]],\"text-muted\"],null]]],{\"statements\":[[0,\"  \"],[7,\"label\"],[12,\"class\",[28,[\"text-info \",[27,\"if\",[[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],\"measure\"],null],\"isInvalid\"],null],\"required\"],null]]]],[9],[0,\"Measure\"],[10],[0,\"\\n  \"],[1,[27,\"input/md-select\",null,[[\"label\",\"showValidations\",\"model\",\"path\",\"valuePath\",\"namePath\",\"objectArray\",\"tooltip\",\"tooltipPath\",\"searchEnabled\",\"disabled\",\"placeholder\",\"profilePath\"],[\"Measure Type\",true,[22,0,[]],\"measureType\",\"value\",\"name\",[23,[\"typeOptions\"]],true,\"tip\",false,[23,[\"measureDisabled\"]],\"The type of measurement.\",[27,\"concat\",[[23,[\"profilePath\"]],\".measure.type\"],null]]]],false],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"type\",\"step\",\"model\",\"valuePath\",\"label\",\"placeholder\",\"profilePath\",\"showValidations\",\"disabled\"],[\"number\",\"0.0001\",[22,0,[]],\"measureValue\",\"Value\",\"Enter the number of units in the measurement.\",[27,\"concat\",[[23,[\"profilePath\"]],\".measure.value\"],null],true,[23,[\"measureDisabled\"]]]]],false],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"label\",\"placeholder\",\"showValidations\",\"disabled\",\"profilePath\"],[[22,0,[]],\"measureUnit\",\"Units\",\"Type of units to associated with the value.\",true,[23,[\"measureDisabled\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".measure.units\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-spatial-resolution/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-srs/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'refType': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      disabled: Ember.computed.notEmpty('model.model.referenceSystemIdentifier.identifier')
    })],
    'refSystem': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true,
      disabled: Ember.computed.notEmpty('model.model.referenceSystemType')
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');
      if (model) {
        Ember.run.once(this, function () {
          Ember.set(model, 'referenceSystemIdentifier', Ember.getWithDefault(model, 'referenceSystemIdentifier', {}));
        });
      }
    },
    /**
     * The string representing the path in the profile object for the resource.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the resource.
     *
     * @property model
     * @type {Object}
     * @required
     */

    classNames: ['form'],
    refSystem: Ember.computed.alias('model.referenceSystemIdentifier.identifier'),
    refType: Ember.computed.alias('model.referenceSystemType')
  });
});
;define("mdeditor/pods/components/object/md-srs/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Aa5qlyYn", "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"input/md-codelist\",null,[[\"create\",\"label\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"path\",\"model\",\"placeholder\",\"profilePath\",\"class\"],[true,\"Reference System Type\",true,false,false,true,true,\"referenceSystemType\",\"refType\",[22,0,[]],\"Select type of reference system used.\",[27,\"concat\",[[23,[\"profilePath\"]],\".referenceSystemType\"],null],[27,\"if\",[[27,\"get\",[[22,0,[\"validations\"]],\"isInvalid\"],null],\"required\"],null]]]],false],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"model\",\"referenceSystemIdentifier\"]]],null,{\"statements\":[[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"data-spy\",\"shadow\",\"profilePath\"],[false,false,false,false,[27,\"concat\",[[23,[\"profilePath\"]],\".referenceSystemIdentifier\"],null]]],{\"statements\":[[0,\"  \"],[7,\"label\"],[12,\"class\",[27,\"concat\",[\"text-info\",[27,\"if\",[[27,\"get\",[[22,0,[\"validations\"]],\"isInvalid\"],null],\" required\"],null]],null]],[9],[0,\"Reference System Identifier\"],[10],[0,\"\\n\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"model\",\"profilePath\",\"data-spy\"],[[23,[\"model\",\"referenceSystemIdentifier\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".referenceSystemIdentifier\"],null],false]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-srs/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-taxonomy/classification/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: 'ul',
    classNames: ['list-group', 'md-classification'],
    dragging: null,
    preview: false
  });
});
;define('mdeditor/pods/components/object/md-taxonomy/classification/taxon/component', ['exports', 'ember-cp-validations', 'scroll-into-view-if-needed'], function (exports, _emberCpValidations, _scrollIntoViewIfNeeded) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'taxonomicName': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'taxonomicLevel': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    init() {
      this._super(...arguments);

      this.collapse = this.preview && !this.parentItem;
    },
    didReceiveAttrs() {
      this._super(...arguments);

      Ember.run.once(this, function () {
        this.set('model.commonName', Ember.getWithDefault(this, 'model.commonName', []));
        this.set('model.subClassification', Ember.getWithDefault(this, 'model.subClassification', []));
      });
    },
    didInsertElement() {
      this._super(...arguments);

      if (this.model._edit) {
        this.startEditing();
        this.set('model._edit', false);
      }
    },
    spotlight: Ember.inject.service(),
    tagName: 'li',
    classNames: ['list-group-item', 'md-taxon'],
    classNameBindings: ['collapse'],
    isEditing: false,
    preview: false,

    level: Ember.computed('parent.level', function () {
      let parent = this.parentItem;

      return parent ? parent.get('level') + 1 : 0;
    }),

    padding: Ember.computed('level', function () {
      let pad = this.level + 0;

      return Ember.String.htmlSafe('padding-left: ' + pad + 'rem;');
    }),

    collapsible: Ember.computed('model.subClassification.[]', function () {
      return this.get('model.subClassification.length');
    }),

    taxonomicLevel: Ember.computed.alias('model.taxonomicLevel'),
    taxonomicName: Ember.computed.alias('model.taxonomicName'),
    taxonomicSystemId: Ember.computed.alias('model.taxonomicSystemId'),

    startEditing() {
      let id = 'body-' + this.elementId;
      let editor = 'editor-' + this.elementId;

      this.set('isEditing', true);

      // this.spotlight.setTarget('editor-' + this.elementId, this.stopEditing,this);
      this.spotlight.setTarget(id, this.stopEditing, this);

      (0, _scrollIntoViewIfNeeded.default)(document.getElementById(editor), {
        behavior: 'smooth'
        //scrollMode: 'if-needed',
      });
    },

    stopEditing() {
      this.set('isEditing', false);
    },

    deleteTaxa(taxa) {
      let parent = this.top || this.get('parentItem.model.subClassification');

      parent.removeObject(taxa);
    },

    actions: {
      toggleCollapse(event) {
        event.stopPropagation();
        this.toggleProperty('collapse');
      },
      deleteTaxa(taxa) {
        this.deleteTaxa(taxa);
      },
      toggleEditing() {
        if (this.isEditing) {
          this.spotlight.close();
          this.set('isEditing', false);
          return;
        }
        this.startEditing();
      },
      addChild() {
        this.model.subClassification.pushObject({
          commonName: [],
          subClassification: [],
          _edit: true
        });
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-taxonomy/classification/taxon/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "M3aKmYCI", "block": "{\"symbols\":[\"val\"],\"statements\":[[7,\"div\"],[11,\"class\",\"md-taxon-body\"],[12,\"id\",[27,\"concat\",[\"body-\",[23,[\"elementId\"]]],null]],[9],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"md-taxon-text\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"collapsible\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"inline-block icon\"],[11,\"role\",\"button\"],[12,\"onClick\",[27,\"action\",[[22,0,[]],\"toggleCollapse\"],null]],[12,\"style\",[21,\"padding\"]],[9],[0,\"\\n      \"],[1,[27,\"fa-icon\",[[27,\"if\",[[23,[\"collapse\"]],\"folder\",\"folder-open\"],null]],[[\"fixedWidth\"],[true]]],false],[0,\"\\n      \"],[7,\"strong\"],[11,\"class\",\"text-success\"],[9],[1,[21,\"taxonomicLevel\"],false],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"inline-block\"],[12,\"style\",[21,\"padding\"]],[9],[0,\"\\n      \"],[7,\"i\"],[11,\"class\",\"fa-fw inline-block\"],[9],[10],[0,\"\\n      \"],[7,\"strong\"],[11,\"class\",\"text-info\"],[9],[1,[21,\"taxonomicLevel\"],false],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[7,\"div\"],[11,\"class\",\"inline-block text-truncate\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"spacer\"],[9],[10],[0,\"\\n     \"],[7,\"em\"],[9],[1,[27,\"if\",[[23,[\"taxonomicName\"]],[23,[\"taxonomicName\"]],\"Not Defined\"],null],false],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"taxonomicSystemId\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"model\",\"isITIS\"]]],null,{\"statements\":[[0,\"          (\"],[7,\"a\"],[12,\"href\",[28,[\"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=\",[21,\"taxonomicSystemId\"]]]],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[7,\"small\"],[11,\"class\",\"text-muted\"],[9],[1,[21,\"taxonomicSystemId\"],false],[10],[10],[0,\")\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"          (\"],[7,\"small\"],[9],[1,[21,\"taxonomicSystemId\"],false],[10],[0,\")\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[4,\"if\",[[23,[\"model\",\"commonName\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\"],[11,\"class\",\"spacer\"],[9],[10],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"text-warning\"],[9],[1,[27,\"join\",[\", \",[23,[\"model\",\"commonName\"]]],null],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\\n\"],[4,\"unless\",[[23,[\"preview\"]]],null,{\"statements\":[[4,\"unless\",[[23,[\"isEditing\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"md-taxon-btn\"],[9],[0,\"\\n      \"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-success\"],[3,\"action\",[[22,0,[]],\"toggleEditing\",[23,[\"elementId\"]]]],[9],[0,\"\\n\"],[0,\"        \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit\\n      \"],[10],[0,\"\\n\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn-xs btn-danger\",[27,\"action\",[[22,0,[]],\"deleteTaxa\",[23,[\"model\"]]],null]]],{\"statements\":[[0,\"        \"],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Delete\\n\"]],\"parameters\":[]},null],[0,\"\\n      \"],[1,[27,\"control/md-button\",null,[[\"class\",\"icon\",\"text\",\"responsive\",\"click\"],[\"btn-xs btn-info\",\"plus\",\"Add Child\",false,[27,\"action\",[[22,0,[]],\"addChild\"],null]]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[10],[0,\"\\n\"],[7,\"div\"],[12,\"id\",[27,\"concat\",[\"editor-\",[23,[\"elementId\"]]],null]],[9],[0,\"\\n\\n\"],[4,\"liquid-if\",[[23,[\"isEditing\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"md-taxon-form\"],[9],[0,\"\\n      \"],[7,\"form\"],[11,\"class\",\"card form\"],[3,\"action\",[[22,0,[]],\"toggleEditing\"],[[\"on\"],[\"submit\"]]],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"card-block row form-inline\"],[9],[0,\"\\n          \"],[1,[27,\"input/md-input\",null,[[\"class\",\"label\",\"model\",\"valuePath\",\"showValidations\",\"placeholder\"],[\"col-lg-4\",\"Taxonomic Level\",[22,0,[]],\"taxonomicLevel\",true,\"\"]]],false],[0,\"\\n          \"],[1,[27,\"input/md-input\",null,[[\"class\",\"label\",\"model\",\"valuePath\",\"showValidations\",\"placeholder\"],[\"col-lg-4\",\"Taxonomic Name\",[22,0,[]],\"taxonomicName\",true,\"\"]]],false],[0,\"\\n          \"],[1,[27,\"input/md-input\",null,[[\"class\",\"label\",\"value\",\"placeholder\"],[\"col-lg-4\",\"Taxonomic ID\",[22,0,[\"taxonomicSystemId\"]],\"\"]]],false],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"card\"],[9],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n\"],[4,\"object/md-simple-array-table\",null,[[\"title\",\"required\",\"plain\",\"value\"],[\"Common Name\",false,true,[23,[\"model\",\"commonName\"]]]],{\"statements\":[[0,\"              \"],[7,\"td\"],[9],[0,\"\\n                \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,1,[\"item\",\"value\"]],\"Enter value\"]]],false],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\\n        \"],[7,\"footer\"],[11,\"class\",\"card-footer text-right\"],[9],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-info\"],[11,\"type\",\"submit\"],[3,\"action\",[[22,0,[]],\"toggleEditing\",[23,[\"elementId\"]]]],[9],[0,\"\\n\"],[0,\"            \"],[1,[27,\"fa-icon\",[\"check\"],null],false],[0,\" OK\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"model\",\"subClassification\",\"length\"]]],null,{\"statements\":[[4,\"liquid-unless\",[[23,[\"collapse\"]]],[[\"class\"],[\"list-group-item\"]],{\"statements\":[[0,\"      \"],[1,[27,\"object/md-taxonomy/classification\",null,[[\"model\",\"parentItem\",\"dragging\",\"preview\"],[[23,[\"model\",\"subClassification\"]],[22,0,[]],[23,[\"dragging\"]],[23,[\"preview\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-taxonomy/classification/taxon/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-taxonomy/classification/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "H5HYEbWN", "block": "{\"symbols\":[\"class\",\"index\"],\"statements\":[[4,\"each\",[[27,\"sort-by\",[\"order\",[23,[\"model\"]]],null]],null,{\"statements\":[[0,\"  \"],[1,[27,\"object/md-taxonomy/classification/taxon\",null,[[\"model\",\"parentItem\",\"top\",\"index\",\"dragging\",\"preview\"],[[22,1,[]],[23,[\"parentItem\"]],[27,\"unless\",[[23,[\"parentItem\"]],[23,[\"model\"]]],null],[22,2,[]],[23,[\"dragging\"]],[23,[\"preview\"]]]]],false],[0,\"\\n\"]],\"parameters\":[1,2]},{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"alert alert-info no-margin\"],[9],[0,\"\\n    \"],[7,\"h3\"],[9],[0,\"No \"],[7,\"span\"],[11,\"class\",\"required\"],[9],[0,\"Classification\"],[10],[0,\" found.\"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-taxonomy/classification/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-taxonomy/collection/component', ['exports', 'ember-cp-validations', 'mdeditor/pods/components/object/md-taxonomy/collection/voucher/component'], function (exports, _emberCpValidations, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Template = exports.Validations = undefined;


  const Validations = (0, _emberCpValidations.buildValidations)({
    'title': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'taxonomicSystem': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    // 'identificationProcedure': [
    //   validator('presence', {
    //     presence: true,
    //     ignoreBlank: true
    //   })
    // ],
    'taxonomicClassification': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  const TemplateClass = Ember.Object.extend(Validations, {
    init() {
      this._super(...arguments);

      Ember.set(this, 'taxonomicSystem', []);
      Ember.set(this, 'identificationReference', []);
      Ember.set(this, 'observer', []);
      Ember.set(this, 'voucher', []);
      Ember.set(this, 'taxonomicClassification', []);
    }
  });

  const theComp = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'taxonomicClassification', Ember.getWithDefault(model, 'taxonomicClassification', []));
        Ember.set(model, 'taxonomicSystem', Ember.getWithDefault(model, 'taxonomicSystem', []));
        Ember.set(model, 'identificationReference', Ember.getWithDefault(model, 'identificationReference', []));
        Ember.set(model, 'observer', Ember.getWithDefault(model, 'observer', []));
        Ember.set(model, 'voucher', Ember.getWithDefault(model, 'voucher', []));
      });
    },
    voucherTemplate: _component.Template,

    /**
     * The string representing the path in the profile object for the collection.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the collection.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form',
    taxonomicSystem: Ember.computed.alias('model.taxonomicSystem'),
    title: Ember.computed.alias('model.taxonomicSystem.firstObject.citation.title'),
    identificationProcedure: Ember.computed.alias('model.identificationProcedure'),
    taxonomicClassification: Ember.computed.alias('model.taxonomicClassification'),
    systemTemplate: Ember.Object.extend({
      init() {
        this._super(...arguments);
        this.set('citation', {});
      }
    })
  });

  exports.Validations = Validations;
  exports.Template = TemplateClass;
  exports.default = theComp;
});
;define('mdeditor/pods/components/object/md-taxonomy/collection/system/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'citation': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(this, function () {
        Ember.set(model, 'citation', Ember.getWithDefault(model, 'citation', {}));
      });
    },

    /**
     * The string representing the path in the profile object for the domain.
     *
     * @property profilePath
     * @type {String}
     * @default 'false'
     * @required
     */

    /**
     * The object to use as the data model for the domain.
     *
     * @property model
     * @type {Object}
     * @required
     */

    tagName: 'form',
    citation: Ember.computed.alias('model.citation')
  });
});
;define('mdeditor/pods/components/object/md-taxonomy/collection/system/preview/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'title': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    tagName: '',
    model: Ember.computed.alias('item'),
    modifications: Ember.computed.alias('model.modifications'),
    title: Ember.computed.alias('model.citation.title')
  });
});
;define("mdeditor/pods/components/object/md-taxonomy/collection/system/preview/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "k5SBJV1p", "block": "{\"symbols\":[],\"statements\":[[7,\"td\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"model\",\"valuePath\",\"placeholder\",\"profilePath\",\"showValidations\",\"required\"],[[22,0,[]],\"title\",\"Descriptive name for the collection taxonomic system.\",[27,\"concat\",[[23,[\"profilePath\"]],\".citation.title\"],null],true,true]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"td\"],[9],[0,\"\\n  \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"placeholder\",\"maxrows\",\"rows\"],[[23,[\"model\",\"modifications\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".modifications\"],null],\"A brief description about the source dataset used in creating the data.\",3,2]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-taxonomy/collection/system/preview/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-taxonomy/collection/system/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "anDEx+YB", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"rows\",\"profilePath\",\"label\",\"placeholder\",\"data-spy\",\"showValidations\"],[[23,[\"model\",\"modifications\"]],false,3,[27,\"concat\",[[23,[\"profilePath\"]],\".modifications\"],null],\"Modifications\",\"Description of any modifications or exceptions made to the classification system used.\",\"Modifications\",true]]],false],[0,\"\\n\\n\"],[0,\"  \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"simpleIdentifier\",\"profilePath\",\"embedded\",\"data-spy\"],[[23,[\"model\",\"citation\"]],true,[27,\"concat\",[[23,[\"profilePath\"]],\".citation\"],null],false,true]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-taxonomy/collection/system/template.hbs" } });
});
;define("mdeditor/pods/components/object/md-taxonomy/collection/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yZCuz2jj", "block": "{\"symbols\":[\"editing\"],\"statements\":[[0,\"\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"attributes\",\"items\",\"header\",\"shadow\",\"required\",\"buttonText\",\"ellipsis\",\"previewTemplateTable\",\"editItem\",\"profilePath\",\"verticalButtons\",\"hideIndex\",\"condensed\",\"editOnAdd\",\"templateClass\",\"scrollToId\",\"data-spy\"],[\"citation.title,modifications\",[23,[\"model\",\"taxonomicSystem\"]],\"Taxonomic System\",true,true,\"Add system\",true,\"object/md-taxonomy/collection/system/preview\",[23,[\"editSystem\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".taxonomicSystem\"],null],true,false,false,false,[23,[\"systemTemplate\"]],\"md-system\",\"System\"]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"required\",\"shadow\",\"maximizable\",\"spotlightEnabled\",\"block\"],[\"Classification\",true,false,\"card\",\"Classification\",true,true,true,false,[27,\"if\",[[23,[\"model\",\"taxonomicClassification\",\"length\"]],false,true],null]]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-taxonomy/classification\",null,[[\"model\"],[[23,[\"model\",\"taxonomicClassification\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"object/md-party-array\",null,[[\"title\",\"plain\",\"required\",\"value\",\"profilePath\",\"data-spy\"],[\"Observer\",false,false,[23,[\"model\",\"observer\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".observer\"],null],\"Observer\"]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"autoresize\",\"placeholder\",\"label\",\"data-spy\",\"embedded\",\"profilePath\"],[[23,[\"model\",\"generalScope\"]],false,true,\"Description of the range of taxa addressed in the data set or collection. For example, \\\"all vascular plants were identified to family or species.\\\"\",\"General Scope\",\"General Scope\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".generalScope\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"autoresize\",\"placeholder\",\"label\",\"data-spy\",\"embedded\",\"profilePath\"],[[22,0,[\"identificationProcedure\"]],false,true,\"Description of the methods used for taxonomic identification. Could include specimen processing, comparison with museum materials, keys, chemical or genetic analyses, etc.\",\"Identification Procedure\",\"Procedure\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".identificationProcedure\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"autoresize\",\"placeholder\",\"label\",\"data-spy\",\"embedded\",\"profilePath\"],[[23,[\"model\",\"identificationCompleteness\"]],false,true,\"Information concerning the proportions and treatment of unidentified materials; estimates of the importance, and identities of misidentifications, uncertain determinations, synonyms or other incorrect usages; taxa not well treated or requiring further work; and expertise of field workers.\",\"Identification Completeness\",\"Completeness\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".identificationCompleteness\"],null]]]],false],[0,\"\\n\\n\"],[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"data-spy\",\"profilePath\",\"buttonText\",\"ellipsis\",\"attributes\",\"collapsible\",\"templateClass\"],[[23,[\"model\",\"voucher\"]],\"Voucher\",\"Voucher\",[27,\"concat\",[[23,[\"profilePath\"]],\".voucher\"],null],\"Add Voucher\",true,\"specimen\",true,[23,[\"voucherTemplate\"]]]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-taxonomy/collection/voucher\",null,[[\"model\",\"profilePath\"],[[22,1,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".voucher\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-taxonomy/collection/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-taxonomy/collection/voucher/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Template = exports.Validations = undefined;


  const Validations = (0, _emberCpValidations.buildValidations)({
    'specimen': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })],
    'repository': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      ignoreBlank: true
    })]
  });

  const Template = Ember.Object.extend(Validations, {
    init() {
      this._super(...arguments);
      this.set('repository', {});
      this.set('specimen', null);
    }
  });

  const theComp = Ember.Component.extend(Validations, {
    classNames: ['form'],
    specimen: Ember.computed.alias('model.specimen'),
    repository: Ember.computed.alias('model.repository'),
    didReceiveAttrs() {
      this._super(...arguments);

      let model = this.model;

      Ember.run.once(this, function () {
        Ember.set(model, 'repository', Ember.getWithDefault(model, 'repository', {}));
        Ember.set(model, 'specimen', Ember.getWithDefault(model, 'specimen', null));
      });
    },

    //attributeBindings: ['data-spy'],
    templateClass: Template
  });

  exports.Validations = Validations;
  exports.Template = Template;
  exports.default = theComp;
});
;define("mdeditor/pods/components/object/md-taxonomy/collection/voucher/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "qnYHyLWq", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"rows\",\"profilePath\",\"label\",\"placeholder\",\"data-spy\",\"showValidations\"],[[23,[\"specimen\"]],true,3,[27,\"concat\",[[23,[\"profilePath\"]],\".specimen\"],null],\"Specimen\",\"Description of the type of specimen collected (e.g. 'herbarium specimens', 'blood samples', 'photographs', 'individuals', or 'batches').\",\"Specimen\",true]]],false],[0,\"\\n\\n\"],[7,\"label\"],[11,\"class\",\"required\"],[9],[0,\"Repository\"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"required\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"shadow\",\"spotlightEnabled\"],[true,false,false,[27,\"concat\",[[23,[\"profilePath\"]],\".repository\"],null],\"Repository\",false,false]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-party\",null,[[\"model\"],[[23,[\"repository\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-taxonomy/collection/voucher/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-taxonomy/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    router: Ember.inject.service(),
    title: Ember.computed('model.taxonomicSystem.0.citation.title', function () {
      let title = this.get('model.taxonomicSystem.0.citation.title');
      let index = this.index;

      return `Collection #${index}` + (title ? `: ${title}` : '');
    }),
    actions: {
      editCollection(id) {
        this.set('scrollTo', `collection-${id}`);
        this.router.transitionTo('record.show.edit.taxonomy.collection.index', id);
      },
      deleteCollection(id) {
        let taxa = this.get('record.json.metadata.resourceInfo.taxonomy');
        taxa.removeAt(id);
      }
    }
  });
});
;define("mdeditor/pods/components/object/md-taxonomy/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Ec8E//dz", "block": "{\"symbols\":[],\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"shadow\",\"spotlightEnabled\"],[[23,[\"title\"]],true,false,\"record.taxonomy\",[27,\"concat\",[\"Collection \",[23,[\"index\"]]],null],true,false]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"card-buttons\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-md btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"editCollection\",[23,[\"index\"]]]],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit Collection\"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-md btn-danger btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"deleteCollection\",[23,[\"index\"]]]],[9],[0,\"\\n              \"],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Delete Collection\"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"shadow\",\"maximizable\",\"spotlightEnabled\",\"block\"],[true,false,false,false,false,false]],{\"statements\":[[0,\"      \"],[1,[27,\"object/md-taxonomy/classification\",null,[[\"model\",\"preview\"],[[23,[\"model\",\"taxonomicClassification\"]],true]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-taxonomy/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-time-period/component', ['exports', 'ember-cp-validations'], function (exports, _emberCpValidations) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Validations = (0, _emberCpValidations.buildValidations)({
    'intervalAmount': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      //disabled: computed.notEmpty('model.endDateTime'),
      ignoreBlank: true
    })],
    'startDateTime': [(0, _emberCpValidations.validator)('presence', {
      presence: true,
      disabled: Ember.computed.notEmpty('model.endDateTime'),
      ignoreBlank: true
    })],
    'endDateTime': [(0, _emberCpValidations.validator)('date', {
      onOrAfter: Ember.computed.alias('model.startDateTime'),
      isWarning: true
    }), (0, _emberCpValidations.validator)('presence', {
      presence: true,
      disabled: Ember.computed.notEmpty('model.startDateTime'),
      ignoreBlank: true
    })]
  });

  exports.default = Ember.Component.extend(Validations, {
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(function () {
        Ember.set(model, 'periodName', Ember.getWithDefault(model, 'periodName', []));
        Ember.set(model, 'timeInterval', Ember.getWithDefault(model, 'timeInterval', {}));
        Ember.set(model, 'duration', Ember.getWithDefault(model, 'duration', {}));
        // set(model, 'presentationForm', getWithDefault(model,
        //   'presentationForm', []));
        // set(model, 'onlineResource', getWithDefault(model,
        //   'onlineResource', []));
        // set(model, 'identifier', getWithDefault(model, 'identifier', []));
        // set(model, 'graphic', getWithDefault(model, 'graphic', []));
      });
    },
    tagName: 'form',

    /**
     * The profile path for the component
     *
     * @property profilePath
     * @type {String}
     */

    startDateTime: Ember.computed('model.startDateTime', {
      get() {
        return Ember.get(this, 'model.startDateTime');
      },
      set(key, value) {
        Ember.run.once(this, function () {
          Ember.set(this, 'model.startDateTime', value);
          return value;
        });
      }
    }),
    endDateTime: Ember.computed('model.endDateTime', {
      get() {
        return Ember.get(this, 'model.endDateTime');
      },
      set(key, value) {
        Ember.run.once(this, function () {
          Ember.set(this, 'model.endDateTime', value);
          return value;
        });
      }
    }),
    intervalAmount: Ember.computed.alias('model.timeInterval.interval'),

    timeUnit: Ember.computed(function () {
      return [{
        name: 'year',
        value: 'year'
      }, {
        name: 'month',
        value: 'month'
      }, {
        name: 'day',
        value: 'day'
      }, {
        name: 'hour',
        value: 'hour'
      }, {
        name: 'minute',
        value: 'minute'
      }, {
        name: 'second',
        value: 'second'
      }];
    })

  });
});
;define("mdeditor/pods/components/object/md-time-period/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "dPdMA26o", "block": "{\"symbols\":[\"unit\",\"val\",\"&default\"],\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"data-spy\",\"shadow\",\"content\"],[\"Time Period\",true,[23,[\"collapsed\"]],\"Time Period\",true,[23,[\"model\"]]]],{\"statements\":[[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\",\"muted\",\"plain\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".date\"],null],false,true]],{\"statements\":[[0,\"    \"],[1,[27,\"input/md-date-range\",null,[[\"startDateTime\",\"endDateTime\"],[[23,[\"startDateTime\"]],[23,[\"endDateTime\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"placeholder\",\"required\",\"profilePath\"],[[23,[\"model\",\"id\"]],\"Identifier\",\"Enter a unique identifier for the time period.\",false,[27,\"concat\",[[23,[\"profilePath\"]],\".id\"],null]]]],false],[0,\"\\n\\n \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\"],[[23,[\"model\",\"description\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".description\"],null],\"Description\",\"A brief description providing relevant information about the time period.\"]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\",\"muted\",\"plain\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".periodName\"],null],false,true]],{\"statements\":[[4,\"object/md-simple-array-table\",null,[[\"title\",\"data-spy\",\"plain\",\"value\"],[\"Time Period Name\",false,true,[23,[\"model\",\"periodName\"]]]],{\"statements\":[[0,\"      \"],[7,\"td\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"value\"]],\"Enter Name\"]]],false],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\",\"muted\",\"plain\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".interval\"],null],false,true]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"form-inline\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"text-info\"],[9],[0,\"Interval\"],[10],[0,\" \"],[1,[27,\"input/md-input\",null,[[\"type\",\"model\",\"valuePath\",\"step\",\"label\",\"placeholder\",\"profilePath\",\"showValidations\"],[\"number\",[22,0,[]],\"intervalAmount\",\"0.01\",\"Interval Amount\",\"Enter amount of time for the interval.\",[27,\"concat\",[[23,[\"profilePath\"]],\".timeInterval.interval\"],null],true]]],false],[0,\"\\n      \"],[1,[27,\"input/md-select\",null,[[\"create\",\"objectArray\",\"valuePath\",\"namePath\",\"label\",\"required\",\"tooltip\",\"icon\",\"allowClear\",\"value\",\"profilePath\",\"placeholder\"],[false,[23,[\"timeUnit\"]],\"value\",\"name\",\"Time Unit\",true,false,false,true,[23,[\"model\",\"timeInterval\",\"units\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".timeInterval.units\"],null],\"Choose unit of time\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\",\"muted\",\"plain\",\"bodyIsRow\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".duration\"],null],false,true,true]],{\"statements\":[[0,\"    \"],[7,\"label\"],[11,\"class\",\"text-info col-sm-2\"],[9],[0,\"Duration\"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-10\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n\"],[4,\"each\",[[27,\"array\",[\"years\",\"months\",\"days\",\"hours\",\"minutes\",\"seconds\"],null]],null,{\"statements\":[[0,\"          \"],[1,[27,\"input/md-input\",null,[[\"class\",\"valuePath\",\"model\",\"type\",\"label\",\"placeholder\",\"profilePath\"],[\"col-sm-6 col-md-4 col-lg-2\",[27,\"concat\",[\"duration.\",[22,1,[]]],null],[23,[\"model\"]],\"number\",[27,\"uc-words\",[[22,1,[]]],null],[27,\"concat\",[\"Enter \",[22,1,[]]],null],[27,\"concat\",[[23,[\"profilePath\"]],\".duration.\",[22,1,[]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[14,3],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-time-period/template.hbs" } });
});
;define('mdeditor/pods/components/object/md-transfer/component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    didReceiveAttrs() {
      this._super(...arguments);

      let model = Ember.get(this, 'model');

      Ember.run.once(function () {
        Ember.set(model, 'onlineOption', Ember.getWithDefault(model, 'onlineOption', []));
        Ember.set(model, 'offlineOption', Ember.getWithDefault(model, 'offlineOption', []));
        Ember.set(model, 'transferFrequency', Ember.getWithDefault(model, 'transferFrequency', {}));
        Ember.set(model, 'distributionFormat', Ember.getWithDefault(model, 'distributionFormat', []));
        // set(model, 'presentationForm', getWithDefault(model,
        //   'presentationForm', []));
        // set(model, 'onlineResource', getWithDefault(model,
        //   'onlineResource', []));
        // set(model, 'identifier', getWithDefault(model, 'identifier', []));
        // set(model, 'graphic', getWithDefault(model, 'graphic', []));
      });
    },
    tagName: 'form',

    /**
     * The profile path for the component
     *
     * @property profilePath
     * @type {String}
     */

    // startDateTime: computed('model.startDateTime', {
    //   get(){
    //     return get(this, 'model.startDateTime');
    //   },
    //   set(key, value) {
    //     once(this,function() {
    //       set(this, 'model.startDateTime', value);
    //       return value;
    //     });
    //   }
    // }),
    // endDateTime: computed('model.endDateTime', {
    //   get(){
    //     return get(this, 'model.endDateTime');
    //   },
    //   set(key, value) {
    //     once(this,function() {
    //       set(this, 'model.endDateTime', value);
    //       return value;
    //     });
    //   }
    // }),
    formatUri: Ember.computed.alias('model.distributionFormat.firstObject.formatSpecification.title'),
    timeUnit: Ember.computed(function () {
      return [{
        name: 'year',
        value: 'year'
      }, {
        name: 'month',
        value: 'month'
      }, {
        name: 'day',
        value: 'day'
      }, {
        name: 'hour',
        value: 'hour'
      }, {
        name: 'minute',
        value: 'minute'
      }, {
        name: 'second',
        value: 'second'
      }];
    }),

    formatTemplate: Ember.Object.extend( /*Validations, */{
      init() {
        this._super(...arguments);
        this.set('formatSpecification', {});
        this.set('formatSpecification.onlineResource', [{}]);
      }
    })
  });
});
;define("mdeditor/pods/components/object/md-transfer/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "gQEO/ErD", "block": "{\"symbols\":[\"unit\",\"format\",\"editing\",\"&default\"],\"statements\":[[0,\"  \"],[1,[27,\"input/md-input\",null,[[\"type\",\"valuePath\",\"model\",\"step\",\"label\",\"placeholder\",\"profilePath\"],[\"number\",\"transferSize\",[23,[\"model\"]],\"0.01\",\"Transfer Size (MB)\",\"Estimated size of a unit in the specified transfer format, expressed in megabytes.\",[27,\"concat\",[[23,[\"profilePath\"]],\".transferSize\"],null]]]],false],[0,\"\\n  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"label\",\"placeholder\",\"profilePath\"],[[23,[\"model\",\"unitsOfDistribution\"]],\"Distribution units\",\"Description of the tiles, layers, geographic areas, etc., in which data are available.\",[27,\"concat\",[[23,[\"profilePath\"]],\".distributionUnit\"],null]]]],false],[0,\"\\n\\n  \"],[1,[27,\"object/md-online-resource-array\",null,[[\"model\",\"label\",\"profilePath\",\"class\",\"shadow\",\"data-spy\"],[[23,[\"model\",\"onlineOption\"]],\"Online Option\",[27,\"concat\",[[23,[\"profilePath\"]],\".onlineOption\"],null],\"md-embedded\",false,[23,[\"fales\"]]]]],false],[0,\"\\n\\n\"],[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"buttonText\",\"templateClass\",\"ellipsis\",\"shadow\",\"attributes\"],[[23,[\"model\",\"offlineOption\"]],\"Offline Option\",\"Add Offline Option\",[23,[\"templateClass\"]],false,false,\"title\"]],{\"statements\":[[0,\"      \"],[1,[27,\"object/md-medium\",null,[[\"model\",\"profilePath\"],[[22,3,[]],[27,\"concat\",[[23,[\"profilePath\"]],\".offlineOption\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"\\n\"],[4,\"object/md-array-table\",null,[[\"columns\",\"plain\",\"responsive\",\"title\",\"data-spy\",\"value\",\"validation\",\"templateClass\",\"profilePath\"],[\"Format Name,Version,Compression Method,URL\",false,true,\"Distribution Format\",false,[23,[\"model\",\"distributionFormat\"]],[23,[\"formatValidation\"]],[23,[\"formatTemplate\"]],[27,\"concat\",[[23,[\"profilePath\"]],\".distributionFormat\"],null]]],{\"statements\":[[0,\"\\n    \"],[7,\"td\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"formatSpecification\",\"title\"]],\"Name of the format\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"td\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"formatSpecification\",\"edition\"]],\"Format version\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"td\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"compressionMethod\"]],\"Compression Method\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"formatSpecification\",\"onlineResource\",\"firstObject\",\"uri\"]],\"On-line information about the format\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"profilePath\",\"muted\",\"plain\",\"bodyIsRow\"],[false,[27,\"concat\",[[23,[\"profilePath\"]],\".transferFrequency\"],null],false,true,true]],{\"statements\":[[0,\"    \"],[7,\"label\"],[11,\"class\",\"text-info col-sm-2\"],[9],[0,\"Transfer Frequency\"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-10\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n\"],[4,\"each\",[[27,\"array\",[\"years\",\"months\",\"days\",\"hours\",\"minutes\",\"seconds\"],null]],null,{\"statements\":[[0,\"          \"],[1,[27,\"input/md-input\",null,[[\"class\",\"valuePath\",\"model\",\"type\",\"label\",\"placeholder\",\"profilePath\"],[\"col-sm-6 col-md-4 col-lg-2\",[27,\"concat\",[\"transferFrequency.\",[22,1,[]]],null],[23,[\"model\"]],\"number\",[27,\"uc-words\",[[22,1,[]]],null],[27,\"concat\",[\"Enter \",[22,1,[]]],null],[27,\"concat\",[[23,[\"profilePath\"]],\".transferFrequency.\",[22,1,[]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[14,4],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/components/object/md-transfer/template.hbs" } });
});
;define('mdeditor/pods/contact/new/id/route', ['exports', 'ember-data'], function (exports, _emberData) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const NotFoundError = _emberData.default.NotFoundError;
  exports.default = Ember.Route.extend({
    /**
     * The route model
     *
     * @method model
     * @param {Object} params
     * @chainable
     * @return {Object}
     */
    model: function model(params) {
      let record = this.store.peekRecord('contact', params.contact_id);

      if (record) {
        return record;
      }

      return this.store.findRecord('contact', params.contact_id);
    },

    /**
     * The breadcrumb title string.
     *
     * @property breadCrumb
     * @type {String}
     * @default null
     */
    breadCrumb: null,

    /**
     * Called when route is deactivated.
     * The model is destroyed if still "new".
     *
     * @method deactivate
     */
    deactivate: function deactivate() {
      // We grab the model loaded in this route
      let model = this.currentRouteModel();

      // If we are leaving the Route we verify if the model is in
      // 'isDeleted' state, which means it wasn't saved to the metadata.
      if (model && model.isDeleted) {
        // We call DS#unloadRecord() which removes it from the store
        this.store.unloadRecord(model);
      }
    },

    setupController: function setupController(controller, model) {
      // Call _super for default behavior
      this._super(controller, model);

      // // setup tests for required attributes
      // controller.noId = Ember.computed('model.json.contactId', function () {
      //   return model.get('json.contactId') ? false : true;
      // });
      // controller.noName = Ember.computed('model.json.individualName',
      //   'model.json.organizationName',
      //   function () {
      //     let haveIndividual = model.get('json.individualName') ? true :
      //       false;
      //     let haveOrganization = model.get('json.organizationName') ?
      //       true : false;
      //     return !(haveIndividual || haveOrganization);
      //   });
      // controller.allowSave = Ember.computed('noId', 'noName', function () {
      //   return(this.get('noName') || this.get('noId'));
      // });
    },

    // serialize: function (model) {
    //   // If we got here without an ID (and therefore without a model)
    //   // Ensure that we leave the route param in the URL blank (not 'undefined')
    //   if(!model) {
    //     return {
    //       contact_id: ''
    //     };
    //   }
    //
    //   // Otherwise, let Ember handle it as usual
    //   return this._super.apply(this, arguments);
    // },

    actions: {
      willTransition: function willTransition(transition) {
        if (transition.targetName === 'contact.new.index') {
          transition.abort();
          return true;
        }

        // We grab the model loaded in this route
        var model = this.currentRouteModel();
        // If we are leaving the Route we verify if the model is in
        // 'isNew' state, which means it wasn't saved to the backend.
        if (model && model.get('isNew')) {
          //let contexts = transition.intent.contexts;
          // We call DS#destroyRecord() which removes it from the store
          model.destroyRecord().then(() => transition.retry());
          //transition.abort();

          // if (contexts && contexts.length > 0) {
          //   //grab any models ids and apply them to transition
          //   let ids = contexts.mapBy('id');
          //   this.replaceWith(transition.targetName, ...ids);
          //   return true;
          // }
          //
          // this.replaceWith(transition.targetName);
          return true;
        }
      },

      saveContact() {
        this.currentRouteModel().save().then(model => {
          this.replaceWith('contact.show.edit', model);
        });
      },

      cancelContact() {
        this.replaceWith('contacts');

        return false;
      },

      error(error) {
        if (error instanceof NotFoundError) {
          this.flashMessages.warning('No contact found! Re-directing to new contact...');
          // redirect to new
          this.replaceWith('contact.new');
        } else {
          // otherwise let the error bubble
          return true;
        }
      }
    }
  });
});
;define("mdeditor/pods/contact/new/id/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "vCrIve/z", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row page-header\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-6 col-md-offset-3\"],[9],[0,\"\\n        \"],[7,\"h3\"],[9],[0,\"Create New Contact\"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"form\"],[11,\"class\",\"form-horizontal col-md-6 col-md-offset-3\"],[3,\"action\",[[22,0,[]],\"saveContact\"],[[\"on\"],[\"submit\"]]],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"label\"],[11,\"class\",\"col-sm-3 control-label\"],[9],[0,\"Contact Type\"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"col-sm-9 col-sm-offset-\"],[9],[0,\"\\n              \"],[1,[27,\"input/md-toggle\",null,[[\"value\",\"onToggle\",\"showLabels\",\"onLabel\",\"offLabel\",\"size\",\"theme\"],[[23,[\"model\",\"json\",\"isOrganization\"]],[27,\"action\",[[22,0,[]],[27,\"mut\",[[23,[\"model\",\"json\",\"isOrganization\"]]],null]],null],true,\"Organization\",\"Individual\",\"large\",\"form\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"label\"],[12,\"class\",[28,[\"col-sm-3 control-label\\n              \",[27,\"if\",[[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],\"json.contactId\"],null],\"options.presence.presence\"],null],\"required\"],null]]]],[9],[0,\"Contact ID\"],[10],[0,\"\\n\\n            \"],[7,\"div\"],[11,\"class\",\"col-sm-9\"],[9],[0,\"\\n                \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"placeholder\"],[\"json.contactId\",[23,[\"model\"]],\"Enter an ID for this contact\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"label\"],[12,\"class\",[28,[\"col-sm-3 control-label\\n            \",[27,\"unless\",[[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],\"json.name\"],null],\"options.presence.disabled\"],null],\"required\"],null]]]],[9],[0,\"Name\"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"col-sm-9\"],[9],[0,\"\\n                \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"placeholder\"],[\"json.name\",[23,[\"model\"]],\"Enter a name for this contact\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"],[4,\"unless\",[[23,[\"model\",\"json\",\"isOrganization\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"label\"],[12,\"class\",[28,[\"col-sm-3 control-label\\n            \",[27,\"unless\",[[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],\"json.positionName\"],null],\"options.presence.disabled\"],null],\"required\"],null]]]],[9],[0,\"Position Name\"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"col-sm-9\"],[9],[0,\"\\n                \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"placeholder\"],[\"json.positionName\",[23,[\"model\"]],\"Enter a name for this position\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"col-sm-offset-4 col-sm-8\"],[9],[0,\"\\n                 \"],[7,\"span\"],[11,\"class\",\"pull-right\"],[9],[0,\"\\n                      \"],[7,\"button\"],[11,\"class\",\"btn btn-success md-form-save\"],[12,\"disabled\",[27,\"get\",[[23,[\"model\",\"validations\"]],\"isInvalid\"],null]],[11,\"type\",\"submit\"],[9],[0,\"Save\"],[10],[0,\"\\n                      \"],[7,\"button\"],[11,\"class\",\"btn btn-warning \"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancelContact\"]],[9],[0,\"Cancel\"],[10],[0,\"\\n                 \"],[10],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/contact/new/id/template.hbs" } });
});
;define('mdeditor/pods/contact/new/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    redirect() {
      let rec = this.store.createRecord('contact');

      this.replaceWith('contact.new.id', rec.id);
    }
  });
});
;define("mdeditor/pods/contact/new/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "G9CRF85/", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/contact/new/index/template.hbs" } });
});
;define('mdeditor/pods/contact/new/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'New',
        linkable: false
      };
    }
  });
});
;define('mdeditor/pods/contact/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Contact',
        linkable: false
      };
    }
  });
});
;define('mdeditor/pods/contact/show/edit/route', ['exports', 'mdeditor/mixins/hash-poll'], function (exports, _hashPoll) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_hashPoll.default, {});
});
;define("mdeditor/pods/contact/show/edit/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "WGTTqMu4", "block": "{\"symbols\":[\"hour\",\"email\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-9 col-md-offset-1\"],[9],[0,\"\\n        \"],[7,\"h3\"],[9],[0,\"Editing Contact: \"],[1,[23,[\"model\",\"json\",\"name\"]],false],[0,\" \"],[7,\"small\"],[9],[1,[23,[\"model\",\"json\",\"contactId\"]],false],[10],[0,\"\\n          \"],[7,\"span\"],[11,\"class\",\"text-danger\"],[9],[0,\"\\n\"],[0,\"            \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"form\"],[9],[0,\"\\n            \"],[1,[27,\"input/md-input-confirm\",null,[[\"valuePath\",\"model\",\"data-spy\",\"confirmTip\",\"placeholder\",\"label\"],[\"json.contactId\",[23,[\"model\"]],\"Contact ID\",\"Note! Editing the Contact ID may break links. Be aware.\",\"User assigned Contact ID\",\"Contact ID\"]]],false],[0,\"\\n\\n            \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"placeholder\",\"label\"],[\"json.name\",[23,[\"model\"]],[27,\"concat\",[[23,[\"model\",\"type\"]],\" Name\"],null],[27,\"concat\",[[23,[\"model\",\"type\"]],\" Name\"],null]]]],false],[0,\"\\n\\n\"],[4,\"unless\",[[23,[\"model\",\"json\",\"isOrganization\"]]],null,{\"statements\":[[0,\"                \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"placeholder\",\"label\"],[\"json.positionName\",[23,[\"model\"]],\"Position Name\",\"Position Name\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n            \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"placeholder\"],[[23,[\"model\",\"json\",\"contactType\"]],\"Contact Type\",false,true,false,\"entityType\",\"Select a contact type\"]]],false],[0,\"\\n\\n            \"],[1,[27,\"input/md-select-contacts\",null,[[\"label\",\"placeholder\",\"value\",\"contactType\",\"icon\",\"tooltip\",\"defaultIcon\",\"filterId\"],[\"Member Of Organization\",\"Pick organization(s) this contact belongs to\",[23,[\"model\",\"json\",\"memberOfOrganization\"]],\"organizations\",true,false,\"organizations\",[23,[\"model\",\"json\",\"contactId\"]]]]],false],[0,\"\\n\\n\\n            \"],[1,[27,\"object/md-phone-array\",null,[[\"value\",\"data-spy\"],[[23,[\"model\",\"json\",\"phone\"]],\"Phone\"]]],false],[0,\"\\n\\n\"],[4,\"object/md-simple-array-table\",null,[[\"data-spy\",\"title\",\"required\",\"value\"],[\"E-mail\",\"E-mail Address\",false,[23,[\"model\",\"json\",\"electronicMailAddress\"]]]],{\"statements\":[[0,\"              \"],[7,\"td\"],[9],[0,\"\\n                  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"value\"]],\"Enter valid e-mail address\"]]],false],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n            \"],[1,[27,\"object/md-address\",null,[[\"model\",\"data-spy\"],[[23,[\"model\",\"json\",\"address\"]],\"Address\"]]],false],[0,\"\\n\\n            \"],[1,[27,\"object/md-online-resource-array\",null,[[\"model\",\"profilePath\",\"data-spy\"],[[23,[\"model\",\"json\",\"onlineResource\"]],\"contact\",\"Online Resource\"]]],false],[0,\"\\n\\n            \"],[1,[27,\"object/md-graphic-array\",null,[[\"model\",\"data-spy\",\"button-text\",\"label\",\"profilePath\"],[[23,[\"model\",\"json\",\"logoGraphic\"]],\"Logo\",\"Add Logo\",\"Logo\",\"contact\"]]],false],[0,\"\\n\\n\"],[4,\"object/md-simple-array-table\",null,[[\"data-spy\",\"title\",\"value\"],[\"Availability\",\"Available Time\",[23,[\"model\",\"json\",\"hoursOfService\"]]]],{\"statements\":[[0,\"              \"],[7,\"td\"],[9],[0,\"\\n                  \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,1,[\"item\",\"value\"]],\"Describe time when contact is avaiable\"]]],false],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n            \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"data-spy\",\"placeholder\",\"label\"],[[23,[\"model\",\"json\",\"contactInstruction\"]],\"Instructions\",\"Supplemental Contact Instructions\",\"Contact Instructions\"]]],false],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-2\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar\"],[9],[0,\"\\n            \"],[1,[27,\"control/md-crud-buttons\",null,[[\"model\",\"doSave\",\"doCancel\",\"doDelete\",\"doCopy\"],[[23,[\"model\"]],[27,\"route-action\",[\"saveContact\"],null],[27,\"route-action\",[\"cancelContact\"],null],[27,\"route-action\",[\"destroyContact\"],null],[27,\"route-action\",[\"copyContact\"],null]]]],false],[0,\"\\n            \"],[1,[21,\"control/md-scroll-spy\"],false],[0,\"\\n\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/contact/show/edit/template.hbs" } });
});
;define('mdeditor/pods/contact/show/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/contact/show/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "M8A752uf", "block": "{\"symbols\":[\"ol\",\"address\",\"hours\",\"email\",\"ph\",\"orgId\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row md-no-spotlight\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-9 col-md-offset-1\"],[9],[0,\"\\n    \"],[7,\"h3\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"defaultLogo\"]]],null,{\"statements\":[[0,\"        \"],[7,\"img\"],[12,\"src\",[23,[\"model\",\"defaultLogo\"]]],[11,\"class\",\"img-responsive inline-block md-logo-preview\"],[11,\"alt\",\"Responsive image\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[27,\"fa-icon\",[[23,[\"model\",\"icon\"]]],[[\"class\"],[\"text-muted\"]]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n      Viewing \"],[1,[23,[\"model\",\"type\"]],false],[0,\" Contact: \"],[1,[23,[\"model\",\"title\"]],false],[0,\"\\n\"],[0,\"          \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"bodyIsRow\"],[false,true,\"Basic Information\",true]],{\"statements\":[[0,\"        \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-6\"],[9],[0,\"\\n          \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Contact Id\",[23,[\"model\",\"contactId\"]]]]],false],[0,\"\\n          \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Contact Name\",[23,[\"model\",\"name\"]]]]],false],[0,\"\\n\\n\"],[4,\"unless\",[[23,[\"model\",\"json\",\"isOrganization\"]]],null,{\"statements\":[[0,\"            \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Postion\",[23,[\"model\",\"json\",\"positionName\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n          \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Contact Type\",[23,[\"model\",\"json\",\"contactType\"]]]]],false],[0,\"\\n          \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Contact Instructions\",[23,[\"model\",\"json\",\"contactInstructions\"]]]]],false],[0,\"\\n\\n        \"],[10],[0,\"\\n        \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-lg-6\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Organizations\"]],{\"statements\":[[4,\"each\",[[23,[\"model\",\"json\",\"memberOfOrganization\"]]],null,{\"statements\":[[0,\"              \"],[1,[27,\"control/md-contact-link\",null,[[\"contactId\"],[[22,6,[]]]]],false],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[6]},{\"statements\":[[0,\"                \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No organizations assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-6 col-xxl-4\"],[9],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"class\"],[false,true,\"Phone\",\"card-table\"]],{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"table-responsive\"],[9],[0,\"\\n        \"],[7,\"table\"],[11,\"class\",\"table\"],[9],[0,\"\\n          \"],[7,\"thead\"],[9],[0,\"\\n            \"],[7,\"tr\"],[9],[0,\"\\n              \"],[7,\"th\"],[9],[0,\"Name\"],[10],[0,\"\\n              \"],[7,\"th\"],[9],[0,\"Number\"],[10],[0,\"\\n              \"],[7,\"th\"],[9],[0,\"Type\"],[10],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n          \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"json\",\"phone\"]]],null,{\"statements\":[[0,\"              \"],[7,\"tr\"],[9],[0,\"\\n                \"],[7,\"td\"],[9],[1,[27,\"get-dash\",[[22,5,[]],\"phoneName\"],null],false],[10],[0,\"\\n                \"],[7,\"td\"],[9],[0,\"\\n\"],[4,\"if\",[[22,5,[\"phoneNumber\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"a\"],[12,\"href\",[28,[\"tel:\",[22,5,[\"phoneNumber\"]]]]],[9],[1,[22,5,[\"phoneNumber\"]],false],[0,\"\\n                      \"],[1,[27,\"ember-tooltip\",null,[[\"text\"],[\"Click to call.\"]]],false],[0,\"\\n                    \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    --\\n\"]],\"parameters\":[]}],[0,\"                \"],[10],[0,\"\\n                \"],[7,\"td\"],[9],[0,\"\\n                  \"],[1,[27,\"if\",[[22,5,[\"service\",\"length\"]],[27,\"join\",[\", \",[22,5,[\"service\"]]],null],\"--\"],null],false],[0,\"\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n\"]],\"parameters\":[5]},{\"statements\":[[0,\"              \"],[7,\"tr\"],[9],[7,\"td\"],[9],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No phones assigned.\"],[10],[10],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-6 col-xxl-4\"],[9],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"class\"],[false,true,\"E-mail\",\"\"]],{\"statements\":[[0,\"      \"],[7,\"ul\"],[11,\"class\",\"list-unstyled\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"json\",\"electronicMailAddress\"]]],null,{\"statements\":[[0,\"          \"],[7,\"li\"],[9],[7,\"a\"],[12,\"href\",[28,[\"mailto:\",[22,4,[]]]]],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[1,[22,4,[]],false],[0,\"\\n            \"],[1,[27,\"ember-tooltip\",null,[[\"text\"],[\"Click to send e-mail.\"]]],false],[0,\"\\n          \"],[10],[10],[0,\"\\n\"]],\"parameters\":[4]},{\"statements\":[[0,\"          \"],[7,\"li\"],[9],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No e-mails assigned.\"],[10],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"clearfix hidden-xxl\"],[9],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-6 col-xxl-4\"],[9],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"class\"],[false,true,\"Availability\",\"\"]],{\"statements\":[[0,\"      \"],[7,\"ul\"],[11,\"class\",\"list-unstyled\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"json\",\"hoursOfService\"]]],null,{\"statements\":[[0,\"          \"],[7,\"li\"],[9],[1,[22,3,[]],false],[10],[0,\"\\n\"]],\"parameters\":[3]},{\"statements\":[[0,\"          \"],[7,\"li\"],[9],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No information provided.\"],[10],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\\n    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"bodyIsRow\"],[false,true,\"Address\",[23,[\"model\",\"json\",\"address\",\"length\"]]]],{\"statements\":[[4,\"each\",[[23,[\"model\",\"json\",\"address\"]]],null,{\"statements\":[[0,\"          \"],[7,\"div\"],[11,\"class\",\"col-lg-6\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"card\"],[9],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n                \"],[1,[27,\"object/md-address/md-address-block\",null,[[\"item\"],[[22,2,[]]]]],false],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[2]},{\"statements\":[[0,\"            \"],[7,\"em\"],[9],[0,\"No addresses provided.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\"],[false,true,\"Online Resource\"]],{\"statements\":[[0,\"        \"],[7,\"div\"],[11,\"class\",\"table-responsive\"],[9],[0,\"\\n          \"],[7,\"table\"],[11,\"class\",\"table\"],[9],[0,\"\\n            \"],[7,\"thead\"],[9],[0,\"\\n              \"],[7,\"tr\"],[9],[0,\"\\n                \"],[7,\"th\"],[9],[0,\"Name\"],[10],[0,\"\\n                \"],[7,\"th\"],[9],[0,\"URI\"],[10],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n            \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"json\",\"onlineResource\"]]],null,{\"statements\":[[0,\"                \"],[7,\"tr\"],[9],[0,\"\\n                  \"],[7,\"td\"],[9],[1,[27,\"get-dash\",[[22,1,[]],\"name\"],null],false],[10],[0,\"\\n                  \"],[7,\"td\"],[9],[0,\"\\n\"],[4,\"if\",[[22,1,[\"uri\"]]],null,{\"statements\":[[0,\"                      \"],[7,\"a\"],[12,\"href\",[22,1,[\"uri\"]]],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[1,[22,1,[\"uri\"]],false],[0,\"\\n\"],[0,\"                      \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                      --\\n\"]],\"parameters\":[]}],[0,\"                  \"],[10],[0,\"\\n                \"],[10],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"                \"],[7,\"tr\"],[9],[7,\"td\"],[9],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No online resources assigned.\"],[10],[10],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-2\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar\"],[9],[0,\"\\n\"],[4,\"control/md-crud-buttons\",null,[[\"model\",\"doDelete\",\"doCopy\"],[[23,[\"model\"]],[27,\"route-action\",[\"destroyContact\"],null],[27,\"route-action\",[\"copyContact\"],null]]],{\"statements\":[[4,\"link-to\",[\"contact.show.edit\",[23,[\"model\",\"id\"]]],[[\"class\"],[\"btn btn-lg btn-success\"]],{\"statements\":[[0,\"          \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[7,\"hr\"],[9],[10],[0,\"\\n\"],[4,\"link-to\",[\"contacts\"],[[\"class\"],[\"btn btn-lg btn-primary btn-block\"]],{\"statements\":[[0,\"      \"],[1,[27,\"fa-icon\",[\"list\"],null],false],[0,\" Show List\"]],\"parameters\":[]},null],[0,\"\\n      \"],[1,[27,\"control/md-scroll-spy\",null,[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]],false],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/contact/show/index/template.hbs" } });
});
;define('mdeditor/pods/contact/show/route', ['exports', 'ember-copy', 'mdeditor/mixins/scroll-to'], function (exports, _emberCopy, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    flashMessages: Ember.inject.service(),

    model: function model(params) {
      let rec = this.store.peekRecord('contact', params.contact_id);
      return rec;
    },

    actions: {
      saveContact: function saveContact() {
        let model = this.currentRouteModel();

        model.save().then(() => {
          //this.refresh();
          //this.setModelHash();
          this.flashMessages.success(`Saved Contact: ${model.get('title')}`);

          //this.transitionTo('contacts');
        });
      },

      destroyContact: function destroyContact() {
        let model = this.currentRouteModel();
        model.destroyRecord().then(() => {
          this.flashMessages.success(`Deleted Contact: ${model.get('title')}`);
          this.replaceWith('contacts');
        });
      },

      cancelContact: function cancelContact() {
        let model = this.currentRouteModel();
        let message = `Cancelled changes to Contact: ${model.get('title')}`;

        if (this.get('settings.data.autoSave')) {
          let json = model.get('jsonRevert');

          if (json) {
            model.set('json', JSON.parse(json));
            this.flashMessages.warning(message);
          }

          return;
        }

        model.reload().then(() => {
          this.flashMessages.warning(message);
        });
      },

      copyContact: function copyContact() {

        this.flashMessages.success(`Copied Contact: ${this.currentRouteModel().get('title')}`);
        this.transitionTo('contact.new.id', (0, _emberCopy.copy)(this.currentRouteModel()));
      }
    }
  });
});
;define("mdeditor/pods/contact/show/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Y4OOXRsb", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/contact/show/template.hbs" } });
});
;define("mdeditor/pods/contact/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "2lU9m6Yl", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/contact/template.hbs" } });
});
;define('mdeditor/pods/contacts/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const columns = [{
    propertyName: 'title',
    title: 'Title'
  }, {
    propertyName: 'defaultOrganizationName',
    title: 'Organization'
  }, {
    propertyName: 'json.electronicMailAddress.firstObject',
    title: 'E-mail'
  }, {
    propertyName: 'contactId',
    title: 'ID',
    isHidden: true
  }, {
    propertyName: 'type',
    title: 'Contact Type',
    filterWithSelect: true
  }];

  exports.default = Ember.Route.extend({
    slider: Ember.inject.service(),
    model() {
      //return this.store.peekAll('contact');
      return this.modelFor('application').findBy('modelName', 'contact');
    },

    columns: columns,

    actions: {
      getColumns() {
        return this.columns;
      },

      showSlider(rec, evt) {
        let slider = this.slider;

        evt.stopPropagation();
        this.controller.set('errorTarget', rec);
        slider.set('fromName', 'md-slider-error');
        slider.toggleSlider(true);

        return false;
      }
    }
  });
});
;define("mdeditor/pods/contacts/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uxKn54EE", "block": "{\"symbols\":[],\"statements\":[[7,\"h3\"],[11,\"class\",\"text-info\"],[9],[1,[27,\"fa-icon\",[\"users\"],null],false],[0,\" Contacts\"],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"length\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"shadow\"],[true,false,true]],{\"statements\":[[0,\"    \"],[1,[27,\"control/md-record-table\",null,[[\"data\",\"dataColumns\",\"allActions\",\"selectProperty\",\"showSlider\"],[[23,[\"model\"]],[27,\"compute\",[[27,\"route-action\",[\"getColumns\"],null],[23,[\"section\",\"meta\",\"type\"]]],null],true,\"_selectedFromList\",[27,\"route-action\",[\"showSlider\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n  \"],[7,\"h3\"],[9],[0,\"No Contacts found.\\n\"],[4,\"link-to\",[\"contact.new\"],[[\"class\"],[\"btn btn-success btn-lg\"]],{\"statements\":[[0,\"      \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Create a Contact\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[4,\"if\",[[23,[\"errorTarget\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-slider-error\",[27,\"hash\",null,[[\"title\",\"body\"],[[27,\"concat\",[\"Viewing errors for: \",[23,[\"errorTarget\",\"title\"]]],null],[27,\"component\",[\"control/md-errors\"],[[\"errors\"],[[23,[\"errorTarget\",\"schemaErrors\"]]]]]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/contacts/template.hbs" } });
});
;define('mdeditor/pods/dashboard/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/dashboard/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ES0QOrR+", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"dashboard\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-xs-12 col-sm-4\"],[9],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"class\",\"block\"],[\"card-inverse card-primary text-center\",false]],{\"statements\":[[0,\"                \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n                    \"],[7,\"div\"],[11,\"class\",\"card-title row\"],[9],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"col-xs-3\"],[9],[0,\"\\n                            \"],[1,[27,\"fa-icon\",[\"file-text\"],[[\"size\"],[5]]],false],[0,\"\\n                        \"],[10],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"col-xs-9 text-right\"],[9],[0,\"\\n                            \"],[7,\"div\"],[11,\"class\",\"huge-text\"],[9],[1,[23,[\"model\",\"0\",\"length\"]],false],[10],[0,\"\\n                            \"],[7,\"div\"],[9],[0,\"Records\"],[10],[0,\"\\n                        \"],[10],[0,\"\\n                    \"],[10],[0,\"\\n                \"],[10],[0,\"\\n\"],[4,\"link-to\",[\"records\"],null,{\"statements\":[[0,\"                    \"],[7,\"div\"],[11,\"class\",\"card-footer\"],[9],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"pull-left\"],[9],[0,\"\\n                            View Records\\n                        \"],[10],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"pull-right\"],[9],[0,\"\\n                            \"],[1,[27,\"fa-icon\",[\"arrow-right\"],[[\"size\"],[1]]],false],[0,\"\\n                        \"],[10],[0,\"\\n\\n                    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-xs-12 col-sm-4\"],[9],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"class\",\"block\"],[\"card-inverse card-success text-center\",false]],{\"statements\":[[0,\"                \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n                    \"],[7,\"div\"],[11,\"class\",\"card-title row\"],[9],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"col-xs-3\"],[9],[0,\"\\n                            \"],[1,[27,\"fa-icon\",[\"users\"],[[\"size\"],[5]]],false],[0,\"\\n                        \"],[10],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"col-xs-9 text-right\"],[9],[0,\"\\n                            \"],[7,\"div\"],[11,\"class\",\"huge-text\"],[9],[1,[23,[\"model\",\"1\",\"length\"]],false],[10],[0,\"\\n                            \"],[7,\"div\"],[9],[0,\"Contacts\"],[10],[0,\"\\n                        \"],[10],[0,\"\\n                    \"],[10],[0,\"\\n                \"],[10],[0,\"\\n\"],[4,\"link-to\",[\"contacts\"],null,{\"statements\":[[0,\"                    \"],[7,\"div\"],[11,\"class\",\"card-footer\"],[9],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"pull-left\"],[9],[0,\"\\n                            View Contacts\\n                        \"],[10],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"pull-right\"],[9],[0,\"\\n                            \"],[1,[27,\"fa-icon\",[\"arrow-right\"],[[\"size\"],[1]]],false],[0,\"\\n                        \"],[10],[0,\"\\n\\n                    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-xs-12 col-sm-4\"],[9],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"class\",\"block\"],[\"card-inverse card-info text-center\",false]],{\"statements\":[[0,\"                \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n                    \"],[7,\"div\"],[11,\"class\",\"card-title row\"],[9],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"col-xs-3\"],[9],[0,\"\\n                            \"],[1,[27,\"fa-icon\",[\"book\"],[[\"size\"],[5]]],false],[0,\"\\n                        \"],[10],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"col-xs-9 text-right\"],[9],[0,\"\\n                            \"],[7,\"div\"],[11,\"class\",\"huge-text\"],[9],[1,[23,[\"model\",\"2\",\"length\"]],false],[10],[0,\"\\n                            \"],[7,\"div\"],[9],[0,\"Dictionaries\"],[10],[0,\"\\n                        \"],[10],[0,\"\\n                    \"],[10],[0,\"\\n                \"],[10],[0,\"\\n\"],[4,\"link-to\",[\"dictionaries\"],null,{\"statements\":[[0,\"                    \"],[7,\"div\"],[11,\"class\",\"card-footer\"],[9],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"pull-left\"],[9],[0,\"\\n                            View Dictionaries\\n                        \"],[10],[0,\"\\n                        \"],[7,\"div\"],[11,\"class\",\"pull-right\"],[9],[0,\"\\n                            \"],[1,[27,\"fa-icon\",[\"arrow-right\"],[[\"size\"],[1]]],false],[0,\"\\n                        \"],[10],[0,\"\\n\\n                    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"hr\"],[9],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-xs-12 col-md-6 col-md-offset-3\"],[9],[0,\"\\n            \"],[7,\"h2\"],[11,\"class\",\"text-center\"],[9],[0,\"\\n                \"],[7,\"b\"],[9],[7,\"span\"],[11,\"class\",\"logo huge-text\"],[9],[0,\"md\"],[7,\"span\"],[11,\"class\",\"md-icon-mdeditor\"],[9],[10],[0,\"ditor\"],[10],[10],[0,\"\\n            \"],[10],[0,\"\\n            \"],[7,\"p\"],[11,\"class\",\"lead\"],[9],[0,\"\\n                The mdEditor is a web application that allows users to author\\n                and edit metadata for projects and datasets. The primary goal is to\\n                create an editor that will allow creation and management of\\n                archival quality metadata without requiring extensive knowledge\\n                of various metadata standards.\\n            \"],[10],[0,\"\\n            \"],[7,\"p\"],[11,\"class\",\"lead\"],[9],[0,\"\\n              The md\"],[7,\"span\"],[11,\"class\",\"md-icon-mdeditor\"],[9],[10],[0,\"ditor\\n              is currently under active development, and the team is working\\n              towards finalizing the Version 1.0 release. \"],[7,\"a\"],[11,\"href\",\"https://github.com/adiwg/mdEditor/projects\"],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[0,\"Follow progress\"],[10],[0,\" or \"],[7,\"a\"],[11,\"href\",\"https://github.com/adiwg/mdEditor/issues\"],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[0,\"report issues\"],[10],[0,\" on  \"],[7,\"a\"],[11,\"href\",\"https://github.com/adiwg/mdEditor\"],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[0,\" the Github website\"],[10],[0,\". For more\\n              information, see \"],[7,\"a\"],[11,\"href\",\"https://www.mdeditor.org\"],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[0,\"mdeditor.org\"],[10],[0,\".\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dashboard/template.hbs" } });
});
;define('mdeditor/pods/dictionaries/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const columns = [{
    propertyName: 'title',
    title: 'Title'
  }, {
    propertyName: 'json.dataDictionary.subject',
    title: 'Subject'
  }];

  exports.default = Ember.Route.extend({
    slider: Ember.inject.service(),
    model() {
      //return this.store.peekAll('contact');
      return this.modelFor('application').findBy('modelName', 'dictionary');
    },

    columns: columns,

    actions: {
      getColumns() {
        return this.columns;
      },

      showSlider(rec, evt) {
        let slider = this.slider;

        evt.stopPropagation();
        this.controller.set('errorTarget', rec);
        slider.set('fromName', 'md-slider-error');
        slider.toggleSlider(true);

        return false;
      }
    }
  });
});
;define("mdeditor/pods/dictionaries/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "zPxrOHpW", "block": "{\"symbols\":[],\"statements\":[[7,\"h3\"],[11,\"class\",\"text-info\"],[9],[1,[27,\"fa-icon\",[\"book\"],null],false],[0,\" Dictionaries\"],[10],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"model\",\"length\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"shadow\"],[true,false,true]],{\"statements\":[[0,\"    \"],[1,[27,\"control/md-record-table\",null,[[\"data\",\"dataColumns\",\"allActions\",\"selectProperty\",\"showSlider\"],[[23,[\"model\"]],[27,\"compute\",[[27,\"route-action\",[\"getColumns\"],null]],null],true,\"_selectedFromList\",[27,\"route-action\",[\"showSlider\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n  \"],[7,\"h3\"],[9],[0,\"No Dictionaries found.\\n\"],[4,\"link-to\",[\"dictionary.new\"],[[\"class\"],[\"btn btn-success btn-lg\"]],{\"statements\":[[0,\"      \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Create a Dictionary\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[4,\"if\",[[23,[\"errorTarget\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-slider-error\",[27,\"hash\",null,[[\"title\",\"body\"],[[27,\"concat\",[\"Viewing errors for: \",[23,[\"errorTarget\",\"title\"]]],null],[27,\"component\",[\"control/md-errors\"],[[\"errors\"],[[23,[\"errorTarget\",\"hasSchemaErrors\"]]]]]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionaries/template.hbs" } });
});
;define('mdeditor/pods/dictionary/new/id/route', ['exports', 'ember-data'], function (exports, _emberData) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const NotFoundError = _emberData.default.NotFoundError;
  exports.default = Ember.Route.extend({
    model: function model(params) {
      let record = this.store.peekRecord('dictionary', params.dictionary_id);

      if (record) {
        return record;
      }

      return this.store.findRecord('dictionary', params.dictionary_id);
    },

    breadCrumb: null,

    deactivate: function deactivate() {
      // We grab the model loaded in this route
      let model = this.currentRouteModel();

      // If we are leaving the Route we verify if the model is in
      // 'isDeleted' state, which means it wasn't saved to the metadata.
      if (model && model.isDeleted) {
        // We call DS#unloadRecord() which removes it from the store
        this.store.unloadRecord(model);
      }
    },

    //some test actions
    setupController: function setupController(controller, model) {
      // Call _super for default behavior
      this._super(controller, model);

      // setup tests for required attributes
      controller.noName = Ember.computed('model.json.dataDictionary.citation.title', function () {
        return model.get('json.dataDictionary.citation.title') ? false : true;
      });
      controller.noType = Ember.computed('model.json.dataDictionary.resourceType', function () {
        return model.get('json.dataDictionary.resourceType') ? false : true;
      });
      controller.allowSave = Ember.computed('noType', 'noName', function () {
        return this.noName || this.noType;
      });
    },

    // serialize: function (model) {
    //   // If we got here without an ID (and therefore without a model)
    //   // Ensure that we leave the route param in the URL blank (not 'undefined')
    //   if(!model) {
    //     return {
    //       dictionary_id: ''
    //     };
    //   }
    //
    //   // Otherwise, let Ember handle it as usual
    //   return this._super.apply(this, arguments);
    // },

    actions: {
      willTransition: function willTransition(transition) {
        if (transition.targetName === 'dictionary.new.index') {
          transition.abort();
          return true;
        }

        // We grab the model loaded in this route
        var model = this.currentRouteModel();
        // If we are leaving the Route we verify if the model is in
        // 'isNew' state, which means it wasn't saved to the backend.
        if (model && model.get('isNew')) {
          // We call DS#destroyRecord() which removes it from the store
          model.destroyRecord().then(() => transition.retry());

          return true;
        }
      },

      saveDictionary() {
        this.currentRouteModel().save().then(model => {
          this.replaceWith('dictionary.show.edit', model);
        });
      },

      cancelDictionary() {
        this.replaceWith('dictionaries');

        return false;
      },

      error(error) {
        if (error instanceof NotFoundError) {
          this.flashMessages.warning('No dictionary found! Re-directing to new record...');
          // redirect to new
          this.replaceWith('dictionary.new');
        } else {
          // otherwise let the error bubble
          return true;
        }
      }
    }

  });
});
;define("mdeditor/pods/dictionary/new/id/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "MhxcHzo9", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row page-header\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 col-xxl-6 col-xxl-offset-3\"],[9],[0,\"\\n      \"],[7,\"h3\"],[9],[0,\"Create New Data Dictionary\"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"form\"],[11,\"class\",\"col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 col-xxl-6 col-xxl-offset-3\"],[3,\"action\",[[22,0,[]],\"saveDictionary\"],[[\"on\"],[\"submit\"]]],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"label\"],[12,\"class\",[28,[\"control-label\\n            \",[27,\"if\",[[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],\"json.dataDictionary.citation.title\"],null],\"options.presence.presence\"],null],\"required\"],null]]]],[9],[0,\"Dictionary Title\"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n                \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"showValidations\",\"placeholder\"],[\"json.dataDictionary.citation.title\",[23,[\"model\"]],true,\"Enter a title for the dictionary\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"label\"],[11,\"class\",\"control-label\"],[9],[0,\"Dictionary Subject\"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n              \"],[1,[27,\"input/md-codelist-multi\",null,[[\"create\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"mdCodeName\",\"showValidations\",\"model\",\"path\",\"placeholder\"],[true,true,true,[23,[\"disabled\"]],true,\"scope\",true,[23,[\"model\"]],\"json.dataDictionary.subject\",\"Choose type(s) of resource\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"col-sm-offset-4 col-sm-8\"],[9],[0,\"\\n                 \"],[7,\"span\"],[11,\"class\",\"pull-right\"],[9],[0,\"\\n                      \"],[7,\"button\"],[11,\"class\",\"btn btn-success md-form-save\"],[12,\"disabled\",[27,\"get\",[[23,[\"model\",\"validations\"]],\"isInvalid\"],null]],[11,\"type\",\"submit\"],[9],[0,\"Save\"],[10],[0,\"\\n                      \"],[7,\"button\"],[11,\"class\",\"btn btn-warning \"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancelDictionary\"]],[9],[0,\"Cancel\"],[10],[0,\"\\n                 \"],[10],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/new/id/template.hbs" } });
});
;define('mdeditor/pods/dictionary/new/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    redirect: function redirect() {
      let rec = this.store.createRecord('dictionary');

      this.replaceWith('dictionary.new.id', rec.id);
    }
  });
});
;define("mdeditor/pods/dictionary/new/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "EsbU2pVa", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/new/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/new/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'New',
        linkable: false
      };
    }
  });
});
;define('mdeditor/pods/dictionary/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Dictionary',
        linkable: false
      };
    }
  });
});
;define('mdeditor/pods/dictionary/show/edit/citation/identifier/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    model(params) {
      this.set('identifierId', params.identifier_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit.citation.index'));
      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let identifierId = this.identifierId;
      let model = this.modelFor('dictionary.show.edit.citation');
      let identifiers = model.get('json.dataDictionary.citation.identifier');
      let identifier = identifierId && Ember.isArray(identifiers) ? identifiers.get(identifierId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(identifier)) {
        this.flashMessages.warning('No identifier found! Re-directing to citation...');
        this.replaceWith('dictionary.show.edit.citation.index');

        return;
      }

      return identifier;
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/citation/identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uRL/h8pQ", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Identifier: \"],[1,[23,[\"model\",\"identifier\"]],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"class\",\"model\",\"profilePath\",\"data-spy\"],[\"\",[23,[\"model\"]],\"dictionary.citation.identifier\",\"Identifier\"]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Citation\",\"arrow-left\",\"dictionary.show.edit.citation\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/citation/identifier/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/citation/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    actions: {
      editIdentifier(index) {
        this.transitionTo('dictionary.show.edit.citation.identifier', index).then(function () {
          this.setScrollTo('identifier');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/citation/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "7RBNdmqf", "block": "{\"symbols\":[\"citation\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"Editing Citation\\n  \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for \"],[7,\"em\"],[9],[1,[23,[\"model\",\"title\"]],false],[10],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"json\",\"dataDictionary\",\"citation\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"object/md-citation\",null,[[\"class\",\"model\",\"profilePath\",\"editIdentifier\"],[\"\",[22,1,[]],\"dictionary.citation\",[27,\"route-action\",[\"editIdentifier\"],null]]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Overview\",\"home\",\"dictionary.show.index\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/citation/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/citation/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/dictionary/show/edit/citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "N6s3bAqy", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/citation/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/domain/edit/citation/identifier/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    beforeModel(transition) {
      this.set('domainId', transition.params['dictionary.show.edit.domain.edit'].domain_id);
    },
    model(params) {
      this.set('identifierId', params.identifier_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit'));
      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let identifierId = this.identifierId;
      //let model = this.modelFor('dictionary.show.edit.citation.index');
      //let identifiers = model.get('json.dataDictionary.citation.identifier');
      let model = this.modelFor('dictionary.show.edit');
      let identifier = model.get('json.dataDictionary.domain.' + this.domainId + '.domainReference.identifier.' + identifierId);
      //let identifier = identifierId && isArray(identifiers) ? identifiers.get(identifierId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(identifier)) {
        this.flashMessages.warning('No identifier found! Re-directing to citation...');
        this.replaceWith('dictionary.show.edit.domain.edit.citation.index');

        return;
      }

      return identifier;
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/domain/edit/citation/identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "B2uDS+B3", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Identifier: \"],[1,[23,[\"model\",\"identifier\"]],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"class\",\"model\",\"profilePath\",\"data-spy\"],[\"\",[23,[\"model\"]],\"dictionary.domain.citation.identifier\",\"Identifier\"]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Domain Citation\",\"arrow-left\",\"dictionary.show.edit.domain.edit.citation\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/domain/edit/citation/identifier/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/domain/edit/citation/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Reference'
      };
    },

    afterModel(model) {
      let domainId = this.paramsFor('dictionary.show.edit.domain.edit').domain_id;

      if (Ember.isEmpty(Ember.get(model, 'domainReference'))) {
        Ember.set(model, 'domainReference', {});
      }

      this.set('domainId', domainId);
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit'));
    },

    actions: {
      backToDomain() {
        this.transitionTo('dictionary.show.edit.domain.edit', this.domainId);
      },
      editIdentifier(index) {
        this.transitionTo('dictionary.show.edit.domain.edit.citation.identifier', index).then(function () {
          this.setScrollTo('identifier');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/domain/edit/citation/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "28zQ++Um", "block": "{\"symbols\":[\"citation\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"Editing Reference\\n  \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for Domain \"],[7,\"em\"],[9],[1,[23,[\"model\",\"codeName\"]],false],[10],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"domainReference\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"object/md-citation\",null,[[\"class\",\"model\",\"profilePath\",\"simpleIdentifier\",\"editIdentifier\"],[\"\",[22,1,[]],\"dictionary.citation\",false,[27,\"route-action\",[\"editIdentifier\"],null]]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"type\",\"click\"],[\"Back to Domain\",\"arrow-left\",\"primary\",[27,\"route-action\",[\"backToDomain\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/domain/edit/citation/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/domain/edit/citation/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Reference'
      };
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/domain/edit/citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "IH2QsdRl", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/domain/edit/citation/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/domain/edit/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    beforeModel(transition) {
      this.set('domainId', transition.params['dictionary.show.edit.domain.edit'].domain_id);
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      let parent = this.controllerFor('dictionary.show.edit.domain.edit');

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit'));
      this.controller.set('domainId', Ember.get(parent, 'domainId'));

      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: parent.get('setupModel'),
        cancelScope: this
      });
    },

    actions: {
      editCitation(scrollTo) {
        this.transitionTo('dictionary.show.edit.domain.edit.citation').then(function () {
          this.setScrollTo(scrollTo);
        }.bind(this));
      },
      editDomainItem(id) {
        this.transitionTo('dictionary.show.edit.domain.edit.item', id).then(function () {
          this.setScrollTo('md-domainitem-' + id);
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/domain/edit/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "gJ7Opk8f", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Domain \"],[4,\"if\",[[23,[\"model\",\"codeName\"]]],null,{\"statements\":[[0,\"\\n    \"],[7,\"em\"],[9],[1,[23,[\"model\",\"codeName\"]],false],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    #\"],[1,[21,\"domainId\"],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for \"],[7,\"em\"],[9],[1,[23,[\"parentModel\",\"title\"]],false],[10],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-domain\",null,[[\"class\",\"model\",\"profilePath\",\"editCitation\",\"editDomainItem\"],[\"\",[23,[\"model\"]],\"dictionary.domain\",[27,\"route-action\",[\"editCitation\"],null],[27,\"route-action\",[\"editDomainItem\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Domains\",\"arrow-left\",\"dictionary.show.edit.domain.index\"]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/domain/edit/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/domain/edit/item/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    beforeModel(transition) {
      this.set('domainId', transition.params['dictionary.show.edit.domain.edit'].domain_id);
    },
    model(params) {
      this.set('itemId', params.item_id);

      return this.setupModel();
    },

    breadCrumb: Ember.computed('itemId', function () {
      return {
        title: 'Item ' + this.itemId
      };
    }),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      //let parent = this.controllerFor('dictionary.show.edit.domain.edit.index');

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit'));
      this.controller.set('domainId', this.domainId);
      this.controller.set('itemId', this.itemId);
      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let itemId = this.itemId;
      let model = this.modelFor('dictionary.show.edit');
      let objects = model.get('json.dataDictionary.domain.' + this.domainId + '.domainItem');
      let resource = itemId && Ember.isArray(objects) ? objects.objectAt(itemId) : undefined;

      //make sure the domain item exists
      if (Ember.isEmpty(resource)) {
        this.flashMessages.warning('No Domain Item found! Re-directing to list...');
        this.replaceWith('dictionary.show.edit.domain');

        return;
      }

      return resource;
    },

    actions: {
      backToDomain() {
        this.transitionTo('dictionary.show.edit.domain.edit', this.domainId);
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/domain/edit/item/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/On6R87q", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Domain Item \"],[4,\"if\",[[23,[\"model\",\"name\"]]],null,{\"statements\":[[0,\"\\n    \"],[7,\"em\"],[9],[1,[23,[\"model\",\"name\"]],false],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    #\"],[1,[21,\"itemId\"],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-domainitem\",null,[[\"class\",\"model\",\"profilePath\"],[\"\",[23,[\"model\"]],\"dictionary.domainItem\"]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"type\",\"click\"],[\"Back to Domain\",\"arrow-left\",\"primary\",[27,\"route-action\",[\"backToDomain\"],null]]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/domain/edit/item/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/domain/edit/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params) {
      this.set('domainId', params.domain_id);

      return this.setupModel();
    },

    breadCrumb: Ember.computed('domainId', function () {
      return {
        title: this.domainId
      };
    }),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('setupModel', this.setupModel);
      this.controller.set('domainId', this.domainId);
      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let domainId = this.domainId;
      let model = this.modelFor('dictionary.show.edit');
      let objects = model.get('json.dataDictionary.domain');
      let resource = domainId && Ember.isArray(objects) ? objects.objectAt(domainId) : undefined;

      //make sure the domain exists
      if (Ember.isEmpty(resource)) {
        this.flashMessages.warning('No Domain object found! Re-directing to list...');
        this.replaceWith('dictionary.show.edit.domain');

        return;
      }

      return resource;
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/domain/edit/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "7+AZbrM9", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/domain/edit/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/domain/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.dataDictionary');
      Ember.set(model, 'domain', Ember.getWithDefault(model, 'domain', []));
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit.index'));
    },

    actions: {
      editDomain(id) {
        this.transitionTo('dictionary.show.edit.domain.edit', id);
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/domain/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6J5Fs7uR", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Domains\\n  \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for \"],[7,\"em\"],[9],[1,[23,[\"model\",\"title\"]],false],[10],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"items\",\"header\",\"shadow\",\"buttonText\",\"ellipsis\",\"attributes\",\"editItem\",\"verticalButtons\",\"profilePath\",\"hideIndex\",\"condensed\"],[[23,[\"model\",\"json\",\"dataDictionary\",\"domain\"]],\"Domain\",true,\"Add Domain\",true,\"domainId,codeName,description\",[27,\"route-action\",[\"editDomain\"],null],true,\"dictionary.domain\",false,false]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Overview\",\"home\",\"dictionary.show.index\"]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/domain/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/domain/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Domains'
      };
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/domain/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "dAHaqw3N", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/domain/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/edit/attribute/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    beforeModel(transition) {
      this.set('entityId', transition.params['dictionary.show.edit.entity.edit'].entity_id);
      this.set('attributeId', transition.params['dictionary.show.edit.entity.edit.attribute'].attribute_id);
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      let parent = this.controllerFor('dictionary.show.edit.entity.edit.attribute');

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit'));
      this.controller.set('entityId', this.entityId);
      this.controller.set('attributeId', this.attributeId);
      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: Ember.get(parent, 'setupModel'),
        cancelScope: this
      });
    },

    actions: {
      backToEntity() {
        this.transitionTo('dictionary.show.edit.entity.edit', this.entityId);
      },
      editCitation(scrollTo) {
        this.transitionTo('dictionary.show.edit.domain.edit.citation').then(function () {
          this.setScrollTo(scrollTo);
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/edit/attribute/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "WTI1uAOq", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Attribute \"],[4,\"if\",[[23,[\"model\",\"codeName\"]]],null,{\"statements\":[[0,\"\\n    \"],[7,\"em\"],[9],[1,[23,[\"model\",\"codeName\"]],false],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    #\"],[1,[21,\"attributeId\"],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for \"],[7,\"em\"],[9],[1,[23,[\"parentModel\",\"title\"]],false],[10],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-attribute\",null,[[\"class\",\"model\",\"dictionary\",\"profilePath\"],[\"\",[23,[\"model\"]],[23,[\"parentModel\",\"json\",\"dataDictionary\"]],\"dictionary.entity.attribute\"]]],false],[0,\"\\n\"],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[\"Back to Entity\",\"arrow-left\",[27,\"route-action\",[\"backToEntity\"],null]]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/edit/attribute/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/edit/attribute/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    beforeModel(transition) {
      this.set('entityId', transition.params['dictionary.show.edit.entity.edit'].entity_id);
    },
    model(params) {
      this.set('attributeId', params.attribute_id);

      return this.setupModel();
    },

    // breadCrumb: computed('attributeId', function () {
    //   let model = get(this, 'currentRouteModel').call(this);
    //
    //   return {
    //     title: 'Attribute: ' + (get(model,'codeName') || get(this, 'attributeId'))
    //   };
    // }),

    setupController(controller, model) {
      this._super(controller, model);

      this.controller.set('setupModel', this.setupModel);
    },

    setupModel() {
      let attributeId = this.attributeId;
      let model = this.modelFor('dictionary.show.edit');
      let objects = model.get('json.dataDictionary.entity.' + this.entityId + '.attribute');
      let resource = attributeId && Ember.isArray(objects) ? objects.objectAt(attributeId) : undefined;

      //make sure the entity item exists
      if (Ember.isEmpty(resource)) {
        this.flashMessages.warning('No Attribute found! Re-directing to Entity...');
        this.replaceWith('dictionary.show.edit.entity.edit');

        return;
      }

      return resource;
    },

    actions: {
      backToEntity() {
        this.transitionTo('dictionary.show.edit.entity.edit', this.entityId);
      },
      editIdentifier(index) {
        let model = this.currentRouteModel();

        this.transitionTo('dictionary.show.edit.entity.edit.attribute.identifier', Ember.get(model, 'attributeReference.identifier.' + index)).then(function () {
          this.setScrollTo('identifier');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/edit/attribute/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "YHIjWHuQ", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/edit/attribute/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/edit/citation/identifier/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    beforeModel(transition) {
      this.set('entityId', transition.params['dictionary.show.edit.entity.edit'].entity_id);
      this.set('citationId', transition.params['dictionary.show.edit.entity.edit.citation'].citation_id);
    },
    model(params) {
      this.set('identifierId', params.identifier_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit'));
      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let identifierId = this.identifierId;
      //let model = this.modelFor('dictionary.show.edit.citation.index');
      //let identifiers = model.get('json.dataDictionary.citation.identifier');
      let model = this.modelFor('dictionary.show.edit');
      let identifiers = model.get('json.dataDictionary.entity.' + this.entityId + '.entityReference.' + this.citationId + '.identifier');
      let identifier = identifierId && Ember.isArray(identifiers) ? identifiers.get(identifierId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(identifier)) {
        this.flashMessages.warning('No identifier found! Re-directing to citation...');
        this.replaceWith('dictionary.show.edit.entity.edit.citation.index');

        return;
      }

      return identifier;
    },

    actions: {
      backToReference() {
        this.transitionTo('dictionary.show.edit.entity.edit.citation', this.entityId, this.citationId);
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/edit/citation/identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "jBlwxGkG", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Identifier\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"class\",\"model\",\"profilePath\",\"data-spy\"],[\"\",[23,[\"model\"]],\"dictionary.entity.citation.identifier\",\"Identifier\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[\"Back to Entity Reference\",\"arrow-left\",[27,\"route-action\",[\"backToReference\"],null]]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/edit/citation/identifier/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/edit/citation/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    actions: {
      editIdentifier(index) {
        this.transitionTo('dictionary.show.edit.entity.edit.citation.identifier', index).then(function () {
          this.setScrollTo('entity-identifier');
        }.bind(this));
      }
    },
    backToEntity() {
      this.transitionTo('dictionary.show.edit.entity.edit', this.entityId);
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/edit/citation/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "B0E5h6f4", "block": "{\"symbols\":[\"citation\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"Editing Reference\\n  \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for \"],[7,\"em\"],[9],[1,[23,[\"model\",\"title\"]],false],[10],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"object/md-citation\",null,[[\"class\",\"model\",\"profilePath\",\"editIdentifier\"],[\"\",[22,1,[]],\"dictionary.entity.entityReference\",[27,\"route-action\",[\"editIdentifier\"],null]]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[\"Back to Entity\",\"arrow-left\",[27,\"route-action\",[\"backToEntity\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/edit/citation/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/edit/citation/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Reference'
      };
    },

    beforeModel(transition) {
      this.set('entityId', transition.params['dictionary.show.edit.entity.edit'].entity_id);
    },

    model(params) {
      this.set('citationId', params.citation_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit'));
      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let citationId = this.citationId;
      let model = this.modelFor('dictionary.show.edit');
      let citations = model.get('json.dataDictionary.entity.' + this.entityId + '.entityReference');
      let citation = citationId && Ember.isArray(citations) ? citations.get(citationId) : undefined;

      //make sure the citation exists
      if (Ember.isEmpty(citation)) {
        this.flashMessages.warning('No Entity Reference found! Re-directing...');
        this.replaceWith('dictionary.show.edit.entity.edit');

        return;
      }

      return citation;
    },
    actions: {
      backToEntity() {
        this.transitionTo('dictionary.show.edit.entity.edit', this.entityId);
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/edit/citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "r2iR15PK", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/edit/citation/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/edit/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    beforeModel(transition) {
      this.set('entityId', transition.params['dictionary.show.edit.entity.edit'].entity_id);
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      let parent = this.controllerFor('dictionary.show.edit.entity.edit');

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit'));
      this.controller.set('entityId', Ember.get(parent, 'entityId'));

      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: parent.get('setupModel'),
        cancelScope: this
      });
    },

    actions: {
      editCitation(id) {
        this.transitionTo('dictionary.show.edit.entity.edit.citation', id).then(function () {
          this.setScrollTo('entity-reference');
        }.bind(this));
      },
      editAttribute(id) {
        this.transitionTo('dictionary.show.edit.entity.edit.attribute.index', id).then(function () {
          this.setScrollTo('md-attribute-' + id);
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/edit/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "tBEQ3kMP", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Entity \"],[4,\"if\",[[23,[\"model\",\"codeName\"]]],null,{\"statements\":[[0,\"\\n    \"],[7,\"em\"],[9],[1,[23,[\"model\",\"codeName\"]],false],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    #\"],[1,[21,\"entityId\"],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for \"],[7,\"em\"],[9],[1,[23,[\"parentModel\",\"title\"]],false],[10],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-entity\",null,[[\"class\",\"model\",\"dictionary\",\"profilePath\",\"editCitation\",\"editAttribute\"],[\"\",[23,[\"model\"]],[23,[\"parentModel\",\"json\",\"dataDictionary\"]],\"dictionary.entity\",[27,\"route-action\",[\"editCitation\"],null],[27,\"route-action\",[\"editAttribute\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Entity List\",\"arrow-left\",\"dictionary.show.edit.entity.index\"]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/edit/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/edit/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params) {
      this.set('entityId', params.entity_id);

      return this.setupModel();
    },

    breadCrumb: Ember.computed('entityId', function () {
      return {
        title: this.entityId
      };
    }),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('setupModel', this.setupModel);
      this.controller.set('entityId', this.entityId);
      this.controllerFor('dictionary.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let entityId = this.entityId;
      let model = this.modelFor('dictionary.show.edit');
      let objects = model.get('json.dataDictionary.entity');
      let resource = entityId && Ember.isArray(objects) ? objects.objectAt(entityId) : undefined;

      //make sure the entity exists
      if (Ember.isEmpty(resource)) {
        this.flashMessages.warning('No Entity object found! Re-directing to list...');
        this.replaceWith('dictionary.show.edit.entity');

        return;
      }

      return resource;
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/edit/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "tt9bLkQs", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/edit/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/import/route', ['exports', 'uuid/v4'], function (exports, _v) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    setupController(controller, model) {
      // Call _super for default behavior
      this._super(controller, model);
      // Implement your custom setup after
      controller.set('entity', Ember.Object.create({
        entityId: (0, _v.default)(),
        attribute: []
      }));
    },

    /**
     * The template object for columns
     *
     * @property columnObject
     * @type {Ember.Object}
     * @static
     * @readOnly
     */
    columnObject: Ember.Object.extend({
      domain: null,
      import: true,
      range: false,
      importName: null,
      importType: null,
      min: Ember.computed.min('domain'),
      max: Ember.computed.max('domain'),
      domainWarn: Ember.computed.gt('domain.length', 50),
      isNumber: Ember.computed.equal('dataType', 'number'),
      disableRange: Ember.computed.not('isNumber'),
      example: Ember.computed('domain', function () {
        return this.domain.slice(0, 10);
      })
    }),

    /**
     * Returns the dataType code value for the JavaScript type.
     *
     * @method columnType
     * @param {string} type The JavaScript type
     * @return {string}
     */
    columnType(type) {
      return {
        'string': 'character varying',
        'number': 'numeric',
        'boolean': 'boolean',
        'integer': 'integer'
      }[type] || 'unknown';
    },

    createAttribute(columnName, column) {
      let domain = Ember.get(column, 'hasDomain') ? Ember.Object.create({
        domainId: (0, _v.default)(),
        codeName: columnName,
        domainItem: Ember.get(column, 'domain').filter(i => Ember.isPresent(i)).map(itm => {
          return {
            name: itm.toString(),
            value: itm.toString(),
            definition: null
          };
        })
      }) : false;

      let attribute = {
        codeName: column.importName,
        dataType: column.importType,
        allowNull: column.allowNull,
        maxValue: column.get('range') ? column.get('max').toString() : null,
        minValue: column.get('range') ? column.get('min').toString() : null,
        domainId: domain ? Ember.get(domain, 'domainId') : null
      };

      return {
        attribute: attribute,
        domain: domain
      };
    },

    generateData() {
      let columns = this.get('controller.columns');
      let domains = [];
      let attributes = [];

      Object.keys(columns).forEach(columnName => {
        let col = columns[columnName];

        if (!col.import) {
          return;
        }

        let attr = this.createAttribute(columnName, col);

        attributes.pushObject(attr.attribute);

        if (attr.domain) {
          domains.pushObject(attr.domain);
        }
      });

      return {
        attributes: attributes,
        domains: domains
      };
    },

    actions: {
      cancelImport() {
        Ember.set(this, 'controller.columns', null);
        Ember.set(this, 'controller.processed', false);
      },
      doImport() {
        let data = this.generateData();
        let entity = this.get('controller.entity');
        let dataDictionary = this.get('controller.model.json.dataDictionary');

        if (Ember.get(data, 'domains.length')) {
          Ember.set(dataDictionary, 'domain', Ember.getWithDefault(dataDictionary, 'domain', []));

          Ember.set(dataDictionary, 'domain', Ember.get(dataDictionary, 'domain').concat(data.domains));
        }

        Ember.set(dataDictionary, 'entity', Ember.getWithDefault(dataDictionary, 'entity', []));
        Ember.set(entity, 'attribute', data.attributes);
        Ember.get(dataDictionary, 'entity').push(entity);

        this.transitionTo('dictionary.show.edit.entity.edit', Ember.get(dataDictionary, 'entity.length') - 1);

        this.flashMessages.success('Entity imported from CSV!');
      },
      processData(data) {
        let template = this.columnObject;
        let typer = this.columnType;

        Ember.set(this, 'controller.processed', false);

        Ember.set(this, 'controller.columns', data.meta.fields.reduce(function (map, obj) {
          let type = Ember.typeOf(data.data[0][obj]);

          Ember.set(map, obj, template.create({
            dataType: type,
            domain: [],
            importName: obj,
            importType: typer(type)
          }));
          return map;
        }, Ember.Object.create({})));
      },
      reduceData(data) {
        let columns = Object.keys(this.get('controller.columns'));

        columns.forEach(columnName => {
          let path = 'controller.columns.' + columnName + '.domain';
          let existing = Ember.get(this, path);

          // if(get(existing,'length' )<= get(this,'maxDomain')){
          let unique = [...new Set(data.map(item => item[columnName]))];

          Ember.set(this, path, [...new Set([...existing, ...unique])]);
          // }
        });
      },
      processComplete() {
        let columns = this.get('controller.columns');
        let columnNames = Object.keys(columns);

        columnNames.forEach(columnName => {
          let col = columns[columnName];

          if (col.importType === 'numeric') {
            let isInteger = col.domain.any(itm => Number.isInteger(itm));

            col.importType = isInteger ? 'integer' : 'numeric';
          }

          col.allowNull = col.domain.any(itm => Ember.isBlank(itm));
        });

        Ember.set(this, 'controller.processed', true);
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/import/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "LtGMfUw6", "block": "{\"symbols\":[\"row\",\"col\",\"ex\"],\"statements\":[[7,\"h3\"],[11,\"class\",\"section-header\"],[9],[0,\"Generate Entity from CSV\"],[10],[0,\"\\n\"],[4,\"unless\",[[23,[\"processed\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"control/md-import-csv\",null,[[\"beforeFirstChunk\",\"processChunk\",\"processComplete\"],[[27,\"route-action\",[\"processData\"],null],[27,\"route-action\",[\"reduceData\"],null],[27,\"route-action\",[\"processComplete\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"form\"],[11,\"class\",\"form\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"data-spy\"],[[23,[\"entity\",\"entityId\"]],\"Enter the identifier for the entity.\",\"Entity Identifier\",\"Identifier\"]]],false],[0,\"\\n\\n      \"],[1,[27,\"input/md-input\",null,[[\"value\",\"required\",\"placeholder\",\"label\",\"data-spy\"],[[23,[\"entity\",\"codeName\"]],true,\"Enter the name used to refer to the entity in schema definitions or application software.\",\"Entity Code Name\",\"Code Name\"]]],false],[0,\"\\n\\n      \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"required\",\"autoresize\",\"placeholder\",\"label\",\"data-spy\"],[[23,[\"entity\",\"definition\"]],true,true,\"A brief description of the entity.\",\"Entity Definition\",\"Definition\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"titleIcon\",\"collapsible\",\"collapsed\",\"data-spy\",\"shadow\"],[\"Setup\",\"gear\",false,false,\"Setup\",true]],{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"md-table md-table-checkbox\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"md-table-title\"],[9],[0,\"Select options for Attributes\"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"table-responsive\"],[9],[0,\"\\n          \"],[7,\"table\"],[11,\"class\",\"table table-striped table-hover form-inline md-table-align-middle\"],[9],[0,\"\\n            \"],[7,\"thead\"],[9],[0,\"\\n              \"],[7,\"tr\"],[9],[0,\"\\n                \"],[7,\"th\"],[9],[0,\"Import\"],[10],[0,\"\\n                \"],[7,\"th\"],[9],[0,\"Name\"],[10],[0,\"\\n                \"],[7,\"th\"],[9],[0,\"Data Type\"],[10],[0,\"\\n                \"],[7,\"th\"],[9],[0,\"Domain\"],[10],[0,\"\\n                \"],[7,\"th\"],[9],[0,\"Allow Null\"],[10],[0,\"\\n                \"],[7,\"th\"],[9],[0,\"Max/Min\"],[10],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n            \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[27,\"-each-in\",[[23,[\"columns\"]]],null]],null,{\"statements\":[[0,\"                \"],[7,\"tr\"],[9],[0,\"\\n                  \"],[7,\"td\"],[9],[1,[27,\"input\",null,[[\"type\",\"name\",\"checked\"],[\"checkbox\",\"import\",[22,1,[\"import\"]]]]],false],[10],[0,\"\\n                  \"],[7,\"td\"],[11,\"class\",\"text-nowrap\"],[9],[0,\"\\n                    \"],[1,[27,\"input\",null,[[\"type\",\"value\",\"class\"],[\"text\",[22,1,[\"importName\"]],\"form-control\"]]],false],[0,\"\\n                    (\"],[1,[22,2,[]],false],[0,\")\\n                  \"],[10],[0,\"\\n                  \"],[7,\"td\"],[9],[0,\"\\n                    \"],[1,[27,\"input/md-codelist\",null,[[\"create\",\"required\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"showValidations\",\"mdCodeName\",\"path\",\"model\",\"placeholder\",\"class\"],[true,false,true,false,false,true,false,\"dataType\",\"importType\",[22,1,[]],\"Choose a data type\",\"inline-block\"]]],false],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"td\"],[9],[0,\"\\n                    \"],[1,[27,\"input\",null,[[\"type\",\"name\",\"checked\"],[\"checkbox\",\"hasDomain\",[22,1,[\"hasDomain\"]]]]],false],[0,\"\\n                    \"],[7,\"span\"],[12,\"class\",[27,\"if\",[[22,1,[\"domainWarn\"]],\"text-danger\"],null]],[9],[0,\"(\"],[1,[22,1,[\"domain\",\"length\"]],false],[0,\")\"],[10],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"td\"],[9],[0,\"\\n                    \"],[1,[27,\"input\",null,[[\"type\",\"name\",\"checked\"],[\"checkbox\",\"allowNull\",[22,1,[\"allowNull\"]]]]],false],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"td\"],[11,\"class\",\"text-nowrap\"],[9],[0,\"\\n                    \"],[1,[27,\"input\",null,[[\"type\",\"name\",\"checked\",\"disabled\"],[\"checkbox\",\"range\",[22,1,[\"range\"]],[22,1,[\"disableRange\"]]]]],false],[0,\"\\n\"],[4,\"if\",[[22,1,[\"isNumber\"]]],null,{\"statements\":[[0,\"                      (\"],[1,[27,\"round\",[[22,1,[\"min\"]]],[[\"decimals\"],[2]]],false],[0,\"/\"],[1,[27,\"round\",[[22,1,[\"max\"]]],[[\"decimals\"],[2]]],false],[0,\")\\n\"]],\"parameters\":[]},null],[0,\"                  \"],[10],[0,\"\\n                  \"],[7,\"td\"],[11,\"class\",\"text-nowrap\"],[9],[0,\"\\n                    \"],[7,\"div\"],[11,\"class\",\"pull-right\"],[9],[0,\"\\n                      \"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-info\"],[11,\"type\",\"button\"],[9],[0,\"\\n                        \"],[7,\"span\"],[11,\"class\",\"fa fa-eye\"],[9],[10],[0,\" Example\\n\\n\"],[4,\"ember-popover\",null,[[\"showOn\",\"hideOn\",\"side\"],[\"mouseenter\",\"mouseleave\",\"left\"]],{\"statements\":[[4,\"each\",[[22,1,[\"example\"]]],null,{\"statements\":[[4,\"if\",[[27,\"present\",[[22,3,[]]],null]],null,{\"statements\":[[0,\"                              \"],[1,[22,3,[]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                              \"],[7,\"i\"],[11,\"class\",\"text-warning\"],[9],[0,\"NULL\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[7,\"hr\"],[9],[10],[0,\"\\n\"]],\"parameters\":[3]},null]],\"parameters\":[]},null],[0,\"                      \"],[10],[0,\"\\n                    \"],[10],[0,\"\\n                  \"],[10],[0,\"\\n                \"],[10],[0,\"\\n\"]],\"parameters\":[1,2]},null],[0,\"            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,[\"processed\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-importcsv\"],[[\"doImport\",\"cancelImport\",\"actionContext\"],[[27,\"route-action\",[\"doImport\"],null],[27,\"route-action\",[\"cancelImport\"],null],[22,0,[]]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/import/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.dataDictionary');

      Ember.run.once(this, () => {

        Ember.set(model, 'entity', Ember.getWithDefault(model, 'entity', []));
      });
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('dictionary.show.edit.index'));
    },

    actions: {
      editEntity(id) {
        this.transitionTo('dictionary.show.edit.entity.edit', id);
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/entity/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3GZR0J/X", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Entities\\n  \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for \"],[7,\"em\"],[9],[1,[23,[\"model\",\"title\"]],false],[10],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"items\",\"header\",\"shadow\",\"buttonText\",\"ellipsis\",\"attributes\",\"editItem\",\"verticalButtons\",\"profilePath\",\"hideIndex\",\"condensed\"],[[23,[\"model\",\"json\",\"dataDictionary\",\"entity\"]],\"Entity\",true,\"Add Entity\",true,\"entityId,codeName,definition\",[27,\"route-action\",[\"editEntity\"],null],true,\"dictionary.entity\",false,false]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"btnType\",\"route\"],[\"Import CSV\",\"sign-in\",\"success\",\"dictionary.show.edit.entity.import\"]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra1\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Overview\",\"home\",\"dictionary.show.index\"]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/entity/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/dictionary/show/edit/entity/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "e7rICuLD", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/entity/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.dataDictionary');
      Ember.set(model, 'citation', Ember.getWithDefault(model, 'citation', {}));
      Ember.set(model, 'responsibleParty', Ember.getWithDefault(model, 'responsibleParty', {}));
      Ember.set(model, 'subject', Ember.getWithDefault(model, 'subject', []));
      Ember.set(model, 'recommendedUse', Ember.getWithDefault(model, 'recommendedUse', []));
      Ember.set(model, 'locale', Ember.getWithDefault(model, 'locale', []));
      Ember.set(model, 'domain', Ember.getWithDefault(model, 'domain', []));
      Ember.set(model, 'entity', Ember.getWithDefault(model, 'entity', []));
    },
    actions: {
      editCitation(scrollTo) {
        this.transitionTo('dictionary.show.edit.citation').then(function () {
          this.setScrollTo(scrollTo);
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "5ZthYU+8", "block": "{\"symbols\":[\"resource\",\"val\"],\"statements\":[[4,\"with\",[[23,[\"model\",\"json\",\"dataDictionary\"]]],null,{\"statements\":[[0,\"  \"],[7,\"form\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n      Editing \"],[7,\"em\"],[9],[1,[23,[\"model\",\"title\"]],false],[10],[0,\"\\n      \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"required\"],[\"Basic Information\",true,false,\"dictionary.main.basicInformation\",\"Basic Information\",true]],{\"statements\":[[0,\"      \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"required\",\"profilePath\",\"data-spy\",\"class\"],[[23,[\"model\",\"title\"]],\"Enter the title for the dictionary.\",\"Title\",true,\"dictionary.main.title\",\"Title\",\"md-embedded\"]]],false],[0,\"\\n\\n\"],[4,\"if\",[[27,\"is-array\",[[22,1,[\"subject\"]]],null]],null,{\"statements\":[[0,\"        \"],[1,[27,\"input/md-codelist-multi\",null,[[\"create\",\"label\",\"tooltip\",\"icon\",\"disabled\",\"allowClear\",\"mdCodeName\",\"showValidations\",\"model\",\"path\",\"placeholder\",\"profilePath\",\"data-spy\",\"class\"],[true,\"Subject\",true,true,[23,[\"disabled\"]],true,\"scope\",true,[23,[\"model\"]],\"json.dataDictionary.subject\",\"Choose type(s) of resource\",\"dictionary.main.subject\",\"Subject\",\"md-embedded\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"class\",\"required\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"shadow\"],[\"Responsible Party\",\"md-embedded\",true,false,false,\"dictionary.main.responsibleParty\",\"Responsible Party\",false]],{\"statements\":[[0,\"        \"],[1,[27,\"object/md-party\",null,[[\"model\"],[[22,1,[\"responsibleParty\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n      \"],[1,[27,\"input/md-markdown-area\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\",\"data-spy\",\"class\"],[[22,1,[\"description\"]],\"dictionary.main.description\",\"Description\",\"Enter text describing the dictionary.\",\"Description\",\"md-embedded\"]]],false],[0,\"\\n\\n      \"],[1,[27,\"input/md-boolean\",null,[[\"label\",\"text\",\"value\",\"profilePath\"],[\"Dictionary Included?\",\"Dictionary is included with the resource\",[22,1,[\"dictionaryIncludedWithResource\"]],\"dictionary.main.included\"]]],false],[0,\"\\n\\n      \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"required\",\"profilePath\"],[[22,1,[\"dictionaryFunctionalLanguage\"]],\"Describe the language used in the dictionary, e.g. UML.\",\"Functional Language\",false,\"dictionary.main.functionalLanguage\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"object/md-simple-array-table\",null,[[\"title\",\"required\",\"plain\",\"profilePath\",\"value\"],[\"Recommended Use\",false,false,\"dictionary.main.recommendedUse\",[22,1,[\"recommendedUse\"]]]],{\"statements\":[[0,\"      \"],[7,\"td\"],[9],[0,\"\\n          \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"value\"]],\"Enter a description of how the dictionary should be used.\"]]],false],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n    \"],[1,[27,\"object/md-locale-array\",null,[[\"title\",\"data-spy\",\"collapsible\",\"collapsed\",\"required\",\"value\",\"profilePath\"],[\"Locale\",\"Locales\",true,false,false,[22,1,[\"locale\"]],\"dictionary.main.locale\"]]],false],[0,\"\\n\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Overview\",\"home\",\"dictionary.show.index\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-dict-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/edit/route', ['exports', 'mdeditor/mixins/hash-poll'], function (exports, _hashPoll) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_hashPoll.default, {
    /**
     * The profile service
     *
     * @return {Ember.Service} profile
     */
    profile: Ember.inject.service('custom-profile'),

    /**
     * The route activate hook, sets the profile.
     */
    afterModel(model) {
      this._super(...arguments);

      this.profile.set('active', model.get('profile'));
    },

    actions: {
      /**
       * Update the dictionary profile
       *
       * @name   updateProfile
       * @param  {String} profile The new profile.
       */
      // updateProfile(profile) {
      //   this.profile
      //     .set('active', profile);
      //   this.modelFor('dictionary.show.edit')
      //     .save();
      // },
      saveDictionary: function saveDictionary() {
        let model = this.currentRouteModel();

        model.save().then(() => {
          //this.refresh();
          //this.setModelHash();
          this.flashMessages.success(`Saved Dictionary: ${model.get('title')}`);

          //this.transitionTo('contacts');
        });
      },
      cancelDictionary: function cancelDictionary() {
        let model = this.currentRouteModel();
        let message = `Cancelled changes to Dictionary: ${model.get('title')}`;
        let controller = this.controller;
        let same = !controller.cancelScope || Ember.getOwner(this).lookup('controller:application').currentPath === Ember.get(controller, 'cancelScope.routeName');

        if (this.get('settings.data.autoSave')) {
          let json = model.get('jsonRevert');

          if (json) {
            model.set('json', JSON.parse(json));

            if (controller.onCancel) {
              Ember.run.once(() => {
                if (same) {
                  controller.onCancel.call(controller.cancelScope || this);
                }
                this.refresh();
                controller.set('onCancel', null);
                controller.set('cancelScope', null);
              });
            }

            this.flashMessages.warning(message);
          }

          return;
        }

        model.reload().then(() => {
          if (controller.onCancel) {
            Ember.run.once(() => {
              if (same) {
                controller.onCancel.call(controller.cancelScope || this);
              }
              this.refresh();
              controller.set('onCancel', null);
              controller.set('cancelScope', null);
            });
          }
          this.flashMessages.warning(message);
        });
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/edit/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "UTOV/nMH", "block": "{\"symbols\":[\"spy\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row md-section-secondary\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"md-record-content col-sm-10\"],[9],[0,\"\\n    \"],[1,[21,\"liquid-outlet\"],false],[0,\"\\n\"],[0,\"  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-2\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar hidden-print\"],[9],[0,\"\\n      \"],[1,[27,\"control/md-crud-buttons\",null,[[\"model\",\"doSave\",\"doCancel\",\"doDelete\",\"doCopy\"],[[23,[\"model\"]],[27,\"route-action\",[\"saveDictionary\"],null],[27,\"route-action\",[\"cancelDictionary\"],null],[27,\"route-action\",[\"destroyDictionary\"],null],[27,\"route-action\",[\"copyDictionary\"],null]]]],false],[0,\"\\n      \"],[1,[27,\"component\",[[23,[\"subbar\"]]],[[\"context\"],[[27,\"route-action\",[\"getContext\"],null]]]],false],[0,\"\\n      \"],[7,\"hr\"],[9],[10],[0,\"\\n      \"],[1,[27,\"from-elsewhere\",null,[[\"name\"],[\"md-subbar-extra\"]]],false],[0,\"\\n      \"],[1,[27,\"from-elsewhere\",null,[[\"name\"],[\"md-subbar-extra1\"]]],false],[0,\"\\n\\n\"],[4,\"from-elsewhere\",null,[[\"name\"],[\"md-scroll-spy-dict-edit\"]],{\"statements\":[[0,\"          \"],[1,[27,\"component\",[[22,1,[]]],[[\"offset\"],[145]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"dictionary-nav\",[27,\"component\",[\"input/md-select-profile\"],[[\"value\",\"record\"],[[23,[\"model\",\"profile\"]],[23,[\"model\"]]]]]]]],false],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"model\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"nav-secondary\",[27,\"component\",[\"layout/md-nav-secondary\"],[[\"model\"],[[23,[\"model\"]]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/edit/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    actions: {
      linkTo() {
        this.transitionTo(...arguments);
      },
      editDomain(id) {
        this.transitionTo('dictionary.show.edit.domain.edit', id);
      },
      editCitation(scrollTo) {
        this.transitionTo('dictionary.show.edit.citation').then(function () {
          this.setScrollTo(scrollTo);
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/NXUKzmp", "block": "{\"symbols\":[\"dictionary\",\"entity\",\"index\",\"domain\",\"index\",\"party\",\"contact\",\"index\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row md-no-spotlight\"],[9],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"json\",\"dataDictionary\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"col-sm-9 col-md-offset-1\"],[9],[0,\"\\n    \"],[7,\"h3\"],[9],[0,\"\\n      \"],[1,[27,\"fa-icon\",[\"book\"],[[\"class\"],[\"text-muted\"]]],false],[0,\"\\n\\n      Viewing Dictionary: \"],[1,[23,[\"model\",\"title\"]],false],[0,\"\\n      \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n    \"],[10],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"bodyIsRow\",\"collapsible\",\"btnText\",\"btnClass\",\"btnAction\",\"btnIcon\",\"data-spy\"],[false,true,\"Main\",false,true,\"Edit\",\"success\",[27,\"route-action\",[\"linkTo\",\"dictionary.show.edit\"],null],\"pencil\",\"Main\"]],{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-xxl-6\"],[9],[0,\"\\n            \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Dictionary Id\",[23,[\"model\",\"json\",\"dictionaryId\"]]]]],false],[0,\"\\n            \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Dictionary Title\",[23,[\"model\",\"title\"]]]]],false],[0,\"\\n            \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Subject\",[27,\"if\",[[22,1,[\"subject\"]],[27,\"join\",[\", \",[22,1,[\"subject\"]]],null]],null]]]],false],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-xxl-6\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Responsible Party\"]],{\"statements\":[[4,\"with\",[[22,1,[\"responsibleParty\"]]],null,{\"statements\":[[0,\"                  \"],[1,[27,\"html-safe\",[[27,\"if\",[[22,6,[\"role\"]],[22,6,[\"role\"]],\"<em>No Roles assigned.</em>\"],null]],null],false],[0,\"\\n                  (\\n\"],[4,\"each\",[[22,6,[\"party\"]]],null,{\"statements\":[[0,\"                      \"],[1,[27,\"if\",[[22,8,[]],\", \"],null],false],[0,\" \"],[1,[27,\"control/md-contact-link\",null,[[\"contactId\"],[[22,7,[\"contactId\"]]]]],false],[0,\"\\n\"]],\"parameters\":[7,8]},{\"statements\":[[0,\"                      \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No Contacts assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                  )\\n                  \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[6]},{\"statements\":[[0,\"                  \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No responsibility assigned.\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-xs-12\"],[9],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"plain\"],[false,true,true]],{\"statements\":[[0,\"            \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"text-info col-xs-6 col-sm-3\"],[9],[0,\"Locale\"],[10],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"col-xs-6 col-sm-3\"],[9],[0,\"\\n                \"],[7,\"label\"],[11,\"class\",\"text-nowrap\"],[9],[0,\"Character Set:\"],[10],[0,\"\\n                \"],[7,\"span\"],[11,\"class\",\"text-nowrap\"],[9],[1,[27,\"get-property\",[[22,1,[\"locale\"]],\"characterSet\"],null],false],[10],[0,\"\\n              \"],[10],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"col-xs-6 col-sm-3\"],[9],[0,\"\\n                \"],[7,\"label\"],[9],[0,\"Country:\"],[10],[0,\"\\n                \"],[7,\"span\"],[11,\"class\",\"text-nowrap\"],[9],[1,[27,\"get-property\",[[22,1,[\"locale\"]],\"country\"],null],false],[10],[0,\"\\n              \"],[10],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"col-xs-6 col-sm-3\"],[9],[0,\"\\n                \"],[7,\"label\"],[9],[0,\"Language:\"],[10],[0,\"\\n                \"],[7,\"span\"],[9],[1,[27,\"get-property\",[[22,1,[\"locale\"]],\"language\"],null],false],[10],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"collapsible\",\"scroll\",\"maximizable\",\"class\"],[false,true,\"Description\",true,true,true,\"md-embedded\"]],{\"statements\":[[0,\"          \"],[1,[27,\"md-markdown\",[[22,1,[\"description\"]],\"Description not provided!\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[1,[27,\"object/md-citation/preview\",null,[[\"profilePath\",\"citation\",\"muted\",\"editCitation\",\"data-spy\"],[\"dictionary.main.citation\",[22,1,[\"citation\"]],true,[27,\"route-action\",[\"editCitation\"],null],\"Citation\"]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"bodyIsRow\",\"collapsible\",\"btnText\",\"btnClass\",\"btnAction\",\"btnIcon\",\"data-spy\"],[false,true,\"Domains\",false,true,\"Edit\",\"success\",[27,\"route-action\",[\"linkTo\",\"dictionary.show.edit.domain\"],null],\"pencil\",\"Domains\"]],{\"statements\":[[4,\"if\",[[22,1,[\"domain\"]]],null,{\"statements\":[[0,\"      \"],[7,\"table\"],[11,\"class\",\"table table-striped\"],[9],[0,\"\\n        \"],[7,\"thead\"],[9],[0,\"\\n          \"],[7,\"tr\"],[9],[0,\"\\n            \"],[7,\"th\"],[9],[0,\"#\"],[10],[0,\"\\n\"],[0,\"            \"],[7,\"th\"],[9],[0,\"Name\"],[10],[0,\"\\n            \"],[7,\"th\"],[9],[0,\"Description\"],[10],[0,\"\\n            \"],[7,\"th\"],[9],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[22,1,[\"domain\"]]],null,{\"statements\":[[0,\"            \"],[7,\"tr\"],[9],[0,\"\\n              \"],[7,\"th\"],[11,\"scope\",\"row\"],[9],[1,[22,5,[]],false],[10],[0,\"\\n\"],[0,\"              \"],[7,\"td\"],[9],[1,[27,\"get-property\",[[22,4,[]],\"codeName\"],null],false],[10],[0,\"\\n              \"],[7,\"td\"],[9],[4,\"if\",[[22,4,[\"description\"]]],null,{\"statements\":[[0,\" \"],[1,[27,\"word-limit\",[[22,4,[\"description\"]]],null],false],[0,\" \"]],\"parameters\":[]},{\"statements\":[[0,\" \"],[7,\"em\"],[9],[0,\"Not Described\"],[10]],\"parameters\":[]}],[10],[0,\"\\n              \"],[7,\"td\"],[9],[4,\"link-to\",[\"dictionary.show.edit.domain.edit\",[22,5,[]]],[[\"class\"],[\"btn btn-xs btn-success\"]],{\"statements\":[[0,\"Edit\"]],\"parameters\":[]},null],[10],[0,\"\\n\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[4,5]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n        \"],[7,\"h3\"],[9],[0,\"No Domains found.\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"bodyIsRow\",\"collapsible\",\"btnText\",\"btnClass\",\"btnAction\",\"btnIcon\",\"data-spy\"],[false,true,\"Entities\",false,true,\"Edit\",\"success\",[27,\"route-action\",[\"linkTo\",\"dictionary.show.edit.entity\"],null],\"pencil\",\"Entities\"]],{\"statements\":[[4,\"if\",[[22,1,[\"entity\"]]],null,{\"statements\":[[0,\"      \"],[7,\"table\"],[11,\"class\",\"table table-striped\"],[9],[0,\"\\n        \"],[7,\"thead\"],[9],[0,\"\\n          \"],[7,\"tr\"],[9],[0,\"\\n            \"],[7,\"th\"],[9],[0,\"#\"],[10],[0,\"\\n\"],[0,\"            \"],[7,\"th\"],[9],[0,\"Name\"],[10],[0,\"\\n            \"],[7,\"th\"],[9],[0,\"Description\"],[10],[0,\"\\n            \"],[7,\"th\"],[9],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"tbody\"],[9],[0,\"\\n\"],[4,\"each\",[[22,1,[\"entity\"]]],null,{\"statements\":[[0,\"            \"],[7,\"tr\"],[9],[0,\"\\n              \"],[7,\"th\"],[11,\"scope\",\"row\"],[9],[1,[22,3,[]],false],[10],[0,\"\\n\"],[0,\"              \"],[7,\"td\"],[9],[1,[27,\"get-property\",[[22,2,[]],\"codeName\"],null],false],[10],[0,\"\\n              \"],[7,\"td\"],[9],[4,\"if\",[[22,2,[\"description\"]]],null,{\"statements\":[[0,\" \"],[1,[27,\"word-limit\",[[22,2,[\"description\"]]],null],false],[0,\" \"]],\"parameters\":[]},{\"statements\":[[0,\" \"],[7,\"em\"],[9],[0,\"Not Described\"],[10]],\"parameters\":[]}],[10],[0,\"\\n              \"],[7,\"td\"],[9],[4,\"link-to\",[\"dictionary.show.edit.entity.edit\",[22,3,[]]],[[\"class\"],[\"btn btn-xs btn-success\"]],{\"statements\":[[0,\"Edit\"]],\"parameters\":[]},null],[10],[0,\"\\n\\n            \"],[10],[0,\"\\n\\n\"]],\"parameters\":[2,3]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n        \"],[7,\"h3\"],[9],[0,\"No Entities found.\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-2\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar\"],[9],[0,\"\\n\"],[4,\"control/md-crud-buttons\",null,[[\"model\",\"doDelete\",\"doCopy\"],[[23,[\"model\"]],[27,\"route-action\",[\"destroyDictionary\"],null],[27,\"route-action\",[\"copyDictionary\"],null]]],{\"statements\":[[4,\"link-to\",[\"dictionary.show.edit\",[23,[\"model\",\"id\"]]],[[\"class\"],[\"btn btn-lg btn-success\"]],{\"statements\":[[0,\"          \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[7,\"hr\"],[9],[10],[0,\"\\n\"],[4,\"link-to\",[\"dictionaries\"],[[\"class\"],[\"btn btn-lg btn-primary btn-block\"]],{\"statements\":[[0,\"        \"],[1,[27,\"fa-icon\",[\"list\"],null],false],[0,\" Show List\"]],\"parameters\":[]},null],[0,\"\\n      \"],[1,[27,\"control/md-scroll-spy\",null,[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]],false],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/index/template.hbs" } });
});
;define('mdeditor/pods/dictionary/show/route', ['exports', 'ember-copy'], function (exports, _emberCopy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    flashMessages: Ember.inject.service(),

    model: function model(params) {
      let rec = this.store.peekRecord('dictionary', params.dictionary_id);
      return rec;
    },

    afterModel(model) {
      const name = model.get('title');

      const crumb = {
        title: name
      };

      this.set('breadCrumb', crumb);
    },

    actions: {
      destroyDictionary: function destroyDictionary() {
        let model = this.currentRouteModel();
        model.destroyRecord().then(() => {
          this.flashMessages.success(`Deleted Dictionary: ${model.get('title')}`);
          this.replaceWith('dictionaries');
        });
      },

      copyDictionary: function copyDictionary() {

        this.flashMessages.success(`Copied Dictionary: ${this.currentRouteModel().get('title')}`);
        this.transitionTo('dictionary.new.id', (0, _emberCopy.copy)(this.currentRouteModel()));
      }
    }
  });
});
;define("mdeditor/pods/dictionary/show/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "QTra09D9", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"nav-main\",[27,\"component\",[\"layout/nav/dictionary/nav-main\"],[[\"model\"],[[23,[\"model\"]]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/show/template.hbs" } });
});
;define("mdeditor/pods/dictionary/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "TJUl6KSF", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/dictionary/template.hbs" } });
});
;define('mdeditor/pods/error/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/error/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "CdFG+z0P", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"alert alert-danger page-header text-center\"],[9],[0,\"\\n  \"],[7,\"h1\"],[9],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\" Application Error\"],[10],[0,\"\\n  \"],[7,\"p\"],[9],[0,\"\\n    The application has encountered an error, or a record that no longer exists.\\n  \"],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"lastError\"]]],null,{\"statements\":[[0,\"    \"],[7,\"p\"],[9],[0,\"\\n      Message:\\n      \"],[7,\"a\"],[11,\"data-toggle\",\"collapse\"],[11,\"href\",\".error-stack\"],[11,\"aria-expanded\",\"false\"],[9],[0,\"\\n        \"],[1,[23,[\"lastError\",\"message\"]],false],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"error-stack collapse\"],[9],[0,\"\\n      \"],[7,\"pre\"],[11,\"class\",\"inline-block text-left\"],[9],[0,\"        TRACE:\\n        \"],[1,[23,[\"lastError\",\"stack\"]],false],[0,\"      \"],[10],[0,\"    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/error/template.hbs" } });
});
;define('mdeditor/pods/export/route', ['exports', 'moment', 'mdeditor/mixins/scroll-to', 'ember-inflector'], function (exports, _moment, _scrollTo, _emberInflector) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const modelTypes = ['records', 'contacts', 'dictionaries', 'settings', 'schemas', 'custom-profiles', 'profiles'];

  exports.default = Ember.Route.extend(_scrollTo.default, {
    mdjson: Ember.inject.service(),
    settings: Ember.inject.service(),
    model() {
      //const store = this.get('store');

      return Ember.Object.create({
        records: this.modelFor('application'),
        settings: this.get('settings.data')
      });
    },
    setupController(controller, model) {
      // Call _super for default behavior
      this._super(controller, model);
      // Implement your custom setup after
      Ember.defineProperty(this.controller, 'hasSelected', Ember.computed('model.{records.0.@each._selected,records.1.@each._selected,records.2.@each._selected,settings._selected}', function () {
        return this.store.peekAll('record').filterBy('_selected').get('length') + this.store.peekAll('contact').filterBy('_selected').get('length') + this.store.peekAll('dictionary').filterBy('_selected').get('length') + this.store.peekAll('setting').filterBy('_selected').get('length') > 0;
      }));
      Ember.defineProperty(this.controller, 'hasSelectedRecords', Ember.computed('model.records.0.@each._selected', function () {
        return this.store.peekAll('record').filterBy('_selected').get('length') > 0;
      }));
    },

    columns: Ember.Object.create({
      record: [{
        propertyName: 'title',
        title: 'Title'
      }, {
        propertyName: 'defaultType',
        title: 'Type'
      }, {
        propertyName: 'recordId',
        title: 'ID'
      }],
      contact: [{
        propertyName: 'title',
        title: 'Title'
      }, {
        propertyName: 'defaultOrganization',
        title: 'Organization'
      }, {
        propertyName: 'json.electronicMailAddress.firstObject',
        title: 'E-mail'
      }, {
        propertyName: 'contactId',
        title: 'ID'
      }],
      dictionary: [{
        propertyName: 'title',
        title: 'Title'
      }, {
        propertyName: 'defaultType',
        title: 'Type'
      }, {
        propertyName: 'dictionaryId',
        title: 'ID'
      }]
    }),
    actions: {
      exportData() {
        this.store.exportData(modelTypes, {
          download: true,
          filename: `mdeditor-${(0, _moment.default)().format('YYYYMMDD-HHMMSS')}.json`
        });
      },
      exportSelectedData(asMdjson) {
        let store = this.store;

        if (asMdjson) {
          let records = store.peekAll('record').filterBy('_selected').map(itm => {
            return Ember.get(this, 'mdjson').formatRecord(itm);
          });

          window.saveAs(new Blob([JSON.stringify(records)], {
            type: 'application/json;charset=utf-8'
          }), `mdjson-${(0, _moment.default)().format('YYYYMMDD-HHMMSS')}.json`);
        } else {
          let filterIds = {};

          modelTypes.forEach(type => {
            let t = (0, _emberInflector.singularize)(type);

            filterIds[t] = store.peekAll(t).filterBy('_selected').mapBy('id');
          });

          //export schemas with settings
          if (filterIds.setting.length) {
            filterIds['schema'] = store.peekAll('schema').mapBy('id');
            filterIds['profile'] = store.peekAll('profile').mapBy('id');
            filterIds['custom-profile'] = store.peekAll('custom-profile').mapBy('id');
          }

          store.exportSelectedData(modelTypes, {
            download: true,
            filename: `mdeditor-${(0, _moment.default)().format('YYYYMMDD-HHMMSS')}.json`,
            filterIds: filterIds
          });
        }
      },
      getColumns(type) {
        return Ember.get(this, 'columns').get(type);
      },
      hasSelected() {
        return Ember.get(this, 'hasSelected');
      }
    }
  });
});
;define("mdeditor/pods/export/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ulxFiuP+", "block": "{\"symbols\":[\"section\",\"index\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-10\"],[9],[0,\"\\n    \"],[7,\"h3\"],[11,\"class\",\"text-info\"],[9],[0,\"Export Data\"],[10],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"records\"]]],null,{\"statements\":[[4,\"if\",[[22,1,[\"length\"]]],null,{\"statements\":[[4,\"if\",[[22,2,[]]],null,{\"statements\":[[0,\"        \"],[7,\"hr\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"titleIcon\",\"collapsible\",\"collapsed\",\"data-spy\",\"shadow\"],[[22,1,[\"meta\",\"title\"]],[22,1,[\"meta\",\"icon\"]],true,false,[22,1,[\"meta\",\"title\"]],true]],{\"statements\":[[0,\"      \"],[1,[27,\"control/md-record-table\",null,[[\"data\",\"dataColumns\"],[[22,1,[]],[27,\"compute\",[[27,\"route-action\",[\"getColumns\"],null],[22,1,[\"meta\",\"type\"]]],null]]]],false],[0,\"\\n\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"     \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n       \"],[7,\"h3\"],[9],[1,[27,\"fa-icon\",[[22,1,[\"meta\",\"icon\"]]],null],false],[0,\" No \"],[7,\"em\"],[9],[1,[22,1,[\"meta\",\"title\"]],false],[10],[0,\" found.\"],[10],[0,\"\\n     \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[1,2]},null],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-2\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"btn-group-vertical center-block\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"Export Button Controls\"],[9],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-primary md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"exportData\"]],[9],[0,\"\\n          \"],[1,[27,\"fa-icon\",[\"sign-out\"],null],false],[0,\" Export All\"],[10],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-info md-btn-responsive\"],[12,\"disabled\",[27,\"if\",[[23,[\"hasSelected\"]],false,true],null]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"exportSelectedData\"]],[9],[0,\"\\n          \"],[1,[27,\"fa-icon\",[\"check-square-o\"],null],false],[0,\" Export Selected\"],[10],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-success md-btn-responsive\"],[12,\"disabled\",[27,\"if\",[[23,[\"hasSelectedRecords\"]],false,true],null]],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"exportSelectedData\",true]],[9],[0,\"\\n          \"],[1,[27,\"fa-icon\",[\"check-square-o\"],null],false],[0,\" Export mdJSON\"],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"hr\"],[9],[10],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"center-block text-center\"],[9],[0,\"Include Settings?\"],[10],[0,\"\\n      \"],[1,[27,\"x-toggle\",null,[[\"value\",\"onToggle\",\"showLabels\",\"onLabel\",\"offLabel\",\"size\",\"theme\"],[[23,[\"model\",\"settings\",\"_selected\"]],[27,\"action\",[[22,0,[]],[27,\"mut\",[[23,[\"model\",\"settings\",\"_selected\"]]],null]],null],true,\"Yes\",\"No\",\"medium\",\"form\"]]],false],[0,\"\\n      \"],[7,\"hr\"],[9],[10],[0,\"\\n      \"],[1,[27,\"control/md-scroll-spy\",null,[[\"offset\",\"scrollInit\",\"setScrollTo\"],[130,[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]],false],[0,\"\\n\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\\n\"],[10],[0,\"\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/export/template.hbs" } });
});
;define('mdeditor/pods/help/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/help/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XCDlW9Vh", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/help/template.hbs" } });
});
;define('mdeditor/pods/import/route', ['exports', 'ember-local-storage/adapters/base', 'uuid/v4', 'mdeditor/mixins/scroll-to', 'mdeditor/models/contact'], function (exports, _base, _v, _scrollTo, _contact) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const generateIdForRecord = _base.default.create().generateIdForRecord;

  exports.default = Ember.Route.extend(_scrollTo.default, {
    flashMessages: Ember.inject.service(),
    jsonvalidator: Ember.inject.service(),
    settings: Ember.inject.service(),
    ajax: Ember.inject.service(),

    init() {
      this._super(...arguments);

      this.icons = {
        records: 'file',
        dictionaries: 'book',
        contacts: 'users',
        settings: 'gear'
      };
    },
    setupController(controller, model) {
      // Call _super for default behavior
      this._super(controller, model);
      // Implement your custom setup after
      controller.set('importUri', this.get('settings.data.importUriBase'));
      controller.set('apiURL', this.apiURL);
    },

    model() {
      return Ember.Object.create({
        files: false,
        merge: true
      });
    },

    apiURL: Ember.computed.or('settings.data.mdTranslatorAPI', 'defaultAPI'),

    getTitle(record) {
      let raw = record.attributes.json;
      let json = raw ? JSON.parse(raw) : null;

      switch (record.type) {
        case 'records':
          return Ember.getWithDefault(json, 'metadata.resourceInfo.citation.title', 'NO TITLE');
        case 'dictionaries':
          return Ember.getWithDefault(json, 'dataDictionary.citation.title', 'NO TITLE');
        case 'contacts':
          return json.name || 'NO NAME';
        case 'schemas':
          return record.attributes.title || 'NO TITLE';
        default:
          return 'N/A';
      }
    },

    formatMdJSON(json) {
      let contact = json.contact,
          dataDictionary = json.dataDictionary;

      let data = Ember.A();
      let template = Ember.Object.extend({
        init() {
          this._super(...arguments);

          Ember.set(this, 'id', generateIdForRecord());
        },
        attributes: Ember.computed(function () {
          return {
            json: null //,
            //date-updated: '2017-05-18T21:21:34.446Z'
          };
        }),
        type: null
      });

      if (contact) {
        contact.forEach(item => {
          data.pushObject(template.create({
            attributes: {
              json: JSON.stringify(Ember.assign(_contact.JsonDefault.create(), item))
            },
            type: 'contacts'
          }));
        });
      }

      if (Ember.get(json, 'metadata.metadataInfo.metadataIdentifier') === undefined) {
        json.metadata.metadataInfo.metadataIdentifier = {
          identifier: (0, _v.default)(),
          namespace: 'urn:uuid'
        };
      }

      data.pushObject(template.create({
        attributes: {
          json: JSON.stringify(json)
          //profile: 'full'
        },
        type: 'records'
      }));

      if (dataDictionary) {
        dataDictionary.forEach(item => {
          data.pushObject(template.create({
            attributes: {
              json: JSON.stringify({
                dataDictionary: item
              })
            },
            type: 'dictionaries'
          }));
        });
      }

      return data;
    },

    mapJSON(data) {
      let json = data.json,
          route = data.route;

      let files;

      if (Ember.isArray(data.json.data)) {
        files = this.mapEditorJSON(data);
      } else {
        //assume it's raw mdJSON for now
        files = this.mapMdJSON(data);
      }

      route.currentRouteModel().set('files', files);

      route.currentRouteModel().set('data', json.data);
    },

    mapMdJSON(data) {
      let map = Ember.A();

      if (Ember.isArray(data.json)) {
        data.json.forEach(item => {
          map = map.concat(this.formatMdJSON(item));
        });
      } else {
        map = map.concat(this.formatMdJSON(data.json));
      }

      Ember.set(data, 'json.data', map);

      return this.mapRecords(map);
    },

    mapRecords(records) {
      return records.reduce((map, item) => {

        if (!map[item.type]) {
          map[item.type] = [];
        }

        item.meta = {};
        item.meta.title = this.getTitle(item);
        item.meta.icon = this.icons[item.type];
        item.meta.export = true;

        map[item.type].push(Ember.Object.create(item));
        return map;
      }, {});
    },

    mapEditorJSON(data) {
      let file = data.file,
          json = data.json;

      let jv = Ember.get(this, 'jsonvalidator.validator');
      let valid = jv.validate('jsonapi', json);

      if (!valid) {
        throw new Error(`${file.name} is not a valid mdEditor file.`);
      }

      return this.mapRecords(json.data);
    },

    columns: Ember.computed(function () {
      let route = this;

      return [{
        propertyName: 'meta.title',
        title: 'Title'
      }, {
        propertyName: 'attributes.date-updated',
        title: 'Last Updated'
      }, {
        propertyName: 'id',
        title: 'ID'
      }, {
        title: 'Actions',
        component: 'control/md-record-table/buttons/custom',
        disableFiltering: true,
        buttonConfig: {
          title: 'Preview JSON',
          action(model) {
            route.showPreview.call(route, model);
          },
          iconPath: 'meta.icon'
        }
      }];
    }),

    showPreview(model) {
      let json = {};
      Ember.assign(json, model.attributes);

      if (model.attributes.json) {
        json.json = JSON.parse(model.attributes.json);
      }

      this.currentRouteModel().set('preview', {
        model: model,
        json: json
      });
    },

    actions: {
      getColumns() {
        return Ember.get(this, 'columns');
      },
      getIcon(type) {
        return this.icons[type];
      },
      readData(file) {
        let json;
        let url = this.apiURL;
        let controller = this.controller;
        let cmp = this;

        new Ember.RSVP.Promise((resolve, reject) => {
          if (file.type.match(/.*\/xml$/)) {
            Ember.set(controller, 'isTranslating', true);
            Ember.get(this, 'flashMessages').info(`Translation service provided by ${url}.`);

            this.ajax.request(url, {
              type: 'POST',
              data: {
                //file: JSON.stringify(cleaner.clean(json)),
                file: file.data,
                reader: 'fgdc',
                writer: 'mdJson',
                validate: 'normal',
                format: 'json'
              },
              context: cmp
            }).then(function (response) {
              Ember.set(controller, 'isTranslating', false);

              if (response.success) {
                resolve({
                  json: JSON.parse(response.writerOutput),
                  file: file,
                  route: cmp
                });

                return;
              }

              reject(`Failed to translate file: ${file.name}. Is it valid FGDC CSDGM XML?`);
            }, response => {
              Ember.set(controller, 'isTranslating', false);

              reject(`mdTranslator Server error: ${response.status}: ${response.statusText}. Is your file valid FGDC CSDGM XML?`);
            });
          } else {

            try {
              json = JSON.parse(file.data);
            } catch (e) {
              reject(`Failed to parse file: ${file.name}. Is it valid JSON?`);
            }
            resolve({
              json: json,
              file: file,
              route: cmp
            });
          }
        }).then(data => {
          //determine file type and map
          cmp.mapJSON(data);
        }).catch(reason => {
          //catch any errors
          Ember.get(cmp, 'flashMessages').danger(reason);
          return false;
        }).finally(() => {
          Ember.$('.import-file-picker input:file').val('');
        });
      },

      readFromUri() {
        let uri = this.controller.get('importUri');
        let controller = this.controller;
        let route = this;

        Ember.set(controller, 'isLoading', true);

        this.ajax.request(uri, {
          type: 'GET',
          context: this,
          dataType: 'text',
          crossDomain: true
        }).then(function (response) {

          if (response) {
            let json;

            new Ember.RSVP.Promise((resolve, reject) => {
              try {
                json = JSON.parse(response);
              } catch (e) {
                reject(`Failed to parse data. Is it valid JSON?`);
              }

              resolve({
                json: json,
                file: null,
                route: route
              });
            }).then(data => {
              //determine file type and map
              route.mapJSON(data);
            }).catch(reason => {
              //catch any errors
              Ember.get(controller, 'flashMessages').danger(reason);
              return false;
            }).finally(() => {
              Ember.set(controller, 'isLoading', false);
              Ember.$('.md-import-picker input:file').val('');
            });
          } else {
            Ember.set(controller, 'errors', response.messages);
            Ember.get(controller, 'flashMessages').danger('Import error!');
          }
        }).catch(response => {
          let error = ` Error retrieving the mdJSON: ${response.status}: ${response.statusText}`;

          Ember.set(controller, 'xhrError', error);
          Ember.set(controller, 'isLoading', false);
          Ember.get(controller, 'flashMessages').danger(error);
        });
      },
      importData() {
        let store = this.store;
        let data = {
          data: this.currentRouteModel().get('data').filterBy('meta.export').rejectBy('type', 'settings')
        };

        store.importData(data, {
          truncate: !this.currentRouteModel().get('merge'),
          json: false
        }).then(() => {
          Ember.get(this, 'flashMessages').success(`Imported data. Records were
              ${this.currentRouteModel().get('merge') ? 'merged' : 'replaced'}.`, {
            extendedTimeout: 1500
          });
          //this.transitionTo('dashboard');
        });

        let settingService = this.settings;
        let newSettings = this.currentRouteModel().get('data').filterBy('meta.export').findBy('type', 'settings');

        if (newSettings) {
          let settings = {
            data: [newSettings]
          };
          let destroys = [];

          store.findAll('setting').forEach(rec => {
            destroys.pushObject(rec.destroyRecord());
          });

          Ember.RSVP.allSettled(destroys).then(() => {
            store.importData(settings, {
              json: false
            }).then(() => {
              settingService.setup();
              Ember.get(this, 'flashMessages').success(`Imported Settings.`, {
                extendedTimeout: 1500
              });
            });
          });
        }
      },
      closePreview() {
        this.currentRouteModel().set('preview', false);
      },
      cancelImport() {
        this.currentRouteModel().set('files', false);
      }
    }
  });
});
;define("mdeditor/pods/import/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "dYHsIXH7", "block": "{\"symbols\":[\"item\",\"key\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n\\n  \"],[7,\"div\"],[12,\"class\",[28,[\"col-sm-\",[27,\"if\",[[23,[\"model\",\"files\"]],\"9\",\"12\"],null],\" col-xxl-\",[27,\"if\",[[23,[\"model\",\"files\"]],\"10\",\"12\"],null]]]],[9],[0,\"\\n\\n    \"],[7,\"h3\"],[11,\"class\",\"text-info\"],[9],[0,\"Import Data\"],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"preview\"]]],null,{\"statements\":[[0,\"      \"],[7,\"h3\"],[9],[1,[27,\"capitalize\",[[27,\"singularize\",[[23,[\"model\",\"preview\",\"model\",\"type\"]]],null]],null],false],[0,\": \"],[1,[23,[\"model\",\"preview\",\"model\",\"id\"]],false],[10],[0,\"\\n      \"],[1,[27,\"control/md-json-viewer\",null,[[\"class\",\"json\",\"modal\"],[\"md-import-preview\",[23,[\"model\",\"preview\",\"json\"]],false]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"unless\",[[23,[\"model\",\"files\"]]],null,{\"statements\":[[4,\"file-picker\",null,[[\"class\",\"fileLoaded\",\"preview\",\"accept\",\"readAs\"],[\"md-file-picker md-import-picker\",\"readData\",false,\".json,.xml\",\"readAsText\"]],{\"statements\":[[0,\"          \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-info btn-block\"],[11,\"type\",\"button\"],[9],[0,\"\\n            \"],[7,\"p\"],[9],[1,[27,\"fa-icon\",[\"bullseye\"],null],false],[0,\" Click or Drop a file here to import data.\"],[10],[0,\"\\n            \"],[7,\"hr\"],[9],[10],[0,\"\\n\"],[4,\"unless\",[[23,[\"isTranslating\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\"],[11,\"class\",\"inline-block text-left small\"],[9],[0,\"\\n              These file formats are supported: \"],[7,\"br\"],[9],[10],[0,\"\\n              \"],[7,\"ul\"],[9],[0,\"\\n                \"],[7,\"li\"],[9],[0,\"mdEditor (.json)\"],[10],[0,\"\\n                \"],[7,\"li\"],[9],[0,\"mdJSON (.json)\"],[10],[0,\"\\n                \"],[7,\"li\"],[9],[0,\"FGDC CSDGM (.xml)\"],[10],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"              \"],[1,[27,\"fa-icon\",[\"spinner\"],[[\"spin\"],[true]]],false],[0,\" Translating to mdJSON. Please wait... \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[7,\"hr\"],[9],[10],[0,\"\\n        \"],[7,\"h3\"],[9],[0,\"Import mdJSON from Online URL\"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"col-xxl-6\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"input-group input-group-lg\"],[9],[0,\"\\n              \"],[1,[27,\"input\",null,[[\"type\",\"value\",\"placeholder\",\"class\"],[\"url\",[23,[\"importUri\"]],\"Enter online link to mdJSON\",\"form-control\"]]],false],[0,\"\\n              \"],[7,\"span\"],[11,\"class\",\"input-group-btn\"],[9],[0,\"\\n                  \"],[7,\"button\"],[11,\"class\",\"btn btn-primary\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"route-action\",[\"readFromUri\"],null]]],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"isLoading\"]]],null,{\"statements\":[[0,\"                      \"],[1,[27,\"fa-icon\",[\"spinner\"],[[\"spin\"],[true]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                      \"],[1,[27,\"fa-icon\",[\"cloud-download\"],null],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    Import\"],[10],[0,\"\\n              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[27,\"-each-in\",[[23,[\"model\",\"files\"]]],null]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"titleIcon\",\"collapsible\",\"collapsed\",\"data-spy\",\"shadow\"],[[27,\"capitalize\",[[22,2,[]]],null],[27,\"compute\",[[27,\"route-action\",[\"getIcon\",[22,2,[]]],null]],null],true,false,[27,\"capitalize\",[[22,2,[]]],null],true]],{\"statements\":[[0,\"        \"],[1,[27,\"control/md-record-table\",null,[[\"data\",\"dataColumns\",\"actionsColumn\",\"selectProperty\",\"showColumnsDropdown\",\"showComponentFooter\",\"showGlobalFilter\",\"showPageSize\",\"useFilteringByColumns\"],[[22,1,[]],[27,\"compute\",[[27,\"route-action\",[\"getColumns\"],null],[22,2,[]]],null],false,\"meta.export\",[27,\"not-eq\",[[22,2,[]],\"settings\"],null],[27,\"not-eq\",[[22,2,[]],\"settings\"],null],[27,\"not-eq\",[[22,2,[]],\"settings\"],null],[27,\"not-eq\",[[22,2,[]],\"settings\"],null],[27,\"not-eq\",[[22,2,[]],\"settings\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1,2]},null]],\"parameters\":[]}],[0,\"  \"],[10],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"model\",\"files\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"col-sm-3 col-xxl-2\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"preview\"]]],null,{\"statements\":[[0,\"          \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-primary btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"closePreview\"]],[9],[1,[27,\"fa-icon\",[\"arrow-left\"],null],false],[0,\" Close Preview\"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"model\",\"files\"]]],null,{\"statements\":[[0,\"          \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"importData\"]],[9],[1,[27,\"fa-icon\",[\"sign-in\"],null],false],[0,\" Click to Import Data\"],[10],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-lg btn-danger btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancelImport\"]],[9],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Cancel Import\"],[10],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"btn-fake btn-block\"],[9],[0,\"\\n            \"],[1,[27,\"x-toggle\",null,[[\"value\",\"onToggle\",\"showLabels\",\"onLabel\",\"offLabel\",\"size\",\"theme\"],[[23,[\"model\",\"merge\"]],[27,\"action\",[[22,0,[]],[27,\"mut\",[[23,[\"model\",\"merge\"]]],null]],null],true,\"Merge\",\"Replace\",\"medium\",\"default\"]]],false],[0,\"\\n          \"],[10],[0,\"\\n          \"],[7,\"hr\"],[9],[10],[0,\"\\n          \"],[1,[27,\"control/md-scroll-spy\",null,[[\"offset\",\"scrollInit\",\"setScrollTo\"],[130,[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]],false],[0,\"\\n        \"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[10],[0,\"\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/import/template.hbs" } });
});
;define('mdeditor/pods/not-found/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params) {
      return Ember.Object.create({
        path: params.path
      });
    },

    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Page Not Found',
        linkable: false
      };
    },

    redirect() {
      var url = this.router.location.formatURL('/not-found');

      if (window.location.pathname !== url) {
        this.transitionTo('/not-found');
      }
    }
  });
});
;define("mdeditor/pods/not-found/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ftoybNk2", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"alert alert-warning page-header text-center\"],[9],[0,\"\\n  \"],[7,\"h1\"],[9],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\" 404 Not Found: \"],[1,[21,\"path\"],false],[10],[0,\"\\n  \"],[7,\"p\"],[9],[0,\"\\n    Perhaps you have visited a link that has changed, or a record that no longer exists.\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/not-found/template.hbs" } });
});
;define('mdeditor/pods/publish/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/publish/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "M+U+fVMO", "block": "{\"symbols\":[\"catalog\"],\"statements\":[[7,\"h3\"],[11,\"class\",\"text-info\"],[9],[0,\"Click to choose a publishing service:\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"list-group\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\"]]],null,{\"statements\":[[4,\"link-to\",[[27,\"concat\",[\"publish.\",[22,1,[\"route\"]]],null]],[[\"class\"],[\"list-group-item\"]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"media\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"media-left media-middle\"],[9],[0,\"\\n\"],[4,\"if\",[[22,1,[\"image\"]]],null,{\"statements\":[[0,\"            \"],[7,\"img\"],[11,\"class\",\"media-object fa-fw fa-5x\"],[12,\"src\",[22,1,[\"image\"]]],[12,\"alt\",[28,[[22,1,[\"title\"]],\" icon\"]]],[9],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[1,[27,\"fa-icon\",[[27,\"if\",[[22,1,[\"icon\"]],[22,1,[\"icon\"]],\"list-alt\"],null]],[[\"size\",\"fixedWidth\",\"class\"],[\"5\",true,\"text-info\"]]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"media-body\"],[9],[0,\"\\n\"],[0,\"          \"],[7,\"h1\"],[11,\"class\",\"media-heading\"],[9],[1,[22,1,[\"name\"]],false],[10],[0,\"\\n          \"],[7,\"p\"],[11,\"class\",\"text-muted\"],[9],[1,[22,1,[\"description\"]],false],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"card card-inverse card-warning\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n      \"],[7,\"h4\"],[11,\"class\",\"card-title\"],[9],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\" No Services Available!\"],[10],[0,\"\\n      \"],[7,\"p\"],[11,\"class\",\"card-text\"],[9],[0,\"No publication services have been configured. Contact your technical support for assistance.\"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/publish/index/template.hbs" } });
});
;define('mdeditor/pods/publish/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    publish: Ember.inject.service('publish'),
    model: function model() {
      return this.get('publish.catalogs');
    }
  });
});
;define("mdeditor/pods/publish/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "qw5s1VYf", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/publish/template.hbs" } });
});
;define('mdeditor/pods/record/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Record',
        linkable: false
      };
    }
  });
});
;define("mdeditor/pods/record/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "tzqFwsV7", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/index/template.hbs" } });
});
;define("mdeditor/pods/record/nav/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cE7KbViI", "block": "{\"symbols\":[],\"statements\":[[7,\"li\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"record.show.translate\"],null,{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"fa fa-retweet\"],[9],[10],[0,\"\\n    \"],[7,\"span\"],[11,\"class\",\"md-nav-text\"],[9],[0,\"Translate\"],[10],[0,\"\\n    \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Translate\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/nav/template.hbs" } });
});
;define('mdeditor/pods/record/new/id/route', ['exports', 'ember-data'], function (exports, _emberData) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const NotFoundError = _emberData.default.NotFoundError;
  exports.default = Ember.Route.extend({
    model(params) {
      let record = this.store.peekRecord('record', params.record_id);

      if (record) {
        return record;
      }

      return this.store.findRecord('record', params.record_id);
    },

    breadCrumb: null,

    /**
     * The profile service
     *
     * @return {Ember.Service} profile
     */
    //profile: service(),

    deactivate() {
      // We grab the model loaded in this route
      let model = this.currentRouteModel();

      // If we are leaving the Route we verify if the model is in
      // 'isDeleted' state, which means it wasn't saved to the metadata.
      if (model && model.isDeleted) {
        // We call DS#unloadRecord() which removes it from the store
        this.store.unloadRecord(model);
      }
    },

    //some test actions
    setupController(controller, model) {
      // Call _super for default behavior
      this._super(controller, model);
    },

    // serialize: function (model) {
    //   // If we got here without an ID (and therefore without a model)
    //   // Ensure that we leave the route param in the URL blank (not 'undefined')
    //   if (!model) {
    //     let rec=this.store.createRecord('record');
    //     return {
    //       record_id: rec.id
    //     };
    //   }
    //
    //   // Otherwise, let Ember handle it as usual
    //   return this._super.apply(this, arguments);
    // },

    actions: {
      willTransition: function willTransition(transition) {
        if (transition.targetName === 'record.new.index') {
          transition.abort();
          return true;
        }

        // We grab the model loaded in this route
        var model = this.currentRouteModel();
        // If we are leaving the Route we verify if the model is in
        // 'isNew' state, which means it wasn't saved to the backend.
        if (model && model.get('isNew')) {
          transition.abort();
          //let contexts = transition.intent.contexts;
          // We call DS#destroyRecord() which removes it from the store
          model.destroyRecord().then(() => transition.retry());
          //transition.abort();

          // if(contexts && contexts.length > 0) {
          //   //grab any models ids and apply them to transition
          //   let ids = contexts.mapBy('id');
          //   this.replaceWith(transition.targetName, ...ids);
          //   return true;
          // }

          //this.replaceWith(transition.targetName);
          return true;
        }
      },
      saveRecord() {
        this.currentRouteModel().save().then(model => {
          this.replaceWith('record.show.edit', model);
        });
      },

      cancelRecord() {
        this.replaceWith('records');

        return false;
      },

      error(error) {
        if (error instanceof NotFoundError) {
          this.flashMessages.warning('No record found! Re-directing to new record...');
          // redirect to new
          this.replaceWith('record.new');
        } else {
          // otherwise let the error bubble
          return true;
        }
      }
    }

  });
});
;define("mdeditor/pods/record/new/id/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "D713s6KR", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row page-header\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 col-xxl-6 col-xxl-offset-3\"],[9],[0,\"\\n        \"],[7,\"h3\"],[9],[0,\"Create New Record\"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"form\"],[11,\"class\",\"col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 col-xxl-6 col-xxl-offset-3\"],[3,\"action\",[[22,0,[]],\"saveRecord\"],[[\"on\"],[\"submit\"]]],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n          \"],[7,\"label\"],[11,\"class\",\"control-label\"],[9],[0,\"Record ID\"],[10],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"text-muted\"],[9],[1,[23,[\"model\",\"recordId\"]],false],[10],[0,\"\\n\"],[0,\"      \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"label\"],[12,\"class\",[28,[\"control-label\\n            \",[27,\"if\",[[27,\"get\",[[27,\"get\",[[23,[\"model\",\"validations\",\"attrs\"]],\"json.metadata.resourceInfo.citation.title\"],null],\"options.presence.presence\"],null],\"required\"],null]]]],[9],[0,\"Record Title\"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n                \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"placeholder\"],[\"json.metadata.resourceInfo.citation.title\",[23,[\"model\"]],\"Enter a title for the record\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group clear\"],[9],[0,\"\\n\"],[0,\"            \"],[7,\"div\"],[11,\"class\",\"card\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n\\n            \"],[1,[27,\"object/md-resource-type-array\",null,[[\"plain\",\"value\",\"required\"],[true,[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\",\"resourceType\"]],true]]],false],[0,\"\\n          \"],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"col-sm-offset-4 col-sm-8\"],[9],[0,\"\\n                 \"],[7,\"span\"],[11,\"class\",\"pull-right\"],[9],[0,\"\\n                      \"],[7,\"button\"],[11,\"class\",\"btn btn-success md-form-save\"],[12,\"disabled\",[27,\"get\",[[23,[\"model\",\"validations\"]],\"isInvalid\"],null]],[11,\"type\",\"submit\"],[9],[0,\"Save\"],[10],[0,\"\\n                      \"],[7,\"button\"],[11,\"class\",\"btn btn-warning \"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"cancelRecord\"]],[9],[0,\"Cancel\"],[10],[0,\"\\n                 \"],[10],[0,\"\\n            \"],[10],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/new/id/template.hbs" } });
});
;define('mdeditor/pods/record/new/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    redirect() {
      let rec = this.store.createRecord('record');

      this.replaceWith('record.new.id', rec.id);
    }
  });
});
;define("mdeditor/pods/record/new/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "5DgJlsAf", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/new/index/template.hbs" } });
});
;define('mdeditor/pods/record/new/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'New',
        linkable: false
      };
    }
  });
});
;define('mdeditor/pods/record/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Record',
        linkable: false
      };
    }
  });
});
;define('mdeditor/pods/record/show/edit/associated/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.metadata');
      Ember.set(model, 'associatedResource', Ember.getWithDefault(model, 'associatedResource', []));
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
    },

    actions: {
      editResource(id) {
        this.transitionTo('record.show.edit.associated.resource', id);
      } //,
      // templateClass() {
      //   return Ember.Object.extend({
      //     init() {
      //       this._super(...arguments);
      //       //this.set('authority', {});
      //     }
      //   });
      // }
    }
  });
});
;define("mdeditor/pods/record/show/edit/associated/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iY5ppe8h", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Associated Resource\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"items\",\"header\",\"shadow\",\"buttonText\",\"ellipsis\",\"previewTemplate\",\"editItem\",\"verticalButtons\",\"profilePath\",\"hideIndex\",\"condensed\",\"addSubbar\"],[[23,[\"model\",\"json\",\"metadata\",\"associatedResource\"]],\"Associated Resource\",true,\"Add Resource\",[23,[\"ellipsis\"]],\"object/md-associated/preview\",[27,\"route-action\",[\"editResource\"],null],true,\"record.associated\",true,true,\"md-subbar-extra\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/associated/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/associated/resource/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const sliderColumns = [{
    propertyName: 'recordId',
    title: 'ID'
  }, {
    propertyName: 'title',
    title: 'Title'
  }, {
    propertyName: 'defaultType',
    title: 'Type'
  }];

  exports.default = Ember.Route.extend(_scrollTo.default, {
    slider: Ember.inject.service(),

    sliderColumns: sliderColumns,
    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controller.set('resourceId', Ember.get(this.controllerFor('record.show.edit.associated.resource'), 'resourceId'));
    },
    actions: {
      insertResource(selected) {
        let slider = this.slider;
        let rec = selected.get('firstObject');

        if (rec) {
          let resource = this.currentRouteModel();

          Ember.set(resource, 'mdRecordId', Ember.get(rec, 'recordId'));
        }

        //this.controller.set('slider', false);
        slider.toggleSlider(false);
        selected.clear();
      },
      selectResource() {
        let slider = this.slider;

        //this.controller.set('slider', true);
        slider.toggleSlider(true);
      },
      sliderData() {
        return this.store.peekAll('record').filterBy('recordId');
      },
      sliderColumns() {
        return this.sliderColumns;
      },
      editLinked(rec) {
        this.transitionTo('record.show.edit', rec.get('id'));
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/associated/resource/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "fHFV9G+F", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Associated Resource #\"],[1,[21,\"resourceId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-associated\",null,[[\"model\",\"recordId\",\"profilePath\",\"editLinked\"],[[23,[\"model\"]],[23,[\"parentModel\",\"recordId\"]],\"record.associated\",[27,\"route-action\",[\"editLinked\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-citation\"],[[\"text\",\"icon\",\"route\",\"selectResource\"],[\"Back to Resource List\",\"arrow-left\",\"record.show.edit.associated\",[27,\"route-action\",[\"selectResource\"],null]]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-slider-content\",[27,\"hash\",null,[[\"title\",\"body\"],[[27,\"concat\",[\"Click row to select a resource: \",[23,[\"model\",\"associationType\"]]],null],[27,\"component\",[\"control/md-select-table\"],[[\"select\",\"data\",\"columns\"],[[27,\"route-action\",[\"insertResource\"],null],[27,\"compute\",[[27,\"route-action\",[\"sliderData\"],null]],null],[27,\"compute\",[[27,\"route-action\",[\"sliderColumns\"],null]],null]]]]]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/associated/resource/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/associated/resource/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    breadCrumb: Ember.computed('resourceId', function () {
      return {
        title: Ember.get(this, 'resourceId'),
        linkable: true
      };
    }),

    model(params) {
      this.set('resourceId', params.resource_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      //this.controller.set('parentModel', this.modelFor('record.show.edit.main'));
      this.controller.set('resourceId', Ember.get(this, 'resourceId'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let resourceId = Ember.get(this, 'resourceId');
      let model = this.modelFor('record.show.edit');
      let objects = model.get('json.metadata.associatedResource');
      let resource = resourceId && Ember.isArray(objects) ? objects.objectAt(resourceId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(resource)) {
        Ember.get(this, 'flashMessages').warning('No Associated Resource object found! Re-directing to list...');
        this.replaceWith('record.show.edit.associated');

        return;
      }

      return resource;
    }
  });
});
;define("mdeditor/pods/record/show/edit/associated/resource/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "7doMExlp", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/associated/resource/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/associated/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/associated/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3CpnBtQB", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/associated/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/constraint/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.metadata.resourceInfo');
      Ember.set(model, 'constraint', Ember.getWithDefault(model, 'constraint', []));
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
    }
  });
});
;define("mdeditor/pods/record/show/edit/constraint/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "MW3nJcuU", "block": "{\"symbols\":[\"editing\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Constraints\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"object/md-object-table\",null,[[\"items\",\"collasped\",\"header\",\"buttonText\",\"previewTemplate\",\"addSubbar\",\"attributes\"],[[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\",\"constraint\"]],false,\"Constraints\",\"Add Constraint\",[23,[\"previewTemplate\"]],\"md-subbar-extra\",\"type\"]],{\"statements\":[[0,\"  \"],[1,[27,\"object/md-constraint\",null,[[\"model\",\"profilePath\"],[[22,1,[]],\"record.constraints\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/constraint/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/constraint/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/constraint/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "PNaTpqEc", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"outlet\",null,[[\"class\"],[\"\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/constraint/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/coverages/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/coverages/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3EKVFIqy", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\\n\"],[7,\"style\"],[11,\"media\",\"screen\"],[9],[0,\"\\n    .construction {\\n        width: 50vh;\\n        min-width:240px;\\n        font-size:5vh;\\n        border: 2vh solid #333333;\\n        margin: 10vh auto;\\n        padding: 3vh;\\n        border-radius: 5vh;\\n    }\\n\"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"class\",\"shadow\"],[\"construction card-inverse card-warning\",false]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"text-center\"],[9],[0,\"\\n        \"],[7,\"div\"],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],[[\"size\"],[2]]],false],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[9],[0,\"\\n            \"],[7,\"b\"],[9],[0,\"Page Under \"],[7,\"br\"],[9],[10],[0,\"Construction\"],[10],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/coverages/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/dictionary/route', ['exports', 'uuid/v4'], function (exports, _v) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Dictionaries'
      };

      this.columns = [{
        propertyName: 'title',
        title: 'Title'
      }, {
        propertyName: 'subject',
        title: 'Subject'
      }];
    },
    model() {
      //return this.store.peekAll('contact');
      let dicts = this.modelFor('application').findBy('modelName', 'dictionary');
      let rec = this.modelFor('record.show.edit');

      Ember.set(rec, 'json.mdDictionary', Ember.getWithDefault(rec, 'json.mdDictionary', []));
      let selected = rec.get('json.mdDictionary');

      return dicts.map(dict => {
        let json = Ember.get(dict, 'json');
        let id = Ember.get(json, 'dictionaryId');
        let data = Ember.get(json, 'dataDictionary');

        if (!id) {
          Ember.set(json, 'dictionaryId', (0, _v.default)());
          dict.save();
        }

        return Ember.Object.create({
          id: json.dictionaryId,
          title: Ember.get(data, 'citation.title'),
          description: data.description,
          subject: data.subject,
          selected: selected.includes(json.dictionaryId)
        });
      });
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));

      Ember.defineProperty(this.controller, 'selected', Ember.computed('model', function () {
        return this.model.filterBy('selected');
      }));

      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.refresh,
        cancelScope: this
      });
    },

    _select(obj) {
      let rec = this.modelFor('record.show.edit');
      let selected = rec.get('json.mdDictionary');

      if (obj.selected) {
        if (selected.indexOf(obj.id) === -1) {
          selected.pushObject(obj.id);
          this.controller.notifyPropertyChange('model');
          return;
        }
      }
      selected.removeObject(obj.id);
      this.controller.notifyPropertyChange('model');
    },

    actions: {
      getColumns() {
        return this.columns;
      },

      select(obj) {
        this._select(obj);
      },

      remove(obj) {
        Ember.set(obj, 'selected', false);
        this._select(obj);
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/dictionary/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ny68Pi9S", "block": "{\"symbols\":[\"item\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[7,\"h3\"],[11,\"class\",\"text-info\"],[9],[1,[27,\"fa-icon\",[\"book\"],null],false],[0,\" Dictionaries\\n      \"],[7,\"span\"],[11,\"class\",\"small\"],[9],[0,\"for \"],[7,\"em\"],[9],[1,[23,[\"parentModel\",\"title\"]],false],[10],[10],[0,\"\\n      \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"length\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"shadow\",\"title\",\"spotlightEnabled\"],[true,false,true,\"Select Dictionaries\",false]],{\"statements\":[[0,\"        \"],[1,[27,\"control/md-record-table\",null,[[\"data\",\"dataColumns\",\"select\",\"actionsColumn\",\"selectProperty\",\"selectedItems\"],[[23,[\"model\"]],[27,\"compute\",[[27,\"route-action\",[\"getColumns\"],null]],null],[27,\"route-action\",[\"select\"],null],false,\"selected\",[23,[\"selected\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"shadow\",\"title\",\"class\",\"spotlightEnabled\"],[true,false,true,\"Selected Dictionaries\",\"card-inverse hd-success card-outline-success\",false]],{\"statements\":[[0,\"      \"],[7,\"ul\"],[11,\"class\",\"list-group\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"selected\"]]],null,{\"statements\":[[0,\"        \"],[7,\"li\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n          \"],[7,\"h4\"],[11,\"class\",\"\"],[9],[1,[22,1,[\"title\"]],false],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn btn-danger pull-right\",[27,\"route-action\",[\"remove\",[22,1,[]]],null]]],{\"statements\":[[0,\"              \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Remove\\n\"]],\"parameters\":[]},null],[0,\"          \"],[10],[0,\"\\n\"],[0,\"          \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal list-group-item-text\"],[9],[0,\"\\n              \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Subject\",[22,1,[\"subject\"]]]]],false],[0,\"\\n              \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Description\",[22,1,[\"description\"]]]]],false],[0,\"\\n          \"],[10],[0,\"\\n\"],[0,\"        \"],[10],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"        \"],[7,\"li\"],[11,\"class\",\"list-group-item alert alert-info\"],[9],[0,\"\\n          \"],[7,\"h3\"],[9],[0,\"No Dictionaries selected.\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n        \"],[7,\"h3\"],[9],[0,\"No Dictionaries found.\\n\"],[4,\"link-to\",[\"dictionary.new\"],[[\"class\"],[\"btn btn-success btn-lg\"]],{\"statements\":[[0,\"            \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Create a Dictionary\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/dictionary/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/distribution/distributor/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controller.set('distributionId', Ember.get(this.controllerFor('record.show.edit.distribution.distributor'), 'distributionId'));
    },
    actions: {
      addDistributor() {
        let model = this.currentRouteModel();
        let dists = Ember.get(model, 'distributor');

        if (dists) {
          dists.pushObject({});
        } else {
          Ember.set(model, 'distributor', [{}]);
        }

        this.controller.set('refresh', Ember.get(model, 'distributor.length'));

        Ember.$("html, body").animate({
          scrollTop: Ember.$(document).height()
        }, "slow");
      },
      editDistributor(id) {
        return id;
      },
      deleteDistributor(id) {
        let model = this.currentRouteModel();
        let dists = Ember.get(model, 'distributor');

        dists.removeAt(id);
        this.controller.set('refresh', Ember.get(model, 'distributor.length'));
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/distribution/distributor/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "T1FY7AaF", "block": "{\"symbols\":[\"dist\",\"index\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Distributors for Distribution #\"],[1,[21,\"distributionId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[4,\"each\",[[23,[\"model\",\"distributor\"]]],null,{\"statements\":[[4,\"if\",[[22,2,[]]],null,{\"statements\":[[0,\"    \"],[7,\"hr\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"data-spy\",\"shadow\",\"spotlightEnabled\",\"class\"],[[27,\"concat\",[\"Distributor #\",[22,2,[]]],null],true,false,[27,\"concat\",[\"Distributor \",[22,2,[]]],null],true,true,[27,\"if\",[[27,\"mod\",[[22,2,[]],2],null],\"md-card-even\"],null]]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"card-buttons\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n          \"],[7,\"button\"],[11,\"disabled\",\"disabled\"],[11,\"class\",\"btn btn-md btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"route-action\",[\"editDistributor\",[22,2,[]]],null]]],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit More...\"],[10],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-md btn-danger btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"route-action\",[\"deleteDistributor\",[22,2,[]]],null]]],[9],[0,\"\\n              \"],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Delete Distributor\"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[1,[27,\"object/md-distributor\",null,[[\"model\",\"profilePath\"],[[22,1,[]],\"record.distribution.distributor\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1,2]},{\"statements\":[[0,\"  \"],[7,\"h3\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"No distributors found.\\n    \"],[7,\"button\"],[11,\"class\",\"btn btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"route-action\",[\"addDistributor\"],null]]],[9],[0,\"\\n      \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Distributor\"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"clickText\",\"clickIcon\",\"clickType\",\"text\",\"icon\",\"type\",\"click\",\"route\"],[\"Add Distributor Section\",\"plus\",\"success\",\"Back to Distribution List\",\"arrow-left\",\"primary\",[27,\"route-action\",[\"addDistributor\"],null],\"record.show.edit.distribution\"]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"refresh\",\"scrollInit\",\"setScrollTo\"],[[23,[\"refresh\"]],[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/distribution/distributor/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/distribution/distributor/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params) {
      this.set('distributionId', params.distribution_id);

      return this.setupModel();
    },

    breadCrumb: Ember.computed('distributionId', function () {
      return {
        title: 'Distributors'
        //title: `${get(this, 'distributionId')}: Distributors`
      };
    }),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      //this.controller.set('parentModel', this.modelFor('record.show.edit.main'));
      this.controller.set('distributionId', Ember.get(this, 'distributionId'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let distributionId = Ember.get(this, 'distributionId');
      let model = this.modelFor('record.show.edit');
      let objects = model.get('json.metadata.resourceDistribution');
      let resource = distributionId && Ember.isArray(objects) ? Ember.A(objects).objectAt(distributionId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(resource)) {
        Ember.get(this, 'flashMessages').warning('No Distribution object found! Re-directing to list...');
        this.replaceWith('record.show.edit.distribution');

        return;
      }

      return resource;
    }
  });
});
;define("mdeditor/pods/record/show/edit/distribution/distributor/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Aybz4DnD", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/distribution/distributor/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/distribution/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
    },

    actions: {
      addDistribution() {
        let dists = this.currentRouteModel().get('json.metadata.resourceDistribution');

        dists.pushObject({});

        Ember.$("html, body").animate({
          scrollTop: Ember.$(document).height()
        }, "slow");
      },
      editDistribution(id) {
        this.transitionTo('record.show.edit.distribution.distributor', id);
      },
      deleteDistribution(id) {
        let dists = this.currentRouteModel().get('json.metadata.resourceDistribution');

        dists.removeAt(id);
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/distribution/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iCFfjXjP", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Distribution\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-distribution\",null,[[\"model\",\"profilePath\",\"addDistribution\",\"deleteDistribution\",\"editDistribution\"],[[23,[\"model\"]],\"record.distribution\",[27,\"route-action\",[\"addDistribution\"],null],[27,\"route-action\",[\"deleteDistribution\"],null],[27,\"route-action\",[\"editDistribution\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"btnType\",\"click\"],[\"Add Distribution Section\",\"plus\",\"success\",[27,\"route-action\",[\"addDistribution\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/distribution/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/distribution/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/distribution/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "t8/GynTU", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/distribution/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/documents/citation/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controller.set('citationId', Ember.get(this.controllerFor('record.show.edit.documents.citation'), 'citationId'));
    }
  });
});
;define("mdeditor/pods/record/show/edit/documents/citation/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "r94iBOBE", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Additional Document #\"],[1,[21,\"citationId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-documentation\",null,[[\"model\",\"profilePath\"],[[23,[\"model\"]],\"record.documents\"]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Document List\",\"arrow-left\",\"record.show.edit.documents\"]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/documents/citation/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/documents/citation/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    breadCrumb: Ember.computed('citationId', function () {
      return {
        title: Ember.get(this, 'citationId'),
        linkable: true
      };
    }),

    model(params) {
      this.set('citationId', params.citation_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      //this.controller.set('parentModel', this.modelFor('record.show.edit.main'));
      this.controller.set('citationId', Ember.get(this, 'citationId'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let citationId = Ember.get(this, 'citationId');
      let model = this.modelFor('record.show.edit');
      let objects = model.get('json.metadata.additionalDocumentation');
      let resource = citationId && Ember.isArray(objects) ? Ember.A(objects).objectAt(citationId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(resource)) {
        Ember.get(this, 'flashMessages').warning('No Document object found! Re-directing to list...');
        this.replaceWith('record.show.edit.documents');

        return;
      }

      return resource;
    }
  });
});
;define("mdeditor/pods/record/show/edit/documents/citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "KNaf66wr", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/documents/citation/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/documents/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.metadata');
      Ember.set(model, 'additionalDocumentation', Ember.getWithDefault(model, 'additionalDocumentation', []));
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
    },

    actions: {
      editDocument(id) {
        this.transitionTo('record.show.edit.documents.citation', id);
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/documents/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "o3EkdS+p", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Additional Documentation\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"items\",\"header\",\"shadow\",\"verticalButtons\",\"buttonText\",\"ellipsis\",\"previewTemplate\",\"editItem\",\"hideIndex\",\"condensed\",\"addSubbar\"],[[23,[\"model\",\"json\",\"metadata\",\"additionalDocumentation\"]],\"Additional Documents\",true,true,\"Add Document\",true,\"object/md-documentation/preview\",[27,\"route-action\",[\"editDocument\"],null],true,true,\"md-subbar-extra\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/documents/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/documents/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/documents/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "qogph2Pt", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/documents/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/extent/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/extent/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/gG0ArvH", "block": "{\"symbols\":[\"extent\",\"index\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Extents\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"section\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\",\"extent\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"object/md-spatial-extent\",null,[[\"extent\",\"index\",\"deleteExtent\",\"editExtent\"],[[22,1,[]],[22,2,[]],[27,\"route-action\",[\"deleteExtent\"],null],[27,\"route-action\",[\"editExtent\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[1,2]},{\"statements\":[[0,\"    \"],[7,\"h3\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"No geographic extents found.\\n      \"],[7,\"button\"],[11,\"class\",\"btn btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"route-action\",[\"addExtent\"],null]]],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Geographic Extent\"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[10],[0,\"\\n\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/extent/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/extent/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model() {
      let model = this.modelFor('record.show.edit');
      let json = model.get('json');
      let info = json.metadata.resourceInfo;

      Ember.set(info, 'extent', Ember.getWithDefault(info, 'extent', Ember.A()));

      Ember.get(info, 'extent').forEach(itm => {
        Ember.set(itm, 'geographicExtent', Ember.getWithDefault(itm, 'geographicExtent', Ember.A()));
        Ember.set(itm, 'geographicExtent.0', Ember.getWithDefault(itm, 'geographicExtent.0', {}));
        Ember.set(itm, 'geographicExtent.0.boundingBox', Ember.getWithDefault(itm, 'geographicExtent.0.boundingBox', {}));
      });
      return model;
    },

    subbar: 'control/subbar-extent',

    clearSubbar: Ember.on('deactivate', function () {
      this.controllerFor('record.show.edit').set('subbar', null);
    }),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controllerFor('record.show.edit').set('subbar', this.subbar);
    },

    actions: {
      didTransition() {
        this.controllerFor('record.show.edit').set('subbar', this.subbar);
      },
      addExtent() {
        let extents = this.currentRouteModel().get('json.metadata.resourceInfo.extent');

        extents.pushObject({
          description: '',
          geographicExtent: [{
            boundingBox: {},
            geographicElement: Ember.A()
          }]
        });

        Ember.$("html, body").animate({
          scrollTop: Ember.$(document).height()
        }, "slow");
      },
      deleteExtent(id) {
        let extents = this.currentRouteModel().get('json.metadata.resourceInfo.extent');

        extents.removeAt(id);
      },
      editExtent(id) {
        this.transitionTo('record.show.edit.extent.spatial', id);
      },
      toList() {
        let me = this;

        me.transitionTo(me.get('routeName')).then(function () {
          me.setupController();
        });
      }
    }
  });
});
;define('mdeditor/pods/record/show/edit/extent/spatial/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params) {
      this.set('extentId', params.extent_id);

      return this.setupModel();
    },

    subbar: 'control/subbar-spatial',

    // clearSubbar: function() {
    //   this.controllerFor('record.show.edit')
    //     .set('subbar', null);
    // }.on('deactivate'),

    setupController: function setupController(controller) {
      // Call _super for default behavior
      this._super(...arguments);

      this.controllerFor('record.show.edit').setProperties({
        subbar: this.subbar,
        onCancel: this.setupModel,
        cancelScope: this,
        extentId: this.extentId
      });

      controller.setProperties({
        featureGroup: null,
        extentId: this.extentId
      });
    },

    setupModel() {
      let model = this.modelFor('record.show.edit.extent');
      let extents = model.get('json.metadata.resourceInfo.extent');
      let extent = Ember.get(extents, this.extentId || this.controller.get('extentId'));

      //make sure the extent still exists
      if (Ember.isEmpty(extent)) {
        Ember.get(this, 'flashMessages').warning('No extent found! Re-directing to list...');
        this.replaceWith('record.show.edit.extent');

        return;
      }

      if (!Ember.isArray(extent.geographicExtent[0].geographicElement)) {
        Ember.set(extent, 'geographicExtent.0.geographicElement', Ember.A([]));
      }

      let layers = extent.geographicExtent[0].geographicElement;

      layers.forEach(function (l, idx, arr) {
        arr.replace(idx, 1, [Ember.Object.create(l)]);
      });

      this.set('layers', layers);

      return model;
    },

    actions: {
      getContext() {
        return this;
      },
      didTransition() {
        this.controllerFor('record.show.edit').set('subbar', this.subbar);
      },
      handleResize() {
        Ember.$('.map-file-picker .leaflet-container').height((Ember.$(window).height() - Ember.$('#md-navbars').outerHeight() - 15) / 2);
      },
      uploadData() {
        Ember.$('.map-file-picker .file-picker__input').click();
      },
      deleteAllFeatures() {
        let features = this.layers;
        let group = this.controller.get('featureGroup');

        if (features.length) {
          features.forEach(item => {
            features.popObject(item);
            group.removeLayer(item._layer);
          });

          if (group._map.drawControl) {
            group._map.drawControl.remove();
          }
          features.clear();
        }
      },
      setFeatureGroup(obj) {
        this.controller.set('featureGroup', obj);
      },
      zoomAll() {
        let layer = this.controller.get('featureGroup');
        let bnds = layer.getBounds();
        let map = layer._map;

        if (bnds.isValid()) {
          map.fitBounds(bnds, {
            maxZoom: 14
          });
          return;
        }

        map.fitWorld();
      },
      exportGeoJSON() {
        let fg = this.controller.get('featureGroup');

        let json = {
          'type': 'FeatureCollection',
          'features': []
        };

        if (fg) {
          let geoGroup = fg.getLayers();
          geoGroup.forEach(l => {
            let layers = l.getLayers();

            layers.forEach(layer => {
              let feature = layer.feature;

              json.features.push({
                'type': 'Feature',
                'id': feature.id,
                'geometry': feature.geometry,
                'properties': feature.properties
              });
            });
          });

          window.saveAs(new Blob([JSON.stringify(json)], {
            type: 'application/json;charset=utf-8'
          }), 'export_features.json');

          // return new Ember.RSVP.Promise((resolve) => {
          //   Ember.run(null, resolve, json);
          // }, 'MD: ExportSpatialData');
        } else {
          Ember.get(this, 'flashMessages').warning('Found no features to export.');
        }
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/extent/spatial/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uFIht3kX", "block": "{\"symbols\":[],\"statements\":[[7,\"section\"],[9],[0,\"\\n    \"],[1,[27,\"leaflet-table\",null,[[\"layers\",\"setFeatureGroup\",\"handleResize\"],[[27,\"get\",[[23,[\"model\"]],[27,\"concat\",[\"json.metadata.resourceInfo.extent.\",[23,[\"extentId\"]],\".geographicExtent.0.geographicElement\"],null]],null],[27,\"route-action\",[\"setFeatureGroup\"],null],[27,\"route-action\",[\"handleResize\"],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/extent/spatial/template.hbs" } });
});
;define("mdeditor/pods/record/show/edit/extent/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "NIqwyTFz", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/extent/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/funding/allocation/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    breadCrumb: Ember.computed('allocationId', function () {
      return {
        title: 'Allocation ' + Ember.get(this, 'allocationId'),
        linkable: true
      };
    }),

    model(params) {
      this.set('allocationId', params.allocation_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controller.set('allocationId', Ember.get(this, 'allocationId'));

      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let allocationId = Ember.get(this, 'allocationId');
      let model = this.modelFor('record.show.edit');
      let objects = model.get('json.metadata.funding');
      let resource = allocationId && Ember.isArray(objects) ? Ember.A(objects).objectAt(allocationId) : undefined;

      //make sure the allocation exists
      if (Ember.isEmpty(resource)) {
        Ember.get(this, 'flashMessages').warning('No Funding object found! Re-directing to list...');
        this.replaceWith('record.show.edit.funding');

        return;
      }

      return resource;
    }
  });
});
;define("mdeditor/pods/record/show/edit/funding/allocation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "wHerX91h", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Allocation #\"],[1,[21,\"allocationId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-funding\",null,[[\"model\",\"profilePath\"],[[23,[\"model\"]],\"record.funding\"]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Funding List\",\"arrow-left\",\"record.show.edit.funding\"]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/funding/allocation/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/funding/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.metadata');
      Ember.set(model, 'funding', Ember.A(Ember.getWithDefault(model, 'funding', [])));
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
    },

    actions: {
      editAllocation(id) {
        this.transitionTo('record.show.edit.funding.allocation', id);
      },
      addAllocation() {
        let funding = this.currentRouteModel().get('json.metadata.funding');
        let allocation = Ember.Object.create({});

        // once(this, () => {

        funding.pushObject(allocation);
        this.setScrollTo(`allocation-${funding.length - 1}`);
        this.transitionTo('record.show.edit.funding.allocation', funding.length - 1);

        // $("html, body").animate({
        //   scrollTop: $(document).height()
        // }, "slow");
        // });
      },
      deleteAllocation(id) {
        let all = this.currentRouteModel().get('json.metadata.funding');

        all.removeAt(id);
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/funding/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yrtNPALy", "block": "{\"symbols\":[\"allocation\",\"index\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Funding\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"unless\",[[23,[\"model\",\"json\",\"metadata\",\"funding\"]]],null,{\"statements\":[[0,\"  \"],[7,\"h3\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"No funding allocations found.\\n    \"],[7,\"button\"],[11,\"class\",\"btn btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"addAllocation\"]],[9],[0,\"\\n      \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Funding Allocation\"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"json\",\"metadata\",\"funding\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"shadow\",\"spotlightEnabled\",\"flex\"],[[27,\"concat\",[\"Allocation #\",[22,2,[]]],null],true,false,\"funding.allocation\",[27,\"concat\",[\"Allocation \",[22,2,[]]],null],true,false,true]],{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"flex-grow\"],[9],[0,\"\\n        \"],[1,[27,\"object/md-funding/preview\",null,[[\"item\"],[[22,1,[]]]]],false],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"btn-group-vertical\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"CRUD buttons\"],[9],[0,\"\\n        \"],[7,\"button\"],[11,\"class\",\"btn btn-md btn-success btn-block md-btn-responsive\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"editAllocation\",[22,2,[]]]],[9],[0,\"\\n          \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit Allocation\"],[10],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn-md btn-danger btn-block md-btn-responsive\",[27,\"route-action\",[\"deleteAllocation\",[22,2,[]]],null]]],{\"statements\":[[0,\"          \"],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Delete Allocation\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[1,2]},null],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"clickText\",\"clickIcon\",\"clickType\",\"click\"],[\"Add Funding Allocation\",\"plus\",\"success\",[27,\"route-action\",[\"addAllocation\"],null]]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/funding/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/funding/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    actions: {
      deleteAllocation() {}
    }
  });
});
;define("mdeditor/pods/record/show/edit/funding/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "by5Cwtx0", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/funding/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/grid/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/grid/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cvCYuLl/", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\\n\"],[7,\"style\"],[11,\"media\",\"screen\"],[9],[0,\"\\n    .construction {\\n        width: 50vh;\\n        min-width:240px;\\n        font-size:5vh;\\n        border: 2vh solid #333333;\\n        margin: 10vh auto;\\n        padding: 3vh;\\n        border-radius: 5vh;\\n    }\\n\"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"class\",\"shadow\"],[\"construction card-inverse card-warning\",false]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"text-center\"],[9],[0,\"\\n        \"],[7,\"div\"],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],[[\"size\"],[2]]],false],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[9],[0,\"\\n            \"],[7,\"b\"],[9],[0,\"Page Under \"],[7,\"br\"],[9],[10],[0,\"Construction\"],[10],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/grid/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    redirect(model) {
      this.replaceWith('record.show.edit.main', model);
    }
  });
});
;define("mdeditor/pods/record/show/edit/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "SFYqg9IE", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/keywords/index/route', ['exports', 'ember-copy', 'mdeditor/mixins/scroll-to'], function (exports, _emberCopy, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    keyword: Ember.inject.service(),
    model() {
      let model = this.modelFor('record.show.edit');
      let json = model.get('json');
      let info = json.metadata.resourceInfo;

      Ember.set(info, 'keyword', !info.hasOwnProperty('keyword') ? Ember.A() : Ember.A(info.keyword));

      //check to see if custom list
      info.keyword.forEach(k => {
        Ember.set(k, 'thesaurus', Ember.getWithDefault(k, 'thesaurus', {}));
        Ember.set(k, 'thesaurus.identifier', Ember.getWithDefault(k, 'thesaurus.identifier', [{
          identifier: 'custom'
        }]));
        Ember.set(k, 'thesaurus.date', Ember.getWithDefault(k, 'thesaurus.date', [{}]));
        Ember.set(k, 'thesaurus.onlineResource', Ember.getWithDefault(k, 'thesaurus.onlineResource', [{}]));

        // if(!has(k, 'thesaurus')) {
        //   set(k, 'thesaurus', {});
        // }
        // if(!has(k, 'thesaurus.identifier')) {
        //   set(k, 'thesaurus.identifier', [{
        //     identifier: 'custom'
        //   }]);
        // }
        // if(!has(k, 'thesaurus.date')) {
        //   set(k, 'thesaurus.date', [{}]);
        // }
        // if(!has(k, 'thesaurus.onlineResource')) {
        //   set(k, 'thesaurus.onlineResource', [{}]);
        // }

        //let obj = arr.objectAt(idx);
        //assign(obj, EmObject.create(k));
      });

      return model;
    },

    subbar: 'control/subbar-keywords',

    clearSubbar: Ember.on('deactivate', function () {
      this.controllerFor('record.show.edit').set('subbar', null);
    }),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controllerFor('record.show.edit').set('subbar', this.subbar);
      this.controller.set('subbar', this.subbar);
    },

    actions: {
      getContext() {
        return this;
      },
      addThesaurus() {
        let the = this.currentRouteModel().get('json.metadata.resourceInfo.keyword');

        Ember.$("html, body").animate({ scrollTop: Ember.$(document).height() }, "slow");

        the.pushObject({
          keyword: [],
          keywordType: 'theme',
          thesaurus: {
            identifier: [{
              identifier: null
            }]
          },
          fullPath: true
        });

        this.controller.set('refresh', the.get('length'));
        this.controller.set('scrollTo', 'thesaurus-' + (the.get('length') - 1));
      },
      deleteThesaurus(id) {
        let the = this.currentRouteModel().get('json.metadata.resourceInfo.keyword');
        the.removeAt(id);
        this.controller.set('refresh', the.get('length'));
      },
      editThesaurus(id) {
        this.transitionTo('record.show.edit.keywords.thesaurus', id);
      },
      selectThesaurus(selected, thesaurus) {
        if (selected) {
          Ember.set(thesaurus, 'thesaurus', (0, _emberCopy.copy)(selected.citation, true));
          if (selected.keywordType) {
            Ember.set(thesaurus, 'keywordType', selected.keywordType);
          }
        } else {
          Ember.set(thesaurus, 'thesaurus.identifier.0.identifier', 'custom');
        }
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/keywords/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "dD7DTXXW", "block": "{\"symbols\":[\"thesaurus\",\"index\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Keywords\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n  \"],[7,\"section\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\",\"keyword\"]]],null,{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"md-keywords-container\"],[12,\"data-spy\",[27,\"concat\",[\"Thesaurus \",[22,2,[]]],null]],[12,\"id\",[27,\"concat\",[\"thesaurus-container-\",[22,2,[]]],null]],[9],[0,\"\\n        \"],[7,\"div\"],[11,\"class\",\"md-keywords-header\"],[9],[0,\"\\n          \"],[7,\"h4\"],[11,\"class\",\"inline-block text-primary\"],[11,\"code\",\"\"],[9],[0,\"\\n            \"],[7,\"strong\"],[9],[1,[27,\"concat\",[\"Thesaurus #\",[22,2,[]]],null],false],[10],[0,\"\\n          \"],[10],[0,\"\\n          \"],[1,[27,\"input/md-select-thesaurus\",null,[[\"class\",\"thesaurus\",\"selectThesaurus\",\"value\",\"disabled\"],[\"md-keywords-select\",[22,1,[]],[27,\"route-action\",[\"selectThesaurus\"],null],[22,1,[\"thesaurus\",\"identifier\",\"0\",\"identifier\"]],[22,1,[\"keyword\",\"length\"]]]]],false],[0,\"\\n\"],[4,\"control/md-button-confirm\",null,[[\"class\",\"onConfirm\"],[\"btn btn-sm btn-danger\",[27,\"route-action\",[\"deleteThesaurus\",[22,2,[]]],null]]],{\"statements\":[[0,\"            \"],[1,[27,\"fa-icon\",[\"times\"],null],false],[0,\" Delete\\n\"]],\"parameters\":[]},null],[4,\"if\",[[22,1,[\"thesaurus\",\"identifier\",\"0\",\"identifier\"]]],null,{\"statements\":[[0,\"          \"],[7,\"a\"],[11,\"class\",\"md-keywords-collapse pull-right\"],[11,\"data-toggle\",\"collapse\"],[11,\"aria-expanded\",\"true\"],[12,\"href\",[28,[\"#thesaurus-\",[22,2,[]]]]],[12,\"aria-controls\",[28,[\"thesaurus-\",[22,2,[]]]]],[9],[0,\"\\n            \"],[7,\"span\"],[11,\"class\",\"fa\"],[9],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n        \"],[7,\"div\"],[12,\"id\",[28,[\"thesaurus-\",[22,2,[]]]]],[11,\"class\",\"md-keywords-body collapse in\"],[9],[0,\"\\n\\n\"],[4,\"with\",[[22,1,[\"thesaurus\",\"identifier\",\"0\",\"identifier\"]]],null,{\"statements\":[[0,\"          \"],[7,\"hr\"],[9],[10],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"md-keywords-thesaurus col-md-6 col-lg-7\"],[9],[0,\"\\n              \"],[1,[27,\"object/md-keyword-citation\",null,[[\"model\"],[[22,1,[]]]]],false],[0,\"\\n            \"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"md-keywords-list col-md-6 col-lg-5\"],[9],[0,\"\\n              \"],[1,[27,\"object/md-keyword-list\",null,[[\"model\",\"listId\",\"addKeyword\",\"deleteKeyword\",\"editThesaurus\"],[[22,1,[]],[22,2,[]],[27,\"route-action\",[\"addKeyword\"],null],[27,\"route-action\",[\"deleteKeyword\"],null],[27,\"route-action\",[\"editThesaurus\"],null]]]],false],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[1,2]},{\"statements\":[[0,\"          \"],[7,\"h3\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"No keywords found.\\n            \"],[7,\"button\"],[11,\"class\",\"btn btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"route-action\",[\"addThesaurus\"],null]]],[9],[0,\"\\n              \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Thesaurus\"],[10],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"  \"],[10],[0,\"\\n\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\\n  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"refresh\",\"scrollInit\",\"setScrollTo\"],[[23,[\"refresh\"]],[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/keywords/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/keywords/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    actions: {
      addKeyword(model, obj) {
        let k = obj ? obj : {};

        model.pushObject(k);
      },
      deleteKeyword(model, obj) {
        if (typeof obj === 'number') {
          model.removeAt(obj);
        } else {
          model.removeObject(obj);
        }
      },
      // hideThesaurus(el) {
      //   $(el).closest('.md-keywords-container').toggleClass('hide-thesaurus');
      // },
      toList() {
        let me = this;

        me.transitionTo(me.get('routeName')).then(function () {
          me.setupController();
        });
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/keywords/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "NJlvO3xL", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/keywords/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/keywords/thesaurus/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    keyword: Ember.inject.service(),
    model(params) {
      this.set('thesaurusId', params.thesaurus_id);

      return this.setupModel();
    },

    setupModel() {
      let thesaurusId = Ember.get(this, 'thesaurusId') || this.controller.get('thesaurusId');
      let model = this.modelFor('record.show.edit.keywords');
      let thesaurus = model.get('json.metadata.resourceInfo.keyword').get(thesaurusId);

      //make sure the thesaurus still exists
      if (Ember.isEmpty(thesaurus)) {
        Ember.get(this, 'flashMessages').warning('No thesaurus found! Re-directing to list...');
        this.replaceWith('record.show.edit.keywords');

        return;
      }

      if (!Ember.isArray(thesaurus.keyword)) {
        Ember.set(thesaurus, 'keyword', Ember.A());
      }

      return Ember.Object.create({
        id: thesaurusId,
        keywords: thesaurus,
        model: model,
        path: `json.metadata.resourceInfo.keyword.${thesaurusId}`,
        thesaurus: this.keyword.findById(thesaurus.thesaurus.identifier[0].identifier)
      });
    },

    subbar: 'control/subbar-thesaurus',

    // clearSubbar: function() {
    //   this.controllerFor('record.show.edit')
    //     .set('subbar', null);
    // }.on('deactivate'),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controllerFor('record.show.edit').setProperties({
        subbar: this.subbar,
        onCancel: this.setupModel,
        cancelScope: this,
        thesaurusId: this.thesaurusId
      });
    },

    actions: {
      willTransition: function willTransition(transition) {
        let parent = this.routeName.substring(0, this.routeName.lastIndexOf('.'));

        let subbar = transition.targetName === parent + '.index' ? this.controllerFor(parent).get('subbar') : null;

        this.controllerFor('record.show.edit').set('subbar', subbar);
      },
      selectKeyword(node, path) {
        let model = this.currentRouteModel();
        let keywords = model.get('model').get(model.get('path'));
        let kw = keywords.keyword;
        let target = kw.findBy('identifier', node.uuid);

        if (node.isSelected && target === undefined) {
          let pathStr = '';

          if (Ember.isArray(path)) {
            pathStr = path.reduce(function (prev, item) {
              prev = prev ? `${prev} > ${item.label}` : item.label;

              return prev;
            }, '');
          }

          kw.pushObject({
            identifier: node.uuid,
            keyword: keywords.fullPath && pathStr ? pathStr : node.label,
            path: pathStr.split(' > ').slice(0, pathStr.length - 1)
          });
        } else {
          kw.removeObject(target);
        }
      },
      removeKeyword() {
        this.send('deleteKeyword', ...arguments);
      },
      changeFullPath(evt) {
        let model = this.currentRouteModel();
        let keywords = model.get('model').get(model.get('path'));
        let kw = Ember.get(keywords, 'keyword');
        let val = evt.target.checked;

        Ember.set(keywords, 'fullPath', val);

        kw.forEach(function (curr) {
          if (val) {
            Ember.set(curr, 'keyword', curr.path.join(' > '));
          } else {
            let words = curr.keyword.split(' > ');
            Ember.set(curr, 'keyword', words[words.length - 1]);
          }
        });
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/keywords/thesaurus/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "mG8cZdVY", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"lead\"],[9],[0,\"Editing Thesaurus #\"],[1,[23,[\"model\",\"id\"]],false],[0,\"\\n  \"],[7,\"small\"],[11,\"class\",\"text-muted\"],[9],[1,[23,[\"model\",\"thesaurus\",\"citation\",\"title\"]],false],[10],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n    \"],[7,\"ul\"],[11,\"class\",\"nav nav-tabs\"],[11,\"role\",\"tablist\"],[9],[0,\"\\n      \"],[7,\"li\"],[11,\"role\",\"presentation\"],[11,\"class\",\"active\"],[9],[0,\"\\n        \"],[7,\"a\"],[11,\"href\",\"#md-keyword-tree\"],[11,\"aria-controls\",\"md-keyword-tree\"],[11,\"role\",\"tab\"],[11,\"data-toggle\",\"tab\"],[9],[0,\"Tree\"],[10],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"li\"],[11,\"role\",\"presentation\"],[9],[0,\"\\n        \"],[7,\"a\"],[11,\"href\",\"#md-keyword-search\"],[11,\"aria-controls\",\"md-keyword-search\"],[11,\"role\",\"tab\"],[11,\"data-toggle\",\"tab\"],[9],[0,\"Search\"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"tab-content\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"role\",\"tabpanel\"],[11,\"class\",\"md-keyword-tree tab-pane fade in active\"],[11,\"id\",\"md-keyword-tree\"],[9],[0,\"\\n        \"],[1,[27,\"tree-view\",null,[[\"model\",\"selected\",\"select\",\"disableCheck\"],[[23,[\"model\",\"thesaurus\",\"keywords\"]],[27,\"get\",[[23,[\"model\",\"model\"]],[27,\"concat\",[[23,[\"model\",\"path\"]],\".keyword\"],null]],null],[27,\"route-action\",[\"selectKeyword\"],null],true]]],false],[0,\"\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"role\",\"tabpanel\"],[11,\"class\",\"tab-pane fade\"],[11,\"id\",\"md-keyword-search\"],[9],[0,\"\\n        \"],[1,[27,\"tree-search\",null,[[\"model\",\"selected\",\"select\"],[[23,[\"model\",\"thesaurus\",\"keywords\"]],[27,\"get\",[[23,[\"model\",\"model\"]],[27,\"concat\",[[23,[\"model\",\"path\"]],\".keyword\"],null]],null],[27,\"route-action\",[\"selectKeyword\"],null]]]],false],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\\n  \"],[7,\"div\"],[11,\"class\",\"col-md-6\"],[9],[0,\"\\n    \"],[7,\"div\"],[9],[0,\"\\n      \"],[7,\"h4\"],[11,\"class\",\"inline-block\"],[9],[0,\"Selected Keywords\"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"checkbox pull-right\"],[9],[0,\"\\n        \"],[7,\"label\"],[9],[0,\"\\n          \"],[7,\"input\"],[11,\"name\",\"fullPath\"],[12,\"checked\",[23,[\"model\",\"keywords\",\"fullPath\"]]],[12,\"onChange\",[27,\"route-action\",[\"changeFullPath\"],null]],[11,\"type\",\"checkbox\"],[9],[10],[0,\"\\n            Full Path\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n    \"],[1,[27,\"object/md-keyword-list\",null,[[\"model\",\"deleteKeyword\",\"editThesaurus\"],[[27,\"get\",[[23,[\"model\",\"model\"]],[23,[\"model\",\"path\"]]],null],[27,\"route-action\",[\"removeKeyword\"],null],false]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/keywords/thesaurus/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.metadata');
      Ember.set(model, 'resourceLineage', Ember.getWithDefault(model, 'resourceLineage', []));
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
    },

    actions: {
      editLineage(id) {
        this.transitionTo('record.show.edit.lineage.lineageobject', id);
      } //,
      // templateClass() {
      //   return Ember.Object.extend({
      //     init() {
      //       this._super(...arguments);
      //       //this.set('authority', {});
      //     }
      //   });
      // }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "gscdMSpN", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Lineage\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-objectroute-table\",null,[[\"items\",\"header\",\"shadow\",\"buttonText\",\"ellipsis\",\"previewTemplate\",\"profilePath\",\"editItem\",\"hideIndex\",\"condensed\",\"verticalButtons\",\"addSubbar\"],[[23,[\"model\",\"json\",\"metadata\",\"resourceLineage\"]],\"Lineage\",true,\"Add Lineage Object\",false,\"object/md-lineage/preview\",\"record.lineage\",[27,\"route-action\",[\"editLineage\"],null],true,true,true,\"md-subbar-extra\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/citation/identifier/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    model(params) {
      this.set('identifierId', params.identifier_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let identifierId = this.identifierId;
      let model = this.modelFor('record.show.edit.lineage.lineageobject.citation');
      let identifiers = Ember.get(model, 'identifier');
      let identifier = identifierId && Ember.isArray(identifiers) ? identifiers.get(identifierId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(identifier)) {
        this.flashMessages.warning('No identifier found! Re-directing to Citation...');
        this.replaceWith('record.show.edit.lineage.lineageobject.citation');

        return;
      }

      return identifier;
    },
    actions: {
      goBack() {
        this.transitionTo('record.show.edit.lineage.lineageobject.citation');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/citation/identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "tlnCAhd0", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Alternate Identifier: \"],[1,[23,[\"model\",\"identifier\"]],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[27,\"compute\",[[27,\"route-action\",[\"parentModel\"],null]],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"model\",\"profilePath\",\"data-spy\"],[[23,[\"model\"]],\"record.lineage.citation.identifier\",\"Identifier\"]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[\"Back to Lineage Citation\",\"arrow-left\",[27,\"route-action\",[\"goBack\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/citation/identifier/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/citation/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    actions: {
      editIdentifier(index) {
        this.transitionTo('record.show.edit.lineage.lineageobject.citation.identifier', index).then(function () {
          this.setScrollTo('identifier');
        }.bind(this));
      },
      goBack() {
        this.transitionTo('record.show.edit.lineage.lineageobject');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/citation/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "xGsCJr7W", "block": "{\"symbols\":[\"citation\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"Editing Citation\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[27,\"compute\",[[27,\"route-action\",[\"parentModel\"],null]],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n      \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"profilePath\",\"editIdentifier\"],[[22,1,[]],\"record.lineage.citation\",[27,\"route-action\",[\"editIdentifier\"],null]]]],false],[0,\"\\n      \"],[1,[21,\"outlet\"],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[\"Back to Lineage Object\",\"arrow-left\",[27,\"route-action\",[\"goBack\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/citation/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/citation/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params, transition) {
      this.set('citationId', params.citation_id);
      this.set('lineageId', transition.params['record.show.edit.lineage.lineageobject'].lineage_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let citationId = this.citationId;
      let lineageId = this.lineageId;
      let model = this.modelFor('record.show.edit');
      let citations = model.get('json.metadata.resourceLineage.' + lineageId + '.citation');
      let citation = citationId && Ember.isArray(citations) ? citations.get(citationId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(citation)) {
        this.flashMessages.warning('No citation found! Re-directing...');
        this.replaceWith('record.show.edit.lineage.lineageobject');

        return;
      }

      return citation;
    },
    actions: {
      parentModel() {
        return this.modelFor('record.show.edit');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "WdMRUr4J", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/citation/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit.main'));
      this.controller.set('lineageId', Ember.get(this.controllerFor('record.show.edit.lineage.lineageobject'), 'lineageId'));
    },
    actions: {
      editCitation(index) {
        this.transitionTo('record.show.edit.lineage.lineageobject.citation', index).then(function () {
          this.setScrollTo('citation');
        }.bind(this));
      },
      editSource(index) {
        this.transitionTo('record.show.edit.lineage.lineageobject.source', index).then(function () {
          this.setScrollTo('source');
        }.bind(this));
      },
      editProcessStep(index) {
        this.transitionTo('record.show.edit.lineage.lineageobject.step', index).then(function () {
          this.setScrollTo('process-step');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "eR6YDBuN", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Lineage #\"],[1,[21,\"lineageId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-lineage\",null,[[\"model\",\"profilePath\",\"ellipsis\",\"editCitation\",\"editProcessStep\",\"editSource\"],[[23,[\"model\"]],\"record.lineage\",true,[27,\"route-action\",[\"editCitation\"],null],[27,\"route-action\",[\"editProcessStep\"],null],[27,\"route-action\",[\"editSource\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Lineage List\",\"arrow-left\",\"record.show.edit.lineage\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    breadCrumb: Ember.computed('lineageId', function () {
      return {
        title: Ember.get(this, 'lineageId'),
        linkable: true
      };
    }),

    model(params) {
      this.set('lineageId', params.lineage_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      //this.controller.set('parentModel', this.modelFor('record.show.edit.main'));
      this.controller.set('lineageId', Ember.get(this, 'lineageId'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let lineageId = Ember.get(this, 'lineageId');
      let model = this.modelFor('record.show.edit');
      let objects = model.get('json.metadata.resourceLineage');
      let lineage = lineageId && Ember.isArray(objects) ? objects.get(lineageId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(lineage)) {
        Ember.get(this, 'flashMessages').warning('No lineage object found! Re-directing to list...');
        this.replaceWith('record.show.edit.lineage');

        return;
      }

      return lineage;
    }
  });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/source/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    setupController: function setupController(controller) {
      // Call _super for default behavior
      this._super(...arguments);

      let sourceId = this.paramsFor('record.show.edit.lineage.lineageobject.source').source_id;

      controller.set('parentModel', this.modelFor('record.show.edit'));
      controller.set('sourceId', sourceId);
    },

    actions: {
      goBack() {
        this.transitionTo('record.show.edit.lineage.lineageobject');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/source/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "46pFb+Qz", "block": "{\"symbols\":[\"source\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"Editing Source #\"],[1,[21,\"sourceId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[27,\"compute\",[[27,\"route-action\",[\"parentModel\"],null]],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n      \"],[1,[27,\"object/md-source\",null,[[\"model\",\"profilePath\"],[[22,1,[]],\"record.lineage.source\"]]],false],[0,\"\\n      \"],[1,[21,\"outlet\"],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[\"Back to Lineage Object\",\"arrow-left\",[27,\"route-action\",[\"goBack\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/source/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/source/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params, transition) {
      this.set('sourceId', params.source_id);
      this.set('lineageId', transition.params['record.show.edit.lineage.lineageobject'].lineage_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let sourceId = this.sourceId;
      let lineageId = this.lineageId;
      let model = this.modelFor('record.show.edit');
      let sources = model.get('json.metadata.resourceLineage.' + lineageId + '.source');
      let source = sourceId && Ember.isArray(sources) ? sources.get(sourceId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(source)) {
        this.flashMessages.warning('No source found! Re-directing...');
        this.replaceWith('record.show.edit.lineage.lineageobject');

        return;
      }

      return source;
    },
    actions: {
      parentModel() {
        return this.modelFor('record.show.edit');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/source/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "sFHwhts4", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/source/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/step/citation/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    model(params, transition) {
      this.set('citationId', params.citation_id);
      this.set('stepId', transition.params['record.show.edit.lineage.lineageobject.step'].step_id);
      this.set('lineageId', transition.params['record.show.edit.lineage.lineageobject'].lineage_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controller.set('stepId', this.stepId);
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let citationId = this.citationId;
      let lineageId = this.lineageId;
      let stepId = this.stepId;
      let model = this.modelFor('record.show.edit');
      let citations = model.get(`json.metadata.resourceLineage.${lineageId}.processStep.${stepId}.reference`);
      let citation = citationId && Ember.isArray(citations) ? citations.get(citationId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(citation)) {
        this.flashMessages.warning('No citation found! Re-directing...');
        this.replaceWith('record.show.edit.lineage.lineageobject.step');

        return;
      }

      return citation;
    },
    actions: {
      parentModel() {
        return this.modelFor('record.show.edit');
      },
      goBack() {
        this.transitionTo('record.show.edit.lineage.lineageobject.step');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/step/citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ul06UM+J", "block": "{\"symbols\":[\"citation\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"Editing Step #\"],[1,[21,\"stepId\"],false],[0,\" Citation\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[27,\"compute\",[[27,\"route-action\",[\"parentModel\"],null]],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n      \"],[1,[27,\"object/md-citation\",null,[[\"model\",\"profilePath\",\"simpleIdentifier\"],[[22,1,[]],\"record.lineage.processStep.reference\",true]]],false],[0,\"\\n      \"],[1,[21,\"outlet\"],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[[27,\"concat\",[\"Back to Step #\",[23,[\"stepId\"]]],null],\"arrow-left\",[27,\"route-action\",[\"goBack\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/step/citation/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/step/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit.main'));
      this.controller.set('stepId', Ember.get(this.controllerFor('record.show.edit.lineage.lineageobject.step'), 'stepId'));
    },
    actions: {
      editCitation(index) {
        this.transitionTo('record.show.edit.lineage.lineageobject.step.citation', index).then(function () {
          this.setScrollTo('citation');
        }.bind(this));
      },
      goBack() {
        this.transitionTo('record.show.edit.lineage.lineageobject');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/step/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VnGldKNk", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Process Step #\"],[1,[21,\"stepId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-process-step\",null,[[\"model\",\"profilePath\",\"itemId\",\"editCitation\"],[[23,[\"model\"]],\"record.lineage.processStep\",[23,[\"stepId\"]],[27,\"route-action\",[\"editCitation\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[\"Back to Lineage\",\"arrow-left\",[27,\"route-action\",[\"goBack\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/step/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/lineageobject/step/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params, transition) {
      this.set('stepId', params.step_id);
      this.set('lineageId', transition.params['record.show.edit.lineage.lineageobject'].lineage_id);

      return this.setupModel();
    },

    breadCrumb: Ember.computed('stepId', function () {
      return {
        title: 'Step ' + Ember.get(this, 'stepId'),
        linkable: true
      };
    }),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controller.set('stepId', Ember.get(this, 'stepId'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let stepId = Ember.get(this, 'stepId');
      let lineageId = Ember.get(this, 'lineageId');
      let model = this.modelFor('record.show.edit');
      let steps = model.get('json.metadata.resourceLineage.' + lineageId + '.processStep');
      let step = stepId && Ember.isArray(steps) ? steps.get(stepId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(step)) {
        Ember.get(this, 'flashMessages').warning('No Process Step found! Re-directing...');
        this.replaceWith('record.show.edit.lineage.lineageobject');

        return;
      }

      return step;
    },
    actions: {
      parentModel() {
        return this.modelFor('record.show.edit');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/step/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "sW7jCzIh", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/step/template.hbs" } });
});
;define("mdeditor/pods/record/show/edit/lineage/lineageobject/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "lxenLpPM", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/lineageobject/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/lineage/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/lineage/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "R1rd/bRq", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/lineage/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/main/citation/identifier/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    model(params) {
      this.set('identifierId', params.identifier_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit.main'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let identifierId = this.identifierId;
      let model = this.modelFor('record.show.edit.main');
      let identifiers = model.get('json.metadata.resourceInfo.citation.identifier');
      let identifier = identifierId && Ember.isArray(identifiers) ? identifiers.get(identifierId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(identifier)) {
        this.flashMessages.warning('No identifier found! Re-directing to citation...');
        this.replaceWith('record.show.edit.main.citation');

        return;
      }

      return identifier;
    }
  });
});
;define("mdeditor/pods/record/show/edit/main/citation/identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yeRw9Ty1", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1 section-header\"],[9],[0,\"\\n  Editing Identifier: \"],[1,[23,[\"model\",\"identifier\"]],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"class\",\"model\",\"profilePath\",\"data-spy\"],[\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\",[23,[\"model\"]],\"record.main.citation.identifier\",\"Identifier\"]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Citation\",\"arrow-left\",\"record.show.edit.main.citation\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/main/citation/identifier/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/main/citation/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    // afterModel() {
    //   this.setupModel();
    // },
    //
    // setupController: function () {
    //   // Call _super for default behavior
    //   this._super(...arguments);
    //
    //   this.controllerFor('record.show.edit')
    //     .setProperties({
    //       onCancel: this.setupModel
    //     });
    // },
    //
    // setupModel() {
    //   // let model = this.currentRouteModel();
    //   // let citation = get(model, 'json.metadata.resourceInfo.citation');
    //   //
    //   // set(citation, 'responsibleParty', getWithDefault(citation,
    //   //   'responsibleParty', []));
    //   // set(citation, 'presentationForm', getWithDefault(citation,
    //   //   'presentationForm', []));
    //   // set(citation, 'onlineResource', getWithDefault(citation,
    //   //   'onlineResource', []));
    //   // set(citation, 'identifier', getWithDefault(citation, 'identifier', []));
    //   // set(citation, 'graphic', getWithDefault(citation, 'graphic', []));
    //   // set(citation, 'series', getWithDefault(citation, 'series', {}));
    // },

    actions: {
      editIdentifier(index) {
        this.transitionTo('record.show.edit.main.citation.identifier', index).then(function () {
          this.setScrollTo('identifier');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/main/citation/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "jxftOIva", "block": "{\"symbols\":[\"citation\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1 section-header\"],[9],[0,\"Editing Citation\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\",\"citation\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n      \"],[1,[27,\"object/md-citation\",null,[[\"class\",\"model\",\"profilePath\",\"editIdentifier\"],[\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\",[22,1,[]],\"record.main.citation\",[27,\"route-action\",[\"editIdentifier\"],null]]]],false],[0,\"\\n      \"],[1,[21,\"outlet\"],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Main\",\"arrow-left\",\"record.show.edit.main\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/main/citation/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/main/citation/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/main/citation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "q56iUoGx", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"liquid-outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/main/citation/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/main/index/route', ['exports', 'mdeditor/mixins/scroll-to', 'mdeditor/pods/components/object/md-citation/component'], function (exports, _scrollTo, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.metadata.resourceInfo');
      Ember.set(model, 'timePeriod', Ember.getWithDefault(model, 'timePeriod', {}));
      Ember.set(model, 'defaultResourceLocale', Ember.getWithDefault(model, 'defaultResourceLocale', {}));
      Ember.set(model, 'pointOfContact', Ember.getWithDefault(model, 'pointOfContact', []));
      Ember.set(model, 'status', Ember.getWithDefault(model, 'status', []));
      Ember.set(model, 'citation', Ember.getWithDefault(model, 'citation', (0, _component.formatCitation)({})));
      Ember.set(model, 'credit', Ember.getWithDefault(model, 'credit', []));
      Ember.set(model, 'resourceType', Ember.getWithDefault(model, 'resourceType', []));
      Ember.set(model, 'resourceMaintenance', Ember.getWithDefault(model, 'resourceMaintenance', []));
      Ember.set(model, 'graphicOverview', Ember.getWithDefault(model, 'graphicOverview', []));
    },
    actions: {
      editCitation(scrollTo) {
        this.transitionTo('record.show.edit.main.citation').then(function () {
          this.setScrollTo(scrollTo);
        }.bind(this));
      },
      editId() {
        this.transitionTo('record.show.edit.metadata.identifier', {
          queryParams: {
            scrollTo: 'identifier'
          }
        });
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/main/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "TTNhgivE", "block": "{\"symbols\":[\"resource\",\"credit\",\"editing\"],\"statements\":[[4,\"with\",[[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\"]]],null,{\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"form\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n      \"],[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n        Editing \"],[7,\"em\"],[9],[1,[23,[\"model\",\"title\"]],false],[10],[0,\"\\n        \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n      \"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\",\"required\"],[\"Basic Information\",true,false,\"record.main.basicInformation\",\"Basic Information\",true]],{\"statements\":[[0,\"\\n\"],[4,\"layout/md-wrap\",null,[[\"data-spy\",\"class\",\"profilePath\"],[\"Record ID\",\"md-embedded\",\"record.main.recordId\"]],{\"statements\":[[0,\"        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n          \"],[7,\"label\"],[11,\"class\",\"required\"],[9],[0,\"Record ID\"],[10],[0,\"\\n          \"],[7,\"div\"],[11,\"class\",\"input-group input-group-md\"],[9],[0,\"\\n            \"],[1,[27,\"input/md-input\",null,[[\"valuePath\",\"model\",\"placeholder\",\"disabled\"],[\"recordId\",[23,[\"model\"]],\"Assigned Record ID\",true]]],false],[0,\"\\n            \"],[7,\"span\"],[11,\"class\",\"input-group-btn\"],[9],[0,\"\\n                \"],[7,\"button\"],[11,\"class\",\"btn btn-warning\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"route-action\",[\"editId\"],null]]],[9],[0,\"\\n                  \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\"\\n                  Edit\"],[10],[0,\"\\n                  \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"tooltipClassName\"],[\"Edit the metadata id\",\"ember-tooltip md-tooltip warning\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\",\"label\",\"required\",\"profilePath\",\"data-spy\",\"class\"],[[23,[\"model\",\"title\"]],\"Enter the title for the resource.\",\"Title\",true,\"record.main.title\",\"Title\",\"md-embedded\"]]],false],[0,\"\\n\\n\"],[4,\"if\",[[27,\"is-array\",[[22,1,[\"status\"]]],null]],null,{\"statements\":[[0,\"        \"],[1,[27,\"input/md-codelist-multi\",null,[[\"value\",\"label\",\"required\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"placeholder\",\"profilePath\",\"data-spy\",\"class\"],[[22,1,[\"status\"]],\"Status\",true,true,true,false,\"progress\",\"Select the current status\",\"record.main.status\",\"Status\",\"md-embedded\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"shadow\",\"data-spy\",\"required\",\"profilePath\"],[\"Default Locale\",false,false,true,\"record.main.defaultLocale\"]],{\"statements\":[[0,\"          \"],[1,[27,\"object/md-locale\",null,[[\"model\"],[[22,1,[\"defaultResourceLocale\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[27,\"is-array\",[[22,1,[\"resourceType\"]]],null]],null,{\"statements\":[[0,\"        \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n            \"],[1,[27,\"object/md-resource-type-array\",null,[[\"plain\",\"value\",\"required\",\"data-spy\",\"profilePath\"],[false,[22,1,[\"resourceType\"]],true,\"Resource Types\",\"record.main.resourceType\"]]],false],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[27,\"is-array\",[[22,1,[\"pointOfContact\"]]],null]],null,{\"statements\":[[0,\"        \"],[1,[27,\"object/md-party-array\",null,[[\"title\",\"pluralTitle\",\"data-spy\",\"collapsible\",\"collapsed\",\"required\",\"value\",\"profilePath\"],[\"Point Of Contact\",\"Points of Contact\",\"Point Of Contact\",true,false,true,[22,1,[\"pointOfContact\"]],\"record.main.pointOfContact\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[1,[27,\"object/md-citation/preview\",null,[[\"profilePath\",\"citation\",\"muted\",\"required\",\"editCitation\"],[\"record.main.citation\",[22,1,[\"citation\"]],true,true,[27,\"route-action\",[\"editCitation\"],null]]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"required\"],[\"Description\",true,false,\"record.main.description\",true]],{\"statements\":[[0,\"          \"],[1,[27,\"input/md-markdown-area\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\",\"required\"],[[22,1,[\"abstract\"]],\"record.main.abstract\",\"Abstract\",\"Enter an Abstract describing the resource.\",true]]],false],[0,\"\\n\\n          \"],[1,[27,\"input/md-markdown-area\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\",\"maxlength\"],[[22,1,[\"shortAbstract\"]],\"record.main.shortAbstract\",\"Short Abstract\",\"A short description of the resource. Max of 300 characters.\",300]]],false],[0,\"\\n\\n          \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\"],[[22,1,[\"purpose\"]],\"record.main.purpose\",\"Purpose\",\"Enter text describing the reason for creating the resource.\"]]],false],[0,\"\\n\\n          \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\"],[[22,1,[\"supplementalInfo\"]],\"record.main.supplementalInfo\",\"Supplemental Information\",\"Enter text describing other descriptive information about the resource.\"]]],false],[0,\"\\n\\n          \"],[1,[27,\"input/md-textarea\",null,[[\"value\",\"profilePath\",\"label\",\"placeholder\"],[[22,1,[\"environmentDescription\"]],\"record.main.environmentDescription\",\"Environment Description\",\"Description of the processing environment, for example the software, hardware, or the computer operating system.\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,1,[\"timePeriod\"]]],null,{\"statements\":[[0,\"        \"],[1,[27,\"object/md-time-period\",null,[[\"model\",\"profilePath\",\"data-spy\",\"label\"],[[22,1,[\"timePeriod\"]],\"record.main.timePeriod\",\"Time Period\",\"Time Period\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"object/md-object-table\",null,[[\"items\",\"header\",\"data-spy\",\"profilePath\",\"buttonText\",\"ellipsis\",\"attributes\",\"collapsible\"],[[22,1,[\"resourceMaintenance\"]],\"Maintenance\",\"Maintenance\",\"record.main.maintenance\",\"Add Maintenance\",true,\"frequency\",true]],{\"statements\":[[0,\"          \"],[1,[27,\"object/md-maintenance\",null,[[\"model\",\"profilePath\"],[[22,3,[]],\"record.main.maintenance\"]]],false],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"\\n\"],[4,\"if\",[[27,\"is-array\",[[22,1,[\"graphicOverview\"]]],null]],null,{\"statements\":[[0,\"        \"],[1,[27,\"object/md-graphic-array\",null,[[\"model\",\"data-spy\",\"button-text\",\"label\",\"profilePath\"],[[22,1,[\"graphicOverview\"]],\"Graphic Overview\",\"Add Graphic\",\"Graphic Overview\",\"record.main.graphicOverview\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[27,\"is-array\",[[22,1,[\"credit\"]]],null]],null,{\"statements\":[[4,\"object/md-simple-array-table\",null,[[\"data-spy\",\"title\",\"profilePath\",\"value\"],[\"Credit\",\"Credit\",\"record.main.credit\",[22,1,[\"credit\"]]]],{\"statements\":[[0,\"            \"],[7,\"td\"],[9],[0,\"\\n                \"],[1,[27,\"input/md-input\",null,[[\"value\",\"placeholder\"],[[22,2,[\"item\",\"value\"]],\"Additional credits for the resource.\"]]],false],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\",\"refresh\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null],[23,[\"model\",\"profile\"]]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/main/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/main/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/main/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "vYV6IYEu", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/main/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/alternate/identifier/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    model(params) {
      this.set('identifierId', params.identifier_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let identifierId = this.identifierId;
      let model = this.modelFor('record.show.edit.metadata.alternate');
      let identifiers = Ember.get(model, 'identifier');
      let identifier = identifierId && Ember.isArray(identifiers) ? identifiers.get(identifierId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(identifier)) {
        this.flashMessages.warning('No identifier found! Re-directing to Alternate Metadata...');
        this.replaceWith('record.show.edit.metadata.alternate');

        return;
      }

      return identifier;
    },
    actions: {
      goBack() {
        this.transitionTo('record.show.edit.metadata.alternate');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/metadata/alternate/identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ryCZGKaD", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1 section-header\"],[9],[0,\"\\n  Editing Alternate Identifier: \"],[1,[23,[\"model\",\"identifier\"]],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[27,\"compute\",[[27,\"route-action\",[\"parentModel\"],null]],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"class\",\"model\",\"profilePath\",\"data-spy\"],[\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\",[23,[\"model\"]],\"record.metadata.alternateMetadata.identifier\",\"Identifier\"]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"click\"],[\"Back to Alternate\",\"arrow-left\",[27,\"route-action\",[\"goBack\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/alternate/identifier/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/alternate/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    actions: {
      editIdentifier(index) {
        this.transitionTo('record.show.edit.metadata.alternate.identifier', index).then(function () {
          this.setScrollTo('identifier');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/metadata/alternate/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8jwOEKvu", "block": "{\"symbols\":[\"citation\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1 section-header\"],[9],[0,\"Editing Alternate Metadata Reference\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[27,\"compute\",[[27,\"route-action\",[\"parentModel\"],null]],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n      \"],[1,[27,\"object/md-citation\",null,[[\"class\",\"model\",\"profilePath\",\"editIdentifier\"],[\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\",[22,1,[]],\"record.metadata.alternateMetadata\",[27,\"route-action\",[\"editIdentifier\"],null]]]],false],[0,\"\\n      \"],[1,[21,\"outlet\"],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Metadata\",\"arrow-left\",\"record.show.edit.metadata\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/alternate/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/alternate/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params) {
      this.set('citationId', params.citation_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let citationId = this.citationId;
      let model = this.modelFor('record.show.edit');
      let citations = model.get('json.metadata.metadataInfo.alternateMetadataReference');
      let citation = citationId && Ember.isArray(citations) ? citations.get(citationId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(citation)) {
        this.flashMessages.warning('No citation found! Re-directing...');
        this.replaceWith('record.show.edit.metadata');

        return;
      }

      return citation;
    },
    actions: {
      parentModel() {
        return this.modelFor('record.show.edit');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/metadata/alternate/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "O85764LS", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/alternate/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/identifier/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    model() {
      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let model = this.modelFor('record.show.edit');

      //make sure the identifier exists
      model.set('json.metadata.metadataInfo.metadataIdentifier', Ember.getWithDefault(model, 'json.metadata.metadataInfo.metadataIdentifier', {}));

      return Ember.get(model, 'json.metadata.metadataInfo.metadataIdentifier');
    }
  });
});
;define("mdeditor/pods/record/show/edit/metadata/identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Dig/SO02", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1 section-header\"],[9],[0,\"\\n  Editing Metadata Identifier: \"],[1,[23,[\"model\",\"identifier\"]],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"class\",\"model\",\"profilePath\",\"confirmIdentifier\",\"data-spy\"],[\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\",[23,[\"model\"]],\"record.metadata.identifier\",true,\"Metadata Identifier\"]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Metadata\",\"arrow-left\",\"record.show.edit.metadata\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/identifier/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.metadata.metadataInfo');

      Ember.run.once(this, () => {
        Ember.set(model, 'metadataContact', Ember.getWithDefault(model, 'metadataContact', []));
        Ember.set(model, 'metadataDate', Ember.getWithDefault(model, 'metadataDate', []));
        Ember.set(model, 'metadataMaintenance', Ember.getWithDefault(model, 'metadataMaintenance', {}));
        Ember.set(model, 'metadataOnlineResource', Ember.getWithDefault(model, 'metadataOnlineResource', []));
        Ember.set(model, 'defaultMetadataLocale', Ember.getWithDefault(model, 'defaultMetadataLocale', {}));
        Ember.set(model, 'metadataIdentifier', Ember.getWithDefault(model, 'metadataIdentifier', {}));
        Ember.set(model, 'parentMetadata', Ember.getWithDefault(model, 'parentMetadata', {}));
        Ember.set(model, 'alternateMetadataReference', Ember.getWithDefault(model, 'alternateMetadataReference', []));
        Ember.set(m, 'json.metadataRepository', Ember.getWithDefault(m, 'json.metadataRepository', []));
      });
    },

    actions: {
      editIdentifier() {
        this.transitionTo('record.show.edit.metadata.identifier').then(function () {
          this.setScrollTo('metadata-identifier');
        }.bind(this));
      },
      editAlternate(index) {
        this.transitionTo('record.show.edit.metadata.alternate.index', index).then(function () {
          this.setScrollTo('alternate-metadata');
        }.bind(this));
      },
      editParent() {
        this.transitionTo('record.show.edit.metadata.parent').then(function () {
          this.setScrollTo('parent-metadata');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/metadata/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6Vcv1F50", "block": "{\"symbols\":[\"metadata\",\"identifier\"],\"statements\":[[4,\"with\",[[23,[\"model\",\"json\",\"metadata\",\"metadataInfo\"]]],null,{\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"form\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n      Editing Metadata Information\\n      \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"data-spy\"],[\"Basic Information\",true,false,\"record.metadata.basicInformation\",\"Basic Information\"]],{\"statements\":[[0,\"\\n      \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"label\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"placeholder\",\"profilePath\",\"data-spy\",\"class\"],[[22,1,[\"metadataStatus\"]],\"Metadata Status\",true,true,false,\"progress\",\"Select the current status\",\"record.metadata.metadataStatus\",false,\"md-embedded\"]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"profilePath\",\"data-spy\",\"shadow\",\"class\"],[\"record.metadata.metadataDate\",[23,[\"flase\"]],false,\"md-embedded\"]],{\"statements\":[[0,\"        \"],[1,[27,\"object/md-date-array\",null,[[\"value\",\"plain\",\"data-spy\"],[[22,1,[\"metadataDate\"]],true,false]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n    \"],[1,[27,\"object/md-party-array\",null,[[\"title\",\"data-spy\",\"collapsible\",\"collapsed\",\"required\",\"value\",\"profilePath\"],[\"Metadata Contact\",\"Metadata Contacts\",true,false,true,[22,1,[\"metadataContact\"]],\"record.metadata.metadataContact\"]]],false],[0,\"\\n\\n\"],[4,\"with\",[[23,[\"model\",\"json\",\"metadata\",\"metadataInfo\",\"metadataIdentifier\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"profilePath\",\"required\",\"btnText\",\"btnClass\",\"btnAction\",\"btnIcon\"],[\"Metadata Identifier\",true,false,\"record.metadata.metadataIdentifier\",false,\"Edit\",\"success\",[27,\"route-action\",[\"editIdentifier\"],null],\"pencil\"]],{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n        \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal\"],[9],[0,\"\\n          \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Identifier\",[22,2,[\"identifier\"]]]]],false],[0,\"\\n\"],[0,\"          \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Namespace\",[22,2,[\"namespace\"]]]]],false],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[2]},null],[0,\"\\n    \"],[1,[27,\"object/md-citation/preview\",null,[[\"profilePath\",\"citation\",\"title\",\"muted\",\"editCitation\"],[\"record.metadata.parentMetadata\",[22,1,[\"parentMetadata\"]],\"Parent Metadata\",true,[27,\"route-action\",[\"editParent\"],null]]]],false],[0,\"\\n\\n    \"],[1,[27,\"object/md-repository-array\",null,[[\"value\",\"data-spy\"],[[23,[\"model\",\"json\",\"metadataRepository\"]],\"Metadata Repository\"]]],false],[0,\"\\n\\n    \"],[1,[27,\"object/md-online-resource-array\",null,[[\"model\",\"profilePath\",\"data-spy\"],[[22,1,[\"metadataOnlineResource\"]],\"record.metadata.onlineResource\",\"Online Resources\"]]],false],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"content\",\"profilePath\"],[\"Metadata Maintenance\",true,[22,1,[\"metadataMaintenance\"]],\"record.metadata.maintenance\"]],{\"statements\":[[0,\"      \"],[1,[27,\"object/md-maintenance\",null,[[\"model\",\"profilePath\"],[[22,1,[\"metadataMaintenance\"]],\"record.metadata.maintenance\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"shadow\",\"data-spy\",\"profilePath\",\"collapsible\",\"content\"],[\"Default Metadata Locale\",true,\"Default Locale\",\"record.metadata.defaultLocale\",true,[22,1,[\"defaultMetadataLocale\"]]]],{\"statements\":[[0,\"      \"],[1,[27,\"object/md-locale\",null,[[\"model\"],[[22,1,[\"defaultMetadataLocale\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[1,[27,\"object/md-citation-array\",null,[[\"model\",\"profilePath\",\"data-spy\",\"editItem\",\"label\"],[[22,1,[\"alternateMetadataReference\"]],\"record.metadata.alternateMetadataReference\",\"Alternate Metadata\",[27,\"route-action\",[\"editAlternate\"],null],\"Alternate Metadata Reference\"]]],false],[0,\"\\n\\n    \"],[1,[21,\"outlet\"],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/parent/identifier/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    model(params) {
      this.set('identifierId', params.identifier_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let identifierId = this.identifierId;
      let model = this.modelFor('record.show.edit');
      let identifiers = model.get('json.metadata.metadataInfo.parentMetadata.identifier');
      let identifier = identifierId && Ember.isArray(identifiers) ? identifiers.get(identifierId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(identifier)) {
        this.flashMessages.warning('No identifier found! Re-directing to Parent Metadata...');
        this.replaceWith('record.show.edit.metadata.parent.index');

        return;
      }

      return identifier;
    }
  });
});
;define("mdeditor/pods/record/show/edit/metadata/parent/identifier/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "JjLrgbgj", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1 section-header\"],[9],[0,\"\\n  Editing Identifier: \"],[1,[23,[\"model\",\"identifier\"]],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[1,[27,\"object/md-identifier\",null,[[\"class\",\"model\",\"profilePath\",\"data-spy\"],[\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\",[23,[\"model\"]],\"record.metadata.parentMetadata.identifier\",\"Identifier\"]]],false],[0,\"\\n  \"],[1,[21,\"outlet\"],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Parent Metadata\",\"arrow-left\",\"record.show.edit.metadata.parent\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/parent/identifier/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/parent/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    afterModel(model) {
      this._super(...arguments);

      if (Ember.isNone(Ember.get(model, 'json.metadata.metadataInfo.parentMetadata'))) {
        this.flashMessages.warning('No Parent Citation found! Re-directing to Metadata...');
        this.replaceWith('record.show.edit.metadata', {
          queryParams: {
            scrollTo: 'parent-metadata'
          }
        });
      }

      return model;
    },

    actions: {
      editIdentifier(index) {
        this.transitionTo('record.show.edit.metadata.parent.identifier', index).then(function () {
          this.setScrollTo('identifier');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/metadata/parent/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uKg2DQ4W", "block": "{\"symbols\":[\"citation\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1 section-header\"],[9],[0,\"Editing Parent Metadata Citation\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"json\",\"metadata\",\"metadataInfo\",\"parentMetadata\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n      \"],[1,[27,\"object/md-citation\",null,[[\"class\",\"model\",\"profilePath\",\"editIdentifier\"],[\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\",[22,1,[]],\"record.metadata.parentMetadata\",[27,\"route-action\",[\"editIdentifier\"],null]]]],false],[0,\"\\n      \"],[1,[21,\"outlet\"],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/subbar-link\"],[[\"text\",\"icon\",\"route\"],[\"Back to Metadata\",\"arrow-left\",\"record.show.edit.metadata\"]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/parent/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/parent/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/metadata/parent/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "GcVarPbc", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/parent/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/metadata/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/metadata/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "KWJAVQem", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/metadata/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/route', ['exports', 'mdeditor/mixins/hash-poll'], function (exports, _hashPoll) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_hashPoll.default, {
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        title: 'Edit',
        linkable: false
      };
    },

    /**
     * The profile service
     *
     * @return {Ember.Service} profile
     */
    profile: Ember.inject.service('custom-profile'),

    /**
     * The route activate hook, sets the profile.
     */
    afterModel(model) {
      this._super(...arguments);

      this.profile.set('active', model.get('profile'));
    },

    actions: {
      /**
       * Update the record profile
       *
       * @name   updateProfile
       * @param  {String} profile The new profile.
       */
      // updateProfile(profile) {
      //   this.profile
      //     .set('active', profile);
      //   this.modelFor('record.show.edit')
      //     .save();
      // },

      saveRecord: function saveRecord() {
        let model = this.currentRouteModel();
        model.save().then(() => {
          this.flashMessages.success(`Saved Record: ${model.get('title')}`);
        });
      },

      // destroyRecord: function () {
      //   let model = this.currentRouteModel();
      //   model
      //     .destroyRecord()
      //     .then(() => {
      //       get(this, 'flashMessages')
      //         .success(`Deleted Record: ${model.get('title')}`);
      //       this.replaceWith('records');
      //     });
      // },

      cancelRecord: function cancelRecord() {
        let model = this.currentRouteModel();
        let message = `Cancelled changes to Record: ${model.get('title')}`;
        let controller = this.controller;
        let same = !controller.cancelScope || Ember.getOwner(this).lookup('controller:application').currentPath === Ember.get(controller, 'cancelScope.routeName');

        if (this.get('settings.data.autoSave')) {
          let json = model.get('jsonRevert');

          if (json) {
            model.set('json', JSON.parse(json));

            if (controller.onCancel) {
              Ember.run.once(() => {
                if (same) {
                  controller.onCancel.call(controller.cancelScope || this);
                }
                this.refresh();
                controller.set('onCancel', null);
                controller.set('cancelScope', null);
              });
            }

            this.flashMessages.warning(message);
          }

          return;
        }

        model.reload().then(() => {
          if (controller.onCancel) {
            Ember.run.once(() => {
              if (same) {
                controller.onCancel.call(controller.cancelScope || this);
              }
              this.refresh();
              controller.set('onCancel', null);
              controller.set('cancelScope', null);
            });
          }
          this.flashMessages.warning(message);
        });
      },

      // copyRecord: function () {
      //
      //   get(this, 'flashMessages')
      //     .success(
      //       `Copied Record: ${this.currentRouteModel().get('title')}`);
      //   this.transitionTo('record.new.id', copy(this.currentRouteModel()));
      // },
      getContext() {
        return this;
      }
    }
  });
});
;define('mdeditor/pods/record/show/edit/spatial/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/spatial/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+O95Bu3/", "block": "{\"symbols\":[\"model\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Spatial Information\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[4,\"with\",[[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"object/md-spatial-info\",null,[[\"model\",\"profilePath\"],[[22,1,[]],\"record.spatial\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/spatial/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/spatial/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/spatial/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/3PX6B6k", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"outlet\",null,[[\"class\"],[\"\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/spatial/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/taxonomy/collection/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controller.set('collectionId', Ember.get(this.controllerFor('record.show.edit.taxonomy.collection'), 'collectionId'));
    },
    actions: {
      toList() {
        this.transitionTo('record.show.edit.taxonomy');
      },
      addTaxa() {
        this.controller.model.taxonomicClassification.pushObject({
          _edit: true
        });
      },
      addITIS() {
        this.transitionTo('record.show.edit.taxonomy.collection.itis');
      },
      editSystem(index) {
        this.transitionTo('record.show.edit.taxonomy.collection.system', index).then(function () {
          this.setScrollTo('system');
        }.bind(this));
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/taxonomy/collection/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "KGBUYhDo", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Taxonomy Collection #\"],[1,[21,\"collectionId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"object/md-taxonomy/collection\",null,[[\"model\",\"id\",\"profilePath\",\"editSystem\"],[[23,[\"model\"]],[23,[\"collectionId\"]],\"record.taxonomy.collection\",[27,\"route-action\",[\"editSystem\"],null]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-buttons\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[\"Add New Taxa\",\"plus\",\"btn-info btn-lg\",[27,\"route-action\",[\"addTaxa\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-buttons\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[\"Add Taxa from ITIS\",\"plus\",\"btn-success btn-lg\",[27,\"route-action\",[\"addITIS\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-buttons\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[\"Back to List\",\"arrow-left\",\"btn-primary btn-lg\",[27,\"route-action\",[\"toList\"],null]]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/taxonomy/collection/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/taxonomy/collection/itis/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      this.breadCrumb = {
        "title": "ITIS"
      };
    },
    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controller.set('collectionId', Ember.get(this.controllerFor('record.show.edit.taxonomy.collection'), 'collectionId'));
    },
    actions: {
      toCollection() {
        this.transitionTo('record.show.edit.taxonomy.collection');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/taxonomy/collection/itis/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "zY7lvZOu", "block": "{\"symbols\":[],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Add Taxa from ITIS\"],[7,\"small\"],[9],[0,\" Taxonomy Collection #\"],[1,[21,\"collectionId\"],false],[10],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"control/md-itis\",null,[[\"taxonomy\"],[[23,[\"model\"]]]]],false],[0,\"\\n\\n\"],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control.md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[\"Back to Collection\",\"arrow-left\",\"btn-primary btn-lg\",[27,\"route-action\",[\"toCollection\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/taxonomy/collection/itis/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/taxonomy/collection/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params) {
      this.set('collectionId', params.collection_id);

      return this.setupModel();
    },

    breadCrumb: Ember.computed('collectionId', function () {
      let index = this.collectionId;

      return {
        title: `Collection ${index > 0 ? index : ''}`
        //title: `${get(this, 'collectionId')}: Distributors`
      };
    }),

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      //this.controller.set('parentModel', this.modelFor('record.show.edit.main'));
      this.controller.set('collectionId', this.collectionId);
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let collectionId = this.collectionId;
      let model = this.modelFor('record.show.edit');
      let objects = model.get('json.metadata.resourceInfo.taxonomy');
      let resource = collectionId && Ember.isArray(objects) ? Ember.A(objects).objectAt(collectionId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(resource)) {
        this.flashMessages.warning('No Collection object found! Re-directing to list...');
        this.replaceWith('record.show.edit.taxonomy');

        return;
      }

      return resource;
    }
  });
});
;define('mdeditor/pods/record/show/edit/taxonomy/collection/system/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    setupController: function setupController(controller) {
      // Call _super for default behavior
      this._super(...arguments);

      let systemId = this.paramsFor('record.show.edit.taxonomy.collection.system').system_id;

      controller.set('parentModel', this.modelFor('record.show.edit'));
      controller.set('systemId', systemId);
    },

    actions: {
      goBack() {
        this.transitionTo('record.show.edit.taxonomy.collection');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/taxonomy/collection/system/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "UCJWhrS4", "block": "{\"symbols\":[\"system\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"Editing Taxonomic System #\"],[1,[21,\"systemId\"],false],[0,\"\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[27,\"compute\",[[27,\"route-action\",[\"parentModel\"],null]],null]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[4,\"with\",[[23,[\"model\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"\"],[9],[0,\"\\n      \"],[1,[27,\"object/md-taxonomy/collection/system\",null,[[\"model\",\"profilePath\"],[[22,1,[]],\"record.taxonomy.collection.system\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[\"Back to Collection\",\"arrow-left\",\"btn-primary btn-lg\",[27,\"route-action\",[\"goBack\"],null]]]]]]],false],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/taxonomy/collection/system/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/taxonomy/collection/system/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model(params, transition) {
      this.set('systemId', params.system_id);
      this.set('collectionId', transition.params['record.show.edit.taxonomy.collection'].collection_id);

      return this.setupModel();
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
      this.controllerFor('record.show.edit').setProperties({
        onCancel: this.setupModel,
        cancelScope: this
      });
    },

    setupModel() {
      let systemId = this.systemId;
      let collectionId = this.collectionId;
      let model = this.modelFor('record.show.edit');
      let systems = model.get('json.metadata.resourceInfo.taxonomy.' + collectionId + '.taxonomicSystem');
      let system = systemId && Ember.isArray(systems) ? systems.get(systemId) : undefined;

      //make sure the identifier exists
      if (Ember.isEmpty(system)) {
        this.flashMessages.warning('No Taxonomic System found! Re-directing...');
        this.replaceWith('record.show.edit.taxonomy.collection');

        return;
      }

      return system;
    },
    actions: {
      parentModel() {
        return this.modelFor('record.show.edit');
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/taxonomy/collection/system/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "p80neXtI", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/taxonomy/collection/system/template.hbs" } });
});
;define("mdeditor/pods/record/show/edit/taxonomy/collection/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "qdcO38oA", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/taxonomy/collection/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/taxonomy/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    afterModel(m) {
      this._super(...arguments);

      let model = Ember.get(m, 'json.metadata.resourceInfo');
      Ember.set(model, 'taxonomy', Ember.getWithDefault(model, 'taxonomy', []));
    },

    setupController: function setupController() {
      // Call _super for default behavior
      this._super(...arguments);

      this.controller.set('parentModel', this.modelFor('record.show.edit'));
    },

    actions: {
      editCollection(id) {
        this.setScrollTo(`collection-${id}`);
        this.transitionTo('record.show.edit.taxonomy.collection.index', id);
      },
      addCollection() {
        let taxa = this.currentRouteModel().get('json.metadata.resourceInfo.taxonomy');
        let collection = Ember.Object.create({});

        // once(this, () => {

        taxa.pushObject(collection);
        this.setScrollTo(`collection-${taxa.length - 1}`);
        this.transitionTo('record.show.edit.taxonomy.collection.index', taxa.length - 1);

        Ember.$("html, body").animate({
          scrollTop: Ember.$(document).height()
        }, "slow");
        // });
      },
      deleteCollection(id) {
        let taxa = this.currentRouteModel().get('json.metadata.resourceInfo.taxonomy');

        taxa.removeAt(id);
      }
    }
  });
});
;define("mdeditor/pods/record/show/edit/taxonomy/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "wNQEgtek", "block": "{\"symbols\":[\"collection\",\"index\"],\"statements\":[[7,\"h4\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  Editing Taxonomy\\n  \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"parentModel\"]]]]],false],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[0,\"\\n\\n\"],[4,\"each\",[[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\",\"taxonomy\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"object/md-taxonomy\",null,[[\"model\",\"index\",\"scrollTo\",\"record\"],[[22,1,[]],[22,2,[]],[23,[\"scrollTo\"]],[23,[\"model\"]]]]],false],[0,\"\\n\"]],\"parameters\":[1,2]},{\"statements\":[[0,\"  \"],[7,\"h3\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"No taxonomic collections found.\\n    \"],[7,\"button\"],[11,\"class\",\"btn btn-success\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[27,\"route-action\",[\"addCollection\"],null]]],[9],[0,\"\\n      \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Add Collection\"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-extra\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[\"Add Collection\",\"plus\",\"btn-success btn-lg\",[27,\"route-action\",[\"addCollection\"],null]]]]]]],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-record-edit\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/taxonomy/index/template.hbs" } });
});
;define('mdeditor/pods/record/show/edit/taxonomy/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/record/show/edit/taxonomy/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "1MbJoVUq", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n    \"],[1,[27,\"liquid-outlet\",null,[[\"class\"],[\"liquid-spy\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/taxonomy/template.hbs" } });
});
;define("mdeditor/pods/record/show/edit/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "KSpfzSTn", "block": "{\"symbols\":[\"spy\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row md-section-secondary\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"md-record-content col-sm-10\"],[9],[0,\"\\n    \"],[1,[21,\"liquid-outlet\"],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-2\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar hidden-print\"],[9],[0,\"\\n        \"],[1,[27,\"control/md-crud-buttons\",null,[[\"model\",\"doSave\",\"doCancel\",\"doDelete\",\"doCopy\"],[[23,[\"model\"]],[27,\"route-action\",[\"saveRecord\"],null],[27,\"route-action\",[\"cancelRecord\"],null],[27,\"route-action\",[\"destroyRecord\"],null],[27,\"route-action\",[\"copyRecord\"],null]]]],false],[0,\"\\n\"],[4,\"liquid-bind\",[[23,[\"currentModel\"]]],[[\"use\",\"duration\"],[\"fade\",\"1000\"]],{\"statements\":[[0,\"        \"],[1,[27,\"component\",[[23,[\"subbar\"]]],[[\"context\"],[[27,\"route-action\",[\"getContext\"],null]]]],false],[0,\"\\n        \"],[7,\"hr\"],[9],[10],[0,\"\\n        \"],[1,[27,\"from-elsewhere\",null,[[\"name\"],[\"md-subbar-extra\"]]],false],[0,\"\\n\\n        \"],[7,\"div\"],[11,\"class\",\"btn-group-vertical center-block\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"Action Button Controls\"],[9],[0,\"\\n          \"],[1,[27,\"multiple-from-elsewhere\",null,[[\"name\"],[\"md-subbar-buttons\"]]],false],[0,\"\\n        \"],[10],[0,\"\\n\\n\"],[4,\"from-elsewhere\",null,[[\"name\"],[\"md-scroll-spy-record-edit\"]],{\"statements\":[[0,\"            \"],[1,[27,\"component\",[[22,1,[]]],[[\"offset\"],[145]]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"record-nav\",[27,\"component\",[\"input/md-select-profile\"],[[\"value\",\"record\"],[[23,[\"model\",\"profile\"]],[23,[\"model\"]]]]]]]],false],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"model\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"nav-secondary\",[27,\"component\",[\"layout/md-nav-secondary\"],[[\"model\"],[[23,[\"model\"]]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/edit/template.hbs" } });
});
;define('mdeditor/pods/record/show/index/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    actions: {
      linkTo(route) {
        this.transitionTo(route);
      },
      setupMap(features, m) {
        let map = m.target;
        let bounds = L.geoJson(features).getBounds();

        map.fitBounds(bounds);
      }
    }
  });
});
;define("mdeditor/pods/record/show/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uaTR31WH", "block": "{\"symbols\":[\"resource\",\"extent\",\"index\",\"l\",\"type\"],\"statements\":[[4,\"with\",[[23,[\"model\",\"json\",\"metadata\",\"resourceInfo\"]]],null,{\"statements\":[[7,\"div\"],[11,\"class\",\"row md-no-spotlight\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-9 col-md-offset-1\"],[9],[0,\"\\n        \"],[7,\"h3\"],[9],[0,\"\\n        \"],[1,[27,\"fa-icon\",[[23,[\"model\",\"icon\"]]],[[\"class\"],[\"text-muted\"]]],false],[0,\"\\n        Viewing Record: \"],[1,[23,[\"model\",\"title\"]],false],[0,\"\\n        \"],[1,[27,\"control/md-status\",null,[[\"model\"],[[23,[\"model\"]]]]],false],[0,\"\\n        \"],[10],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"bodyIsRow\",\"collapsible\",\"btnText\",\"btnClass\",\"btnAction\",\"btnIcon\"],[false,true,\"Main\",false,true,\"Edit\",\"success\",[27,\"route-action\",[\"linkTo\",\"record.show.edit.main\"],null],\"pencil\"]],{\"statements\":[[0,\"          \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n            \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-xxl-8\"],[9],[0,\"\\n                \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Record Id\",[23,[\"model\",\"recordId\"]]]]],false],[0,\"\\n                \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Record Title\",[23,[\"model\",\"title\"]]]]],false],[0,\"\\n                \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Status\",[27,\"if\",[[22,1,[\"status\"]],[27,\"join\",[\", \",[22,1,[\"status\"]]],null]],null]]]],false],[0,\"\\n                \"],[1,[27,\"control/md-definition\",null,[[\"title\",\"text\"],[\"Contact Instructions\",[23,[\"model\",\"json\",\"contactInstructions\"]]]]],false],[0,\"\\n\\n            \"],[10],[0,\"\\n            \"],[7,\"dl\"],[11,\"class\",\"dl-horizontal col-xxl-4\"],[9],[0,\"\\n\"],[4,\"control/md-definition\",null,[[\"title\"],[\"Resource Type(s)\"]],{\"statements\":[[4,\"each\",[[22,1,[\"resourceType\"]]],null,{\"statements\":[[0,\"                        \"],[1,[22,5,[\"type\"]],false],[0,\":\\n\"],[4,\"if\",[[22,5,[\"name\"]]],null,{\"statements\":[[0,\"                            \"],[1,[22,5,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                            \"],[7,\"em\"],[9],[0,\"Not named\"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                        \"],[7,\"br\"],[9],[10],[0,\"\\n\"]],\"parameters\":[5]},{\"statements\":[[0,\"                            \"],[7,\"em\"],[11,\"class\",\"text-muted\"],[9],[0,\"No types assigned!\"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"            \"],[10],[0,\"\\n            \"],[7,\"div\"],[11,\"class\",\"col-xs-12\"],[9],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"plain\"],[false,true,true]],{\"statements\":[[0,\"                \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n                  \"],[7,\"div\"],[11,\"class\",\"text-info col-xs-6 col-sm-3\"],[9],[0,\"Default Resource Locale\"],[10],[0,\"\\n                  \"],[7,\"div\"],[11,\"class\",\"col-xs-6 col-sm-3\"],[9],[0,\"\\n                    \"],[7,\"label\"],[11,\"class\",\"text-nowrap\"],[9],[0,\"Character Set:\"],[10],[0,\"\\n                    \"],[7,\"span\"],[11,\"class\",\"text-nowrap\"],[9],[1,[22,1,[\"defaultResourceLocale\",\"characterSet\"]],false],[10],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"div\"],[11,\"class\",\"col-xs-6 col-sm-3\"],[9],[0,\"\\n                    \"],[7,\"label\"],[9],[0,\"Country:\"],[10],[0,\"\\n                    \"],[7,\"span\"],[11,\"class\",\"text-nowrap\"],[9],[1,[22,1,[\"defaultResourceLocale\",\"country\"]],false],[10],[0,\"\\n                  \"],[10],[0,\"\\n                  \"],[7,\"div\"],[11,\"class\",\"col-xs-6 col-sm-3\"],[9],[0,\"\\n                    \"],[7,\"label\"],[9],[0,\"Language:\"],[10],[0,\"\\n                    \"],[7,\"span\"],[9],[1,[22,1,[\"defaultResourceLocale\",\"language\"]],false],[10],[0,\"\\n                  \"],[10],[0,\"\\n                \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[10],[0,\"\\n          \"],[10],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"collapsible\",\"scroll\",\"maximizable\",\"class\"],[false,true,\"Abstract\",true,true,true,\"md-embedded\"]],{\"statements\":[[0,\"              \"],[1,[27,\"md-markdown\",[[22,1,[\"abstract\"]],\"Abstract not provided!\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"collapsible\",\"scroll\",\"class\"],[false,true,\"Short Abstract\",true,false,\"md-embedded\"]],{\"statements\":[[0,\"              \"],[1,[27,\"md-markdown\",[[22,1,[\"shortAbstract\"]],\"Short Abstract not provided!\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"shadow\",\"muted\",\"title\",\"bodyIsRow\",\"collapsible\",\"btnText\",\"btnClass\",\"btnAction\",\"btnIcon\"],[false,true,\"Geographic Extent\",false,true,\"Edit\",\"success\",[27,\"route-action\",[\"linkTo\",\"record.show.edit.extent\"],null],\"pencil\"]],{\"statements\":[[0,\"\\n        \"],[7,\"section\"],[9],[0,\"\\n\"],[4,\"each\",[[22,1,[\"extent\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\"],[11,\"class\",\"row md-extent-container\"],[9],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"col-sm-12\"],[9],[0,\"\\n                \"],[7,\"h4\"],[11,\"class\",\"text-info\"],[9],[0,\"\\n                  Geographic Extent #\"],[1,[22,3,[]],false],[0,\"\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"col-sm-6\"],[9],[0,\"\\n                \"],[7,\"label\"],[11,\"class\",\"\"],[9],[0,\"\\n                  Description\\n                \"],[10],[0,\"\\n                \"],[7,\"p\"],[9],[0,\"\\n                  \"],[1,[27,\"get-property\",[[22,2,[]],\"description\"],null],false],[0,\"\\n                \"],[10],[0,\"\\n              \"],[10],[0,\"\\n              \"],[7,\"div\"],[11,\"class\",\"col-sm-6 md-extent-map\"],[9],[0,\"\\n\"],[4,\"if\",[[22,2,[\"geographicExtent\",\"0\",\"geographicElement\",\"length\"]]],null,{\"statements\":[[4,\"leaflet-map\",null,[[\"lat\",\"lng\",\"zoom\",\"maxZoom\",\"onLoad\"],[0,0,2,18,[27,\"route-action\",[\"setupMap\",[22,2,[\"geographicExtent\",\"0\",\"geographicElement\"]]],null]]],{\"statements\":[[4,\"layer-group\",null,[[\"name\",\"baselayer\",\"default\"],[\"Terrain\",true,true]],{\"statements\":[[0,\"                      \"],[1,[27,\"tile-layer\",null,[[\"url\",\"attribution\"],[\"//stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png\",[23,[\"mapAttribution\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"feature-group\",null,[[\"name\",\"default\"],[\"Features\",true]],{\"statements\":[[4,\"each\",[[22,2,[\"geographicExtent\",\"0\",\"geographicElement\"]]],null,{\"statements\":[[0,\"                        \"],[1,[27,\"geojson-layer\",null,[[\"geoJSON\"],[[22,4,[]]]]],false],[0,\"\\n\"]],\"parameters\":[4]},null]],\"parameters\":[]},null],[0,\"\\n                    \"],[1,[21,\"layer-control\"],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"                  \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n                    No Features to display.\\n                  \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"              \"],[10],[0,\"\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[2,3]},{\"statements\":[[0,\"            \"],[7,\"h3\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"No geographic extents found.\\n            \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[10],[0,\"\\n\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[1,[21,\"outlet\"],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-sm-2\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar hidden-print\"],[9],[0,\"\\n\"],[4,\"control/md-crud-buttons\",null,[[\"model\",\"doDelete\",\"doCopy\"],[[23,[\"model\"]],[27,\"route-action\",[\"destroyRecord\"],null],[27,\"route-action\",[\"copyRecord\"],null]]],{\"statements\":[[4,\"link-to\",[\"record.show.edit\",[23,[\"model\",\"id\"]]],[[\"class\"],[\"btn btn-lg btn-success\"]],{\"statements\":[[0,\"            \"],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[0,\" Edit\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[7,\"hr\"],[9],[10],[0,\"\\n\"],[4,\"link-to\",[\"records\"],[[\"class\"],[\"btn btn-lg btn-primary btn-block\"]],{\"statements\":[[0,\"        \"],[1,[27,\"fa-icon\",[\"list\"],null],false],[0,\" Show List\"]],\"parameters\":[]},null],[0,\"\\n\\n        \"],[1,[27,\"control/md-scroll-spy\",null,[[\"scrollInit\",\"setScrollTo\",\"refresh\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null],[23,[\"model\",\"profile\"]]]]],false],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/index/template.hbs" } });
});
;define("mdeditor/pods/record/show/nav/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "JhLSPbfV", "block": "{\"symbols\":[],\"statements\":[[7,\"li\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"record.show.translate\"],null,{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"fa fa-retweet\"],[9],[10],[0,\"\\n    \"],[7,\"span\"],[11,\"class\",\"md-nav-text\"],[9],[0,\"Translate\"],[10],[0,\" \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Translate\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"],[7,\"li\"],[9],[0,\"\\n\\n  \"],[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"form\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n\"],[4,\"link-to\",[\"publish\"],null,{\"statements\":[[0,\"        \"],[7,\"span\"],[11,\"class\",\"fa fa-share-square-o\"],[9],[10],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"md-nav-text\"],[9],[0,\"Publish\"],[10],[0,\" \"],[1,[27,\"ember-tooltip\",null,[[\"text\",\"side\",\"tooltipClassName\"],[\"Publish\",\"bottom\",\"ember-tooltip md-nav-tip\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/nav/template.hbs" } });
});
;define('mdeditor/pods/record/show/route', ['exports', 'ember-copy'], function (exports, _emberCopy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    //breadCrumb: {},
    afterModel(model) {
      const name = model.get('title');

      const crumb = {
        title: name
      };

      this.set('breadCrumb', crumb);
    },
    model(params) {
      return this.store.peekRecord('record', params.record_id);
    },

    actions: {
      destroyRecord: function destroyRecord() {
        let model = this.currentRouteModel();
        model.destroyRecord().then(() => {
          this.flashMessages.success(`Deleted Record: ${model.get('title')}`);
          this.replaceWith('records');
        });
      },
      copyRecord: function copyRecord() {

        this.flashMessages.success(`Copied Record: ${this.currentRouteModel().get('title')}`);
        this.transitionTo('record.new.id', (0, _emberCopy.copy)(this.currentRouteModel()));
      }
    }
  });
});
;define("mdeditor/pods/record/show/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "eP3+h1sJ", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"nav-main\",[27,\"component\",[\"layout/nav/record/nav-main\"],[[\"model\"],[[23,[\"model\"]]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/template.hbs" } });
});
;define('mdeditor/pods/record/show/translate/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    setupController(controller, model) {
      this._super(controller, model);

      controller.setProperties({
        writer: controller.writer || null,
        forceValid: controller.forceValid || false,
        showAllTags: controller.showAllTags || false
      });
    }

  });
});
;define("mdeditor/pods/record/show/translate/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "P+Pa4OKd", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"row\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-xxl-11 col-xxxl-10 col-xxl-offset-1\"],[9],[0,\"\\n      \"],[7,\"h3\"],[9],[0,\"Translate Record\"],[10],[0,\"\\n        \"],[1,[27,\"md-translate\",null,[[\"model\",\"store\",\"writer\",\"forceValid\",\"showAllTags\"],[[23,[\"model\"]],[23,[\"store\"]],[23,[\"writer\"]],[23,[\"forceValid\"]],[23,[\"showAllTags\"]]]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/show/translate/template.hbs" } });
});
;define("mdeditor/pods/record/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "xplg0U8q", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/record/template.hbs" } });
});
;define('mdeditor/pods/records/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const columns = [{
    propertyName: 'title',
    title: 'Title'
  }, {
    propertyName: 'defaultType',
    title: 'Resource Type',
    filterWithSelect: true
  }, {
    propertyName: 'recordId',
    title: 'ID'
  }];

  exports.default = Ember.Route.extend({
    slider: Ember.inject.service(),
    model() {
      //return this.store.peekAll('contact');
      return this.modelFor('application').findBy('modelName', 'record');
    },

    columns: columns,

    actions: {
      getColumns() {
        return this.columns;
      },

      showSlider(rec, evt) {
        let slider = this.slider;

        evt.stopPropagation();
        this.controller.set('errorTarget', rec);
        slider.set('fromName', 'md-slider-error');
        slider.toggleSlider(true);

        return false;
      }
    }
  });
});
;define("mdeditor/pods/records/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "U/e0+kqB", "block": "{\"symbols\":[],\"statements\":[[7,\"h3\"],[11,\"class\",\"text-info\"],[9],[1,[27,\"fa-icon\",[\"file-text\"],null],false],[0,\" Metadata Records\"],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"model\",\"length\"]]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"collapsible\",\"collapsed\",\"shadow\"],[true,false,true]],{\"statements\":[[0,\"    \"],[1,[27,\"control/md-record-table\",null,[[\"data\",\"dataColumns\",\"allActions\",\"selectProperty\",\"showSlider\"],[[23,[\"model\"]],[27,\"compute\",[[27,\"route-action\",[\"getColumns\"],null],[23,[\"section\",\"meta\",\"type\"]]],null],true,\"_selectedFromList\",[27,\"route-action\",[\"showSlider\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[9],[0,\"\\n    \"],[7,\"h3\"],[9],[0,\"No Metadata Records found.\\n\"],[4,\"link-to\",[\"record.new\"],[[\"class\"],[\"btn btn-success btn-lg\"]],{\"statements\":[[0,\"        \"],[1,[27,\"fa-icon\",[\"plus\"],null],false],[0,\" Create a Metadata Record\\n\"]],\"parameters\":[]},null],[0,\"    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"errorTarget\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-slider-error\",[27,\"hash\",null,[[\"title\",\"body\"],[[27,\"concat\",[\"Viewing errors for: \",[23,[\"errorTarget\",\"title\"]]],null],[27,\"component\",[\"control/md-errors\"],[[\"errors\"],[[23,[\"errorTarget\",\"schemaErrors\"]]]]]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/records/template.hbs" } });
});
;define('mdeditor/pods/save/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/save/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "aqt9Rx19", "block": "{\"symbols\":[],\"statements\":[[0,\"Save the Record(s)\\n\"],[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/save/template.hbs" } });
});
;define('mdeditor/pods/settings/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    redirect() {
      this.replaceWith('settings.main');
    }
  });
});
;define("mdeditor/pods/settings/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cvmgxmFw", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/settings/index/template.hbs" } });
});
;define('mdeditor/pods/settings/main/route', ['exports', 'mdeditor/mixins/scroll-to'], function (exports, _scrollTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend(_scrollTo.default, {
    model() {
      // this.get('store').findAll('settings').then(function(settings) {
      //   return settings.get("firstObject");
      // });
      return this.settings.get('data');
    }
  });
});
;define("mdeditor/pods/settings/main/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ifj9p0Cp", "block": "{\"symbols\":[\"catalog\",\"meta\"],\"statements\":[[7,\"div\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  \"],[7,\"h3\"],[9],[0,\"\\n\"],[4,\"layout/md-wrap\",null,[[\"data-spy\"],[\"Version\"]],{\"statements\":[[0,\"    \"],[7,\"small\"],[11,\"class\",\"small\"],[9],[7,\"b\"],[9],[0,\"md\"],[7,\"span\"],[11,\"class\",\"md-icon-mdeditor\"],[9],[10],[0,\"ditor\"],[10],[0,\" Version: \"],[1,[21,\"control/md-repo-link\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"data-spy\"],[\"General Settings\",\"General\"]],{\"statements\":[[7,\"form\"],[11,\"class\",\"form-horizontal\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"col-sm-2 col-lg-1 control-label\"],[9],[0,\"Auto Save\"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"col-sm-1\"],[9],[0,\"\\n        \"],[1,[27,\"x-toggle\",null,[[\"value\",\"onToggle\",\"showLabels\",\"onLabel\",\"offLabel\",\"size\",\"theme\"],[[23,[\"model\",\"autoSave\"]],[27,\"action\",[[22,0,[]],[27,\"mut\",[[23,[\"model\",\"autoSave\"]]],null]],null],true,\"On\",\"Off\",\"medium\",\"default\"]]],false],[0,\"\\n      \"],[10],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n      \"],[7,\"label\"],[11,\"class\",\"col-sm-2 col-lg-1 control-label\"],[9],[0,\"Clear All Records\"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"col-sm-1\"],[9],[0,\"\\n\"],[4,\"control/md-button-modal\",null,[[\"class\",\"type\",\"message\",\"onConfirm\"],[\"btn btn-lg btn-danger\",\"button\",\"<h1>Are you sure?</h1> Clicking OK will delete ALL  records in\\n            your browser cache. Have you made a backup?\",[27,\"route-action\",[\"clearLocalStorage\"],null]]],{\"statements\":[[0,\"            \"],[7,\"span\"],[11,\"class\",\"fa fa-times\"],[9],[10],[0,\" Clear Storage Cache\\n\"]],\"parameters\":[]},null],[0,\"      \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"shadow\"],[\"Defaults\",true]],{\"statements\":[[7,\"div\"],[11,\"class\",\"form-group\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-4\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"label\",\"showValidations\",\"placeholder\"],[[23,[\"model\",\"language\"]],true,true,false,[23,[\"disabled\"]],\"language\",\"Language\",true,\"Select or enter a language code.\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-4\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"label\",\"showValidations\",\"placeholder\"],[[23,[\"model\",\"characterSet\"]],false,true,false,[23,[\"disabled\"]],\"characterSet\",\"Character Set\",true,\"Select character set.\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-4\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"create\",\"tooltip\",\"icon\",\"disabled\",\"mdCodeName\",\"label\",\"placeholder\"],[[23,[\"model\",\"country\"]],false,true,false,[23,[\"disabled\"]],\"countries\",\"Country\",\"Select country code.\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"hr\"],[11,\"class\",\"col-md-12\"],[9],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-8\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"label\",\"type\",\"value\",\"placeholder\"],[\"Import URL\",\"url\",[23,[\"model\",\"importUriBase\"]],\"Text string used as the default URL for importing.\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"hr\"],[11,\"class\",\"col-md-12\"],[9],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"col-md-8\"],[9],[0,\"\\n      \"],[7,\"label\"],[9],[0,\"mdTranslator API URL\"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"input-group\"],[9],[0,\"\\n        \"],[1,[27,\"input/md-input\",null,[[\"type\",\"value\",\"placeholder\"],[\"url\",[23,[\"model\",\"mdTranslatorAPI\"]],\"URL for the ADIwg Metadata Translator.\"]]],false],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"input-group-btn\"],[9],[0,\"\\n          \"],[7,\"button\"],[11,\"class\",\"btn btn-warning\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"resetMdTranslatorAPI\"]],[9],[0,\"Default\\n            \"],[1,[27,\"ember-tooltip\",null,[[\"tooltipClassName\",\"text\"],[\"ember-tooltip md-tooltip info\",\"Reset to default\"]]],false],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"clearfix\"],[9],[10],[0,\"\\n\"],[7,\"hr\"],[9],[10],[0,\"\\n\"],[4,\"object/md-array-table\",null,[[\"columns\",\"value\",\"plain\",\"title\",\"templateClass\",\"onChange\",\"data-spy\"],[\"Repository, Collection Title\",[23,[\"model\",\"repositoryDefaults\"]],true,\"Metadata Repository\",[23,[\"settings\",\"repositoryTemplate\"]],[27,\"route-action\",[\"save\"],null],\"Metadata Repository\"]],{\"statements\":[[0,\"    \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-codelist\",null,[[\"value\",\"create\",\"tooltip\",\"icon\",\"mdCodeName\",\"closeOnSelect\",\"placeholder\",\"change\"],[[22,2,[\"item\",\"repository\"]],true,true,false,\"metadataRepository\",true,\"Select or enter a repository.\",[27,\"route-action\",[\"save\"],null]]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"td\"],[9],[0,\"\\n      \"],[1,[27,\"input/md-input\",null,[[\"type\",\"value\",\"placeholder\",\"change\"],[\"text\",[22,2,[\"item\",\"title\"]],\"Text string used to identify a set of resources in the repository.\",[27,\"route-action\",[\"save\"],null]]]],false],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"data-spy\"],[\"Date Settings\",\"Dates\"]],{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"col-md-4\"],[9],[0,\"\\n    \"],[1,[27,\"input/md-month\",null,[[\"date\",\"format\",\"altFormat\",\"label\",\"placeholder\"],[[23,[\"model\",\"fiscalStartMonth\"]],\"MMMM\",\"MM\",\"Start Month of Fiscal Year\",\"Select month.\"]]],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"title\",\"data-spy\"],[\"Publishing Settings\",\"Publishing\"]],{\"statements\":[[4,\"each\",[[27,\"compute\",[[27,\"route-action\",[\"catalogs\"],null]],null]],null,{\"statements\":[[4,\"layout/md-card\",null,[[\"title\",\"collapsible\",\"collapsed\",\"shadow\",\"class\"],[[22,1,[\"name\"]],true,false,false,\"md-embedded\"]],{\"statements\":[[0,\"    \"],[1,[27,\"component\",[[22,1,[\"settingsComponent\"]]],[[\"model\",\"save\"],[[23,[\"model\",\"publishOptions\"]],[27,\"route-action\",[\"save\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"parameters\":[]},null],[0,\" \"],[1,[21,\"outlet\"],false],[0,\"\\n\\n \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-scroll-spy-settings\",[27,\"component\",[\"control/md-scroll-spy\"],[[\"scrollInit\",\"setScrollTo\"],[[23,[\"scrollTo\"]],[27,\"route-action\",[\"setScrollTo\"],null]]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/settings/main/template.hbs" } });
});
;define('mdeditor/pods/settings/profile/index/controller', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Controller.extend({
    customProfiles: Ember.inject.service('custom-profile'),
    /* eslint-disable ember/avoid-leaking-state-in-ember-objects */
    columns: [{
      propertyName: 'title',
      title: 'Title'
    }, {
      propertyName: 'definition.title',
      title: 'Definition'
    }, {
      propertyName: 'description',
      title: 'Description',
      truncate: true,
      isHidden: false
    }],

    // columnSets: [],
    //
    // badges: [{
    //   type: 'info',
    //   icon: 'info-circle',
    //   tip: 'Update available.',
    //   isVisible: 'hasUpdate'
    // }],
    actions: {
      addProfile() {
        this.set('profile', this.store.createRecord('custom-profile'));
      },
      editProfile(index, record) {
        this.set('profile', record);
      },
      saveProfile() {
        let profile = this.profile;

        return profile.save();
      },

      cancelEdit() {
        let record = this.profile;

        this.set('profile', null);
        record.rollbackAttributes();
      },
      manageDefinitions() {
        this.transitionToRoute('settings.profile.manage');
      }
    }
  });
});
;define('mdeditor/pods/settings/profile/index/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model() {
      return this.store.findAll('custom-profile');
    }
  });
});
;define("mdeditor/pods/settings/profile/index/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+xgmfnfo", "block": "{\"symbols\":[\"message\"],\"statements\":[[7,\"div\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  \"],[7,\"h3\"],[9],[0,\"\\n    Manage Profiles\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"profile\"]]],null,{\"statements\":[[0,\"    \"],[7,\"h4\"],[11,\"class\",\"tab-header\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,[\"profile\"]]],[[\"use\",\"growDuration\",\"class\"],[\"fade\",100,\"inline-block\"]],{\"statements\":[[4,\"if\",[[23,[\"profile\",\"isNew\"]]],null,{\"statements\":[[0,\"          Add Profile\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"          \"],[1,[27,\"concat\",[\"Edit \",[23,[\"profile\",\"title\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"      \"],[7,\"hr\"],[9],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"liquid-if\",[[23,[\"profile\"]]],[[\"use\"],[\"fade\"]],{\"statements\":[[4,\"if\",[[23,[\"profile\",\"isNew\"]]],null,{\"statements\":[[0,\"      \"],[1,[27,\"object/md-profile/custom\",null,[[\"record\"],[[23,[\"profile\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"profile\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"profile\",\"validations\",\"hasWarnings\"]]],null,{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"alert alert-warning\"],[11,\"role\",\"alert\"],[9],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\"\\n\"],[4,\"each\",[[23,[\"profile\",\"validations\",\"warningMessages\"]]],null,{\"statements\":[[0,\"          \"],[7,\"span\"],[9],[1,[22,1,[]],false],[0,\" \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[1,[27,\"object/md-profile/custom\",null,[[\"record\"],[[23,[\"profile\"]]]]],false],[0,\"\\n    \"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[1,[27,\"control/md-edit-table\",null,[[\"data\",\"columns\",\"columnSets\",\"rowBodyComponent\",\"pageSize\",\"editRow\",\"actionBadges\"],[[23,[\"model\"]],[23,[\"columns\"]],[23,[\"columnSets\"]],\"object/md-profile/form\",25,[27,\"action\",[[22,0,[]],\"editProfile\"],null],[23,[\"badges\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[10],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"profile\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"profile\",\"isNew\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"disabled\",\"class\",\"click\"],[[27,\"if\",[[23,[\"profile\",\"isNew\"]],\"Save Profile\",\"Update Profile\"],null],\"floppy-o\",[23,[\"disableSave\"]],\"btn-success btn-lg\",[27,\"action\",[[22,0,[]],\"saveProfile\"],null]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[[27,\"if\",[[23,[\"profile\",\"isNew\"]],\"Cancel\",\"Back to List\"],null],[27,\"if\",[[23,[\"profile\",\"isNew\"]],\"undo\",\"arrow-left\"],null],[27,\"if\",[[23,[\"profile\",\"isNew\"]],\"btn-warning btn-lg\",\"btn-primary btn-lg\"],null],[27,\"action\",[[22,0,[]],\"cancelEdit\"],null]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\",\"disabled\"],[\"Add Profile\",\"plus\",\"btn-success btn-lg\",[27,\"action\",[[22,0,[]],\"addProfile\"],null],[27,\"if\",[[23,[\"profile\"]],true],null]]]]]]],false],[0,\"\\n  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[\"Manage Definitions\",\"gear\",\"btn-primary btn-lg\",[27,\"action\",[[22,0,[]],\"manageDefinitions\"],null]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/settings/profile/index/template.hbs" } });
});
;define('mdeditor/pods/settings/profile/manage/controller', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Controller.extend({
    profile: Ember.inject.service(),
    flashMessages: Ember.inject.service(),

    /* eslint-disable ember/avoid-leaking-state-in-ember-objects */
    columns: [{
      propertyName: 'title',
      title: 'Title'
    }, {
      propertyName: 'uri',
      title: 'URL',
      break: true
    }, {
      propertyName: 'description',
      title: 'Description',
      truncate: true,
      isHidden: true
    }],

    columnSets: [{
      label: 'URL',
      showColumns: ['title', 'uri']
    }],

    badges: [{
      type: 'info',
      icon: 'info-circle',
      tip: 'Update available.',
      isVisible: 'hasUpdate'
    }],

    definition: null,

    /**
     * Indicates whether the save button should be disabled
     *
     * @property disableSave
     * @type {Boolean}
     * @readOnly
     * @category computed
     * @requires definition.validations.isInvalid,task.isRunning
     */
    disableSave: Ember.computed.or('definition.validations.attrs.uri.isInvalid', 'task.isRunning'),

    checkForUpdates: (0, _emberConcurrency.task)(function* () {
      yield this.profile.checkForUpdates.perform(this.model);
    }),

    actions: {
      addDefinition() {
        this.set('definition', this.store.createRecord('profile'));
      },
      editDefinition(index, record) {
        this.set('definition', record);
      },
      saveDefinition() {
        let definition = this.definition;

        return definition.save().then(rec => {
          let fetched = this.profile.fetchDefinition.perform(rec.uri);

          this.set('task', fetched);

          fetched.then(val => {
            if (val) {
              definition.set('config', val);
              definition.set('remoteVersion', val.version);

              this.flashMessages.success(`Downloaded profile definition: ${val.title}.`);
            }
          });
        }).catch(e => {
          this.flashMessages.warning(e.message);
        });
      },

      cancelEdit() {
        let record = this.definition;

        this.set('definition', null);
        record.rollbackAttributes();
      },

      toProfile() {
        this.transitionToRoute('settings.profile');
      }
    }
  });
});
;define('mdeditor/pods/settings/profile/manage/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model() {
      return this.store.findAll('profile');
    },

    profile: Ember.inject.service()
  });
});
;define("mdeditor/pods/settings/profile/manage/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/zfOYHRQ", "block": "{\"symbols\":[\"core\"],\"statements\":[[7,\"div\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  \"],[7,\"h3\"],[9],[0,\"\\n    Manage Definitions\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"ul\"],[11,\"class\",\"nav nav-tabs\"],[11,\"role\",\"tablist\"],[9],[0,\"\\n  \"],[7,\"li\"],[11,\"role\",\"presentation\"],[11,\"class\",\"active\"],[9],[7,\"a\"],[12,\"href\",[27,\"concat\",[\"#\",[23,[\"elementId\"]],\"-imported\"],null]],[11,\"aria-controls\",\"imported\"],[11,\"role\",\"tab\"],[11,\"data-toggle\",\"tab\"],[9],[0,\"Imported\"],[10],[10],[0,\"\\n  \"],[7,\"li\"],[11,\"role\",\"presentation\"],[9],[0,\"\\n    \"],[7,\"a\"],[12,\"href\",[27,\"concat\",[\"#\",[23,[\"elementId\"]],\"-core\"],null]],[11,\"aria-controls\",\"core\"],[11,\"role\",\"tab\"],[11,\"data-toggle\",\"tab\"],[9],[0,\"Core\"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\"],[7,\"div\"],[11,\"class\",\"card-block\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"tab-content\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"role\",\"tabpanel\"],[11,\"class\",\"tab-pane fade in active\"],[12,\"id\",[27,\"concat\",[[23,[\"elementId\"]],\"-imported\"],null]],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"definition\"]]],null,{\"statements\":[[0,\"        \"],[7,\"h4\"],[11,\"class\",\"tab-header\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,[\"definition\"]]],[[\"use\",\"growDuration\",\"class\"],[\"fade\",100,\"inline-block\"]],{\"statements\":[[4,\"if\",[[23,[\"definition\",\"isNew\"]]],null,{\"statements\":[[0,\"              Add Profile Definition\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"              \"],[1,[27,\"concat\",[\"Edit \",[23,[\"definition\",\"title\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}],[4,\"if\",[[23,[\"task\",\"isRunning\"]]],null,{\"statements\":[[0,\"              \"],[7,\"small\"],[9],[0,\"...downloading definition\"],[10],[0,\"\\n              \"],[1,[27,\"fa-icon\",[\"spinner\"],[[\"spin\"],[true]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"          \"],[7,\"hr\"],[9],[10],[0,\"\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"liquid-if\",[[23,[\"definition\"]]],[[\"use\"],[\"fade\"]],{\"statements\":[[4,\"if\",[[23,[\"definition\",\"isNew\"]]],null,{\"statements\":[[0,\"          \"],[1,[27,\"object/md-profile/form\",null,[[\"record\"],[[23,[\"definition\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"definition\"]]],null,{\"statements\":[[0,\"          \"],[1,[27,\"object/md-profile\",null,[[\"record\"],[[23,[\"definition\"]]]]],false],[0,\"\\n        \"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[27,\"control/md-edit-table\",null,[[\"data\",\"columns\",\"columnSets\",\"rowBodyComponent\",\"pageSize\",\"editRow\",\"actionBadges\"],[[23,[\"model\"]],[23,[\"columns\"]],[23,[\"columnSets\"]],\"object/md-profile/form\",25,[27,\"action\",[[22,0,[]],\"editDefinition\"],null],[23,[\"badges\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"role\",\"tabpanel\"],[11,\"class\",\"tab-pane fade\"],[12,\"id\",[27,\"concat\",[[23,[\"elementId\"]],\"-core\"],null]],[9],[0,\"\\n      \"],[7,\"h4\"],[11,\"class\",\"tab-header\"],[9],[0,\"\\n        List of Core Definitions\\n      \"],[10],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"list-group\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"profile\",\"coreProfiles\"]]],null,{\"statements\":[[0,\"          \"],[7,\"div\"],[11,\"class\",\"list-group-item\"],[9],[0,\"\\n            \"],[7,\"h4\"],[11,\"class\",\"list-group-item-heading text-info-dark\"],[9],[1,[22,1,[\"title\"]],false],[0,\"\\n              \"],[7,\"hr\"],[9],[10],[0,\"\\n            \"],[10],[0,\"\\n            \"],[1,[27,\"object/md-profile/preview\",null,[[\"record\",\"class\"],[[22,1,[]],\"list-group-item-text\"]]],false],[0,\"\\n          \"],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"definition\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"iconSpin\",\"disabled\",\"class\",\"click\"],[[27,\"if\",[[23,[\"task\",\"isRunning\"]],\"Loading...\",[27,\"if\",[[23,[\"definition\",\"isNew\"]],\"Save Definition\",\"Update Definition\"],null]],null],[27,\"if\",[[23,[\"task\",\"isRunning\"]],\"spinner\",\"floppy-o\"],null],[23,[\"task\",\"isRunning\"]],[23,[\"disableSave\"]],\"btn-success btn-lg\",[27,\"action\",[[22,0,[]],\"saveDefinition\"],null]]]]]]],false],[0,\"\\n    \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[[27,\"if\",[[23,[\"definition\",\"isNew\"]],\"Cancel\",\"Back\"],null],[27,\"if\",[[23,[\"definition\",\"isNew\"]],\"undo\",\"arrow-left\"],null],[27,\"if\",[[23,[\"definition\",\"isNew\"]],\"btn-warning btn-lg\",\"btn-primary btn-lg\"],null],[27,\"action\",[[22,0,[]],\"cancelEdit\"],null]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\",\"disabled\"],[\"Add Definition\",\"plus\",\"btn-success btn-lg\",[27,\"action\",[[22,0,[]],\"addDefinition\"],null],[27,\"if\",[[23,[\"definition\"]],true],null]]]]]]],false],[0,\"\\n  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"iconSpin\",\"disabled\",\"icon\",\"class\",\"click\"],[[27,\"if\",[[23,[\"checkForUpdates\",\"isRunning\"]],\"Checking...\",\"Check for Updates\"],null],[23,[\"checkForUpdates\",\"isRunning\"]],[23,[\"checkForUpdates\",\"isRunning\"]],[27,\"if\",[[23,[\"checkForUpdates\",\"isRunning\"]],\"spinner\",\"check\"],null],\"btn-info btn-lg\",[27,\"perform\",[[23,[\"checkForUpdates\"]]],null]]]]]]],false],[0,\"\\n\\n  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[\"Back to Profiles\",\"arrow-left\",\"btn-primary btn-lg\",[27,\"action\",[[22,0,[]],\"toProfile\"],null]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/settings/profile/manage/template.hbs" } });
});
;define('mdeditor/pods/settings/profile/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/settings/profile/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "xfb9zU+o", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/settings/profile/template.hbs" } });
});
;define('mdeditor/pods/settings/route', ['exports', 'mdeditor/models/setting'], function (exports, _setting) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    settings: Ember.inject.service(),
    publish: Ember.inject.service(),
    /**
     * The profile service
     *
     * @return {Ember.Service} profile
     */
    profile: Ember.inject.service(),

    setupController(controller, model) {
      this._super(controller, model);

      const links = [{
        title: 'Main',
        target: 'settings.main',
        tip: 'Main application settings'
      }, {
        title: 'Profiles',
        target: 'settings.profile',
        tip: 'Custom profile settings'
      }, {
        title: 'Validation',
        target: 'settings.validation',
        tip: 'Custom validation settings'
      }];
      controller.set('links', links);
    },

    actions: {
      clearLocalStorage() {
        window.localStorage.clear();
        this.transitionTo('application');
        window.location.reload();
      },
      save() {
        this.currentRouteModel().save();
      },

      catalogs() {
        return this.get('publish.catalogs');
      },

      resetMdTranslatorAPI() {
        let url = Ember.get(_setting.default, 'attributes').get('mdTranslatorAPI').options.defaultValue;
        let model = Ember.get(this.controller, 'model');

        model.set('mdTranslatorAPI', url);
      }
    }
  });
});
;define("mdeditor/pods/settings/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "hWXvQbV3", "block": "{\"symbols\":[\"spy\"],\"statements\":[[7,\"div\"],[11,\"class\",\"row md-section-secondary\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-9 col-md-offset-1\"],[9],[0,\"\\n    \"],[1,[21,\"outlet\"],false],[0,\"\\n  \"],[10],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"col-sm-2\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"md-control-sidebar hidden-print\"],[9],[0,\"\\n      \"],[7,\"div\"],[11,\"class\",\"btn-group-vertical center-block\"],[11,\"role\",\"group\"],[11,\"aria-label\",\"Action Button Controls\"],[9],[0,\"\\n        \"],[1,[27,\"multiple-from-elsewhere\",null,[[\"name\"],[\"md-subbar-settings\"]]],false],[0,\"\\n      \"],[10],[0,\"\\n\"],[4,\"from-elsewhere\",null,[[\"name\"],[\"md-scroll-spy-settings\"]],{\"statements\":[[0,\"          \"],[1,[27,\"component\",[[22,1,[]]],[[\"offset\"],[145]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"nav-secondary\",[27,\"component\",[\"layout/md-nav-secondary\"],[[\"links\",\"isStaticLinks\"],[[23,[\"links\"]],true]]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/settings/template.hbs" } });
});
;define('mdeditor/pods/settings/validation/controller', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Controller.extend({
    schemas: Ember.inject.service(),
    flashMessages: Ember.inject.service(),

    /* eslint-disable ember/avoid-leaking-state-in-ember-objects */
    columns: [{
      propertyName: 'title',
      title: 'Title'
    }, {
      propertyName: 'formattedType',
      title: 'Type',
      filterWithSelect: true
    }, {
      propertyName: 'uri',
      title: 'URL',
      break: true
    }, {
      propertyName: 'description',
      title: 'Description',
      truncate: true,
      isHidden: true
    }, {
      propertyName: 'formattedGlobal',
      title: 'Global?',
      filterWithSelect: true
    }],

    columnSets: [{
      label: 'URL',
      showColumns: ['title', 'uri']
    }],

    badges: [{
      type: 'info',
      icon: 'info-circle',
      tip: 'Update available.',
      isVisible: 'hasUpdate'
    }],

    schema: null,

    /**
    * Indicates whether the save button should be disabled
    *
    * @property disableSave
    * @type {Boolean}
    * @readOnly
    * @category computed
    * @requires schema.validations.isInvalid,task.isRunning
    */
    disableSave: Ember.computed.or('schema.validations.isInvalid', 'task.isRunning'),

    checkForUpdates: (0, _emberConcurrency.task)(function* () {
      yield this.schemas.checkForUpdates.perform(this.model);
    }),

    actions: {
      addSchema() {
        this.set('schema', this.store.createRecord('schema'));
      },
      editSchema(index, record) {
        this.set('schema', record);
      },
      saveSchema() {
        let schema = this.schema;

        return this.schema.save().then(rec => {
          let fetched = this.schemas.fetchSchemas.perform(rec.uri);

          this.set('task', fetched);

          return fetched.then(val => {
            schema.set('customSchemas', val);
            schema.set('version', val[0].schema.version);
            schema.set('remoteVersion', schema.version);

            this.flashMessages.success(`Downloaded ${val.length} schemas.`);
          });
        }).catch(e => {
          this.flashMessages.warning(e.message);
        });
      },

      cancelEdit() {
        let record = this.schema;

        this.set('schema', null);
        record.rollbackAttributes();
      },
      fetchSchemas(url) {
        this.schemas.fetchSchemas(url);
      }
    }
  });
});
;define('mdeditor/pods/settings/validation/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    model() {
      return this.get('store').findAll('schema');
    },

    schemas: Ember.inject.service()
  });
});
;define("mdeditor/pods/settings/validation/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "fNglD4J9", "block": "{\"symbols\":[],\"statements\":[[7,\"div\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n  \"],[7,\"h3\"],[9],[0,\"\\n    Custom Validation Schemas\\n  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[7,\"section\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"section-header\"],[9],[0,\"\\n    \"],[7,\"h4\"],[11,\"class\",\"md-table-title\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,[\"schema\"]]],[[\"use\",\"growDuration\",\"class\"],[\"fade\",100,\"inline-block\"]],{\"statements\":[[4,\"if\",[[23,[\"schema\",\"isNew\"]]],null,{\"statements\":[[0,\"          Add Schema\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"schema\"]]],null,{\"statements\":[[0,\"          \"],[1,[27,\"concat\",[\"Edit \",[23,[\"schema\",\"title\"]]],null],false],[0,\"\\n        \"]],\"parameters\":[]},null]],\"parameters\":[]}],[4,\"if\",[[23,[\"task\",\"isRunning\"]]],null,{\"statements\":[[0,\"          \"],[7,\"small\"],[9],[0,\"...downloading schemas\"],[10],[0,\"\\n          \"],[1,[27,\"fa-icon\",[\"spinner\"],[[\"spin\"],[true]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"        Manage Schemas\\n\"]],\"parameters\":[]}],[0,\"    \"],[10],[0,\"\\n    \"],[7,\"hr\"],[9],[10],[0,\"\\n  \"],[10],[0,\"\\n\\n\"],[4,\"liquid-if\",[[23,[\"schema\"]]],[[\"use\"],[\"fade\"]],{\"statements\":[[4,\"if\",[[23,[\"schema\",\"isNew\"]]],null,{\"statements\":[[0,\"      \"],[1,[27,\"object/md-schema/form\",null,[[\"record\"],[[23,[\"schema\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"schema\"]]],null,{\"statements\":[[0,\"      \"],[1,[27,\"object/md-schema\",null,[[\"record\"],[[23,[\"schema\"]]]]],false],[0,\"\\n    \"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[1,[27,\"control/md-edit-table\",null,[[\"data\",\"columns\",\"columnSets\",\"rowBodyComponent\",\"pageSize\",\"editRow\",\"actionBadges\"],[[23,[\"model\"]],[23,[\"columns\"]],[23,[\"columnSets\"]],\"object/md-schema\",25,[27,\"action\",[[22,0,[]],\"editSchema\"],null],[23,[\"badges\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[10],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"schema\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"iconSpin\",\"disabled\",\"class\",\"click\"],[[27,\"if\",[[23,[\"task\",\"isRunning\"]],\"Loading...\",[27,\"if\",[[23,[\"schema\",\"isNew\"]],\"Save Schema\",\"Update Schema\"],null]],null],[27,\"if\",[[23,[\"task\",\"isRunning\"]],\"spinner\",\"floppy-o\"],null],[23,[\"task\",\"isRunning\"]],[23,[\"disableSave\"]],\"btn-success btn-lg\",[27,\"action\",[[22,0,[]],\"saveSchema\"],null]]]]]]],false],[0,\"\\n    \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\"],[[27,\"if\",[[23,[\"schema\",\"isNew\"]],\"Cancel\",\"Back\"],null],[27,\"if\",[[23,[\"schema\",\"isNew\"]],\"undo\",\"arrow-left\"],null],[27,\"if\",[[23,[\"schema\",\"isNew\"]],\"btn-warning btn-lg\",\"btn-primary btn-lg\"],null],[27,\"action\",[[22,0,[]],\"cancelEdit\"],null]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"icon\",\"class\",\"click\",\"disabled\"],[\"Add Schema\",\"plus\",\"btn-success btn-lg\",[27,\"action\",[[22,0,[]],\"addSchema\"],null],[27,\"if\",[[23,[\"schema\"]],true],null]]]]]]],false],[0,\"\\n  \"],[1,[27,\"to-elsewhere\",null,[[\"named\",\"send\"],[\"md-subbar-settings\",[27,\"component\",[\"control/md-button\"],[[\"text\",\"iconSpin\",\"disabled\",\"icon\",\"class\",\"click\"],[[27,\"if\",[[23,[\"checkForUpdates\",\"isRunning\"]],\"Checking...\",\"Check for Updates\"],null],[23,[\"checkForUpdates\",\"isRunning\"]],[23,[\"checkForUpdates\",\"isRunning\"]],[27,\"if\",[[23,[\"checkForUpdates\",\"isRunning\"]],\"spinner\",\"check\"],null],\"btn-info btn-lg\",[27,\"perform\",[[23,[\"checkForUpdates\"]]],null]]]]]]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/settings/validation/template.hbs" } });
});
;define('mdeditor/pods/translate/route', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
;define("mdeditor/pods/translate/template", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "eCD3aiSh", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false],[0,\"\\n\\n\"],[7,\"style\"],[11,\"media\",\"screen\"],[9],[0,\"\\n    .construction {\\n        width: 50vh;\\n        min-width:240px;\\n        font-size:5vh;\\n        border: 2vh solid #333333;\\n        margin: 10vh auto;\\n        padding: 3vh;\\n        border-radius: 5vh;\\n    }\\n\"],[10],[0,\"\\n\"],[4,\"layout/md-card\",null,[[\"class\",\"shadow\"],[\"construction card-inverse card-warning\",false]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"text-center\"],[9],[0,\"\\n        \"],[7,\"div\"],[9],[0,\"\\n            \"],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],[[\"size\"],[2]]],false],[0,\"\\n        \"],[10],[0,\"\\n        \"],[7,\"div\"],[9],[0,\"\\n            \"],[7,\"b\"],[9],[0,\"Page Under \"],[7,\"br\"],[9],[10],[0,\"Construction\"],[10],[0,\"\\n        \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/pods/translate/template.hbs" } });
});
;define('mdeditor/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberResolver.default;
});
;define('mdeditor/router', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Router = Ember.Router.extend({
    location: _environment.default.locationType,
    rootURL: _environment.default.rootURL
  });

  Router.map(function () {
    this.route('dashboard');
    this.route('export');
    this.route('import');
    this.route('translate');
    //this.route('publish', function() {});
    this.route('help');
    this.route('settings', function () {
      this.route('validation');
      this.route('profile', function () {
        this.route('manage');
      });
      this.route('main');
    });

    //records
    this.route('records');
    //record
    this.route('record', function () {
      this.route('new', function () {
        this.route('id', {
          path: '/:record_id'
        });
      });
      this.route('show', {
        path: ':record_id'
      }, function () {
        this.route('edit', function () {
          this.route('metadata', function () {
            this.route('identifier');
            this.route('parent', function () {
              this.route('identifier', {
                path: 'identifier/:identifier_id'
              });
            });

            this.route('alternate', {
              path: 'alternate/:citation_id'
            }, function () {
              // this.route('index', {
              //   path: 'alternate/:citation_id'
              // });
              this.route('identifier', {
                path: 'identifier/:identifier_id'
              });
            });
          });
          this.route('keywords', function () {
            this.route('thesaurus', {
              path: 'thesaurus/:thesaurus_id'
            });
          });
          this.route('extent', function () {
            this.route('spatial', {
              path: 'spatial/:extent_id'
            });
          });
          this.route('lineage', function () {
            this.route('lineageobject', {
              path: ':lineage_id'
            }, function () {
              this.route('citation', {
                path: 'citation/:citation_id'
              }, function () {
                this.route('identifier', {
                  path: 'identifier/:identifier_id'
                });
              });
              this.route('step', {
                path: 'step/:step_id'
              }, function () {
                this.route('citation', {
                  path: 'citation/:citation_id'
                });
              });
              this.route('source', {
                path: 'source/:source_id'
              }, function () {});
            });
          });
          this.route('distribution', function () {
            this.route('distributor', {
              path: ':distribution_id/distributor'
            }, function () {});
          });
          this.route('associated', function () {
            this.route('resource', {
              path: ':resource_id'
            }, function () {});
          });
          this.route('documents', function () {
            this.route('citation', {
              path: 'documents/:citation_id'
            }, function () {});
          });
          this.route('coverages');
          this.route('grid');
          this.route('main', function () {
            this.route('citation', function () {
              this.route('identifier', {
                path: 'identifier/:identifier_id'
              });
            });
          });
          this.route('funding', function () {
            this.route('allocation', {
              path: ':allocation_id'
            });
          });
          this.route('dictionary');
          this.route('spatial', function () {});
          this.route('constraint', function () {});
          this.route('taxonomy', function () {
            this.route('collection', {
              path: ':collection_id'
            }, function () {
              this.route('itis');
              this.route('system', {
                path: 'system/:system_id'
              }, function () {});
            });
          });
        });
        this.route('translate');
      });
    });
    //contacts
    this.route('contacts');
    //contact
    this.route('contact', function () {
      this.route('new', function () {
        this.route('id', {
          path: '/:contact_id'
        });
      });

      this.route('show', {
        path: ':contact_id'
      }, function () {
        this.route('edit');
      });
    });
    //dictionary
    this.route('dictionaries');
    //dictionary
    this.route('dictionary', function () {
      this.route('new', function () {
        this.route('id', {
          path: '/:dictionary_id'
        });
      });
      this.route('show', {
        path: ':dictionary_id'
      }, function () {
        this.route('edit', function () {
          this.route('citation', function () {
            this.route('identifier', {
              path: 'identifier/:identifier_id'
            });
          });
          this.route('domain', function () {
            this.route('edit', {
              path: ':domain_id'
            }, function () {
              this.route('citation', function () {
                this.route('identifier', {
                  path: 'identifier/:identifier_id'
                });
              });
              this.route('item', {
                path: 'item/:item_id'
              });
            });
          });
          this.route('entity', function () {
            this.route('edit', {
              path: ':entity_id'
            }, function () {
              this.route('citation', {
                path: 'citation/:citation_id'
              }, function () {
                this.route('identifier', {
                  path: 'identifier/:identifier_id'
                });
              });
              this.route('attribute', {
                path: 'attribute/:attribute_id'
              }, function () {});
            });
            this.route('import');
          });
        });
      });
    });

    this.route('not-found', {
      path: '/*path'
    });
    this.route('error');
  });

  exports.default = Router;
});
;define('mdeditor/routes/application', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const defaultProfileId = _environment.default.APP.defaultProfileId;


  const console = window.console;

  exports.default = Ember.Route.extend({
    init() {
      this._super(...arguments);

      Ember.$(window).bind('beforeunload', evt => {
        let dirty = this.currentRouteModel().filter(function (itm) {
          return itm.filterBy('hasDirtyHash').length;
        }).length;

        let message = 'Are you sure you want to leave unsaved work?';

        evt.returnValue = dirty ? message : undefined;

        return evt.returnValue;
      });
    },

    spotlight: Ember.inject.service(),
    slider: Ember.inject.service(),
    router: Ember.inject.service(),

    /**
     * Models for sidebar navigation
     *
     * @return {Ember.RSVP.hash}
     */
    model() {
      let promises = [this.store.findAll('record', {
        reload: true
      }), this.store.findAll('contact', {
        reload: true
      }), this.store.findAll('dictionary', {
        reload: true
      })];

      let meta = Ember.A([Ember.Object.create({
        type: 'record',
        list: 'records',
        title: 'Metadata Records',
        icon: 'file-o'
      }), Ember.Object.create({
        type: 'contact',
        list: 'contacts',
        title: 'Contacts',
        icon: 'users'
      }), Ember.Object.create({
        type: 'dictionary',
        list: 'dictionaries',
        title: 'Dictionaries',
        icon: 'book'
      })]);

      let idx = 0;

      let mapFn = function mapFn(item) {

        meta[idx].set('listId', Ember.guidFor(item));
        item.set('meta', meta[idx]);
        idx = ++idx;

        return item;
      };

      return Ember.RSVP.map(promises, mapFn).then(result => {
        let profiles = [this.store.findAll('profile', {
          reload: true
        }), this.store.findAll('schema', {
          reload: true
        }), this.store.findAll('custom-profile', {
          reload: true
        })];

        return Ember.RSVP.all(profiles).then(() => result);

        // return result;
      });
    },

    beforeModel() {
      if (!defaultProfileId) {
        this.router.replaceWith('error').then(function (route) {
          route.controller.set('lastError', new Error('A default profile ID is not set in "config/environment/APP"'));
        });
      }
    },

    setupController(controller, model) {
      // Call _super for default behavior
      this._super(controller, model);
      // Implement your custom setup after
      controller.set('spotlight', this.spotlight);
      controller.set('slider', this.slider);
    },

    /**
     * The current model for the route
     * @method currentRouteModel
     * @return {Object}
     */

    actions: {
      error(error) {
        console.error(error);

        if (error.status === 404) {
          return this.transitionTo('not-found');
        }

        return this.replaceWith('error').then(function (route) {
          route.controller.set('lastError', error);
        });
      },
      didTransition() {
        this.controller.set('currentRoute', this.router.get('currentRouteName'));
      }
    }
  });
});
;define('mdeditor/routes/index', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({
    /** Redirect to dashboard route */
    redirect() {
      this.transitionTo('dashboard');
    }
  });
});
;define('mdeditor/routes/publish/sciencebase', ['exports', 'mdeditor-sciencebase/routes/publish/sciencebase'], function (exports, _sciencebase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sciencebase.default;
    }
  });
});
;define('mdeditor/serializers/application', ['exports', 'ember-local-storage/serializers/serializer'], function (exports, _serializer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _serializer.default;
    }
  });
});
;define('mdeditor/services/-gestures', ['exports', 'mdeditor/config/environment', 'ember-gestures/services/-gestures'], function (exports, _environment, _gestures) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const assign = Ember.assign || Ember.merge;

  let gestures = assign({}, {
    useCapture: false
  });
  gestures = assign(gestures, _environment.default.gestures);

  exports.default = _gestures.default.extend({
    useCapture: gestures.useCapture
  });
});
;define('mdeditor/services/-observer-admin', ['exports', 'ember-in-viewport/services/-observer-admin'], function (exports, _observerAdmin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _observerAdmin.default;
    }
  });
});
;define('mdeditor/services/-raf-admin', ['exports', 'ember-in-viewport/services/-raf-admin'], function (exports, _rafAdmin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rafAdmin.default;
    }
  });
});
;define('mdeditor/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _ajax) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ajax.default;
    }
  });
});
;define('mdeditor/services/cleaner', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend({
    clean(obj, options) {
      const opt = Ember.assign({
        target: {},
        preserveArrays: true,
        //preserveObjects: true,
        preserveRootOnly: true
      }, options);

      if (Ember.isBlank(obj)) {
        if (Ember.isArray(obj) && opt.preserveArrays) {
          return [];
        }
        return;
      }

      if (/string|number|boolean/.test(typeof obj)) {
        return obj;
      }

      let acc = opt.target;

      return Object.keys(obj).reduce((result, key) => {
        //reject private property
        if (key.match(/^_/)) {
          return result;
        }

        if (Ember.isArray(obj[key])) {
          if (opt.preserveArrays === false && obj[key].length === 0) {
            return result;
          }
          let resultArray = [];

          obj[key].forEach(itm => {
            let type = Ember.isArray(itm) ? [] : typeof itm === 'object' ? {} : null;
            let cleanItem = this.clean(itm, {
              target: type,
              preserveArrays: opt.preserveRootOnly ? false : opt.preserveArrays
            });
            if (Ember.isBlank(cleanItem) || typeof cleanItem === 'object' && Object.keys(cleanItem).length === 0) {
              return;
            }

            //console.info(cleanItem);
            resultArray.push(cleanItem);
            //resultArray[idx] = cleanItem;
          });

          if (opt.preserveArrays === false && resultArray.length < 1) {
            return result;
          }

          result[key] = resultArray;

          return result;
        }

        if (Ember.isBlank(obj[key])) {
          //if(obj[key] === undefined) {
          return result;
        }

        if (Ember.typeOf(obj[key]) === 'object' || Ember.typeOf(obj[key]) === 'instance') {
          let objOpt = Ember.assign(opt, {
            preserveArrays: !opt.preserveRootOnly,
            target: {}
          });
          const res = this.clean(obj[key], objOpt);

          if (Object.keys(res).length > 0) {
            result[key] = res;
          }
        } else if (obj[key] !== '') {
          result[key] = obj[key];
        }

        return result;
      }, acc);
    }
  });
});
;define('mdeditor/services/codelist', ['exports', 'mdcodes/resources/js/mdcodes.js'], function (exports, _mdcodes) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      let codelist = this;

      //remap codelist names to be more generic
      Object.keys(_mdcodes.default).forEach(function (key) {
        if (key === 'default') {
          return;
        }

        const list = _mdcodes.default[key];
        const name = key.replace(/^iso_|adiwg_/, '');

        codelist[name] = list;
        //remove deprecated codes
        codelist[name]['codelist'] = list.codelist.rejectBy('deprecated');
      });
    },
    customProfiles: Ember.inject.service('custom-profile'),
    profile: Ember.computed('customProfiles.profiles.[]', function () {
      return {
        codelist: this.customProfiles.profiles.map(itm => {
          return {
            code: itm.id,
            codeName: itm.title,
            description: itm.description
          };
        })
      };
    })
  });
});
;define('mdeditor/services/contacts', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      let store = this.store;

      this.set('contacts', store.peekAll('contact'));
    },

    store: Ember.inject.service(),

    contacts: Ember.A(),

    organizations: Ember.computed('contacts.[]', function () {
      let orgs = this.contacts.filterBy('json.isOrganization');

      return orgs;
    }),

    individuals: Ember.computed('contacts.[]', function () {
      let ind = this.contacts.rejectBy('json.isOrganization');

      return ind;
    }),

    organizationsCodes: Ember.computed('contactsCodes.[]', function () {
      let orgs = this.contactsCodes.filterBy('icon', 'users');

      return orgs;
    }),

    individualsCodes: Ember.computed('contactsCodes.[]', function () {
      let ind = this.contactsCodes.rejectBy('icon', 'users');

      return ind;
    }),

    /**
     * mapped is a re-mapped array of code objects.
     *
     * @property mapped
     * @type {Array}
     * @category computed
     * @requires mdCodeName
     */
    contactsCodes: Ember.computed('contacts.@each.name', function () {
      //let codeId = this.get('valuePath');
      //let codeName = this.get('namePath');
      //let tooltip = this.get('tooltipPath');
      let codelist = [];
      let icons = this.icons;
      let defaultIcon = this.defaultIcon;
      let mdCodelist = this.contacts.sortBy('title');

      mdCodelist.forEach(function (item) {
        let newObject = Ember.Object.create({
          codeId: item.get('contactId'),
          codeName: item.get('title'),
          tooltip: item.get('combinedName'),
          icon: item.get('icon') || icons.get(defaultIcon)
        });
        codelist.pushObject(newObject);
      });

      return codelist;
    })
  });
});
;define('mdeditor/services/custom-profile', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const defaultProfileId = _environment.default.APP.defaultProfileId;
  exports.default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      this.customProfiles = this.get('store').peekAll('custom-profile');
      //this.customProfiles = this.get('store').peekAll('custom-profile');
      // this.coreProfiles = this.definitions.coreProfiles.map(function (itm) {
      //   return {
      //     id: itm.namespace + '.' + itm.identifier,
      //     title: itm.title,
      //     description: itm.description,
      //     definition: itm
      //   }
      // });
    },
    flashMessages: Ember.inject.service(),
    store: Ember.inject.service(),
    definitions: Ember.inject.service('profile'),

    /**
     * String identifying the active profile
     *
     * @type {?String}
     */
    active: null,

    profiles: Ember.computed.union('customProfiles', 'coreProfiles'),
    coreProfiles: Ember.computed.map('definitions.coreProfiles', function (itm) {
      return {
        id: itm.namespace + '.' + itm.identifier,
        title: itm.title,
        description: itm.description,
        definition: itm
      };
    }),
    mapById: Ember.computed('profiles.[]', function () {
      return this.profiles.reduce(function (map, profile) {
        map[profile.id] = profile;

        return map;
      }, {});
    }),
    defaultProfile: Ember.computed('mapById', function () {
      return this.mapById[defaultProfileId];
    }),
    activeComponents: Ember.computed('active', function () {
      let comp = Ember.get(this.getActiveProfile(), 'definition.components');
      return comp || this.defaultProfile.definition.components;
    }),
    activeSchemas: Ember.computed('active', function () {
      return this.getActiveProfile().schemas;
    }),
    /**
     * Get the active profile.
     *
     * @function
     * @returns {Object}
     */
    getActiveProfile() {
      const active = this.active;
      const profile = active && typeof active === 'string' ? active : defaultProfileId;
      const selected = this.mapById[profile];

      if (selected) {
        return selected;
      }

      this.flashMessages.warning(`Profile "${active}" not found. Using default profile.`);

      return this.defaultProfile;
    }

  } // /**
  //  * An object defining the available profiles
  //  *
  //  * @type {Object} profiles
  //  */

  // fetchDefinition: task(function* (uri) {
  //   try {
  //     yield timeout(1000);
  //
  //     let response = yield request(uri);
  //
  //     if(response && !semver.valid(response.version)) {
  //       throw new Error("Invalid version");
  //     }
  //
  //     return response;
  //   } catch (error) {
  //     if(isNotFoundError(error)) {
  //       this.flashMessages
  //         .danger(
  //           `Could not load profile definition from ${uri}. Definition not found.`
  //         );
  //     } else {
  //       this.flashMessages
  //         .danger(
  //           `Could not load profile definition from "${uri}". Error: ${error.message}`
  //         );
  //     }
  //   }
  // }).drop(),

  // checkForUpdates: task(function* (records) {
  //   yield timeout(1000);
  //
  //   yield all(records.map(itm => {
  //     if(itm.validations.attrs.uri.isInvalid) {
  //       this.flashMessages
  //         .warning(
  //           `Did not load definition for "${itm.title}". URL is Invalid.`
  //         );
  //       return;
  //     }
  //
  //     return request(itm.uri).then(response => {
  //       // `response` is the data from the server
  //       if(semver.valid(response.version)) {
  //         itm.set('remoteVersion', response.version);
  //       } else {
  //         throw new Error("Invalid version");
  //       }
  //
  //       return response;
  //     }).catch(error => {
  //       if(isNotFoundError(error)) {
  //         this.flashMessages
  //           .danger(
  //             `Could not load definition for "${itm.title}". Definition not found.`
  //           );
  //       } else {
  //         this.flashMessages
  //           .danger(
  //             `Could not load definition for "${itm.title}". Error: ${error.message}`
  //           );
  //       }
  //     });
  //   }));
  // }).drop(),
  );
});
;define('mdeditor/services/drag-coordinator', ['exports', 'ember-drag-drop/services/drag-coordinator'], function (exports, _dragCoordinator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _dragCoordinator.default;
});
;define('mdeditor/services/ember-elsewhere', ['exports', 'ember-elsewhere/services/ember-elsewhere'], function (exports, _emberElsewhere) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberElsewhere.default;
    }
  });
});
;define('mdeditor/services/ember-load-config', ['exports', 'ember-load/services/ember-load-config', 'mdeditor/config/environment'], function (exports, _emberLoadConfig, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  const userConfig = _environment.default['ember-load'] || {};

  exports.default = _emberLoadConfig.default.extend({
    loadingIndicatorClass: userConfig.loadingIndicatorClass
  });
});
;define('mdeditor/services/flash-messages', ['exports', 'ember-cli-flash/services/flash-messages'], function (exports, _flashMessages) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flashMessages.default;
    }
  });
});
;define('mdeditor/services/head-data', ['exports', 'ember-cli-head/services/head-data'], function (exports, _headData) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _headData.default;
    }
  });
});
;define('mdeditor/services/icon', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend({
    dataset: 'globe',
    series: 'list-ol',
    nonGeographicDataset: 'bar-chart',
    feature: 'map-marker',
    software: 'desktop',
    service: 'exchange',
    model: 'cubes',
    tile: 'th-large',
    metadata: 'file-code-o',
    initiative: 'checklist',
    sample: 'flask',
    'document': 'file-o',
    repository: 'database',
    aggregate: 'sitemap',
    collection: 'files-o',
    coverage: 'th',
    application: 'android',
    sciencePaper: 'flask',
    userGuide: 'life-saver',
    dataDictionary: 'book',
    website: 'chrome',
    publication: 'file-text-o',
    report: 'file-text-o',
    awardInfo: 'file-o',
    collectionSite: 'map-marker',
    project: 'wrench',
    factSheet: 'file-o',
    tabularDataset: 'table',
    map: 'map-o',
    drawing: 'picture-o',
    photographicImage: 'camera',
    presentation: 'file-powerpoint-o',
    defaultFile: 'file-o',
    defaultList: 'caret-right',
    individuals: 'user',
    organizations: 'users'
  });
});
;define('mdeditor/services/itis', ['exports', 'ember-cli-string-helpers/utils/titleize', 'ember-ajax/errors'], function (exports, _titleize, _errors) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  //import moment from 'moment';

  const console = window.console;

  const proxy = 'https://itis-cors.herokuapp.com/https://services.itis.gov?' + 'wt=json' + '&sort=score%20desc,nameWOInd%20asc' + '&fl=hierarchySoFarWRanks,hierarchyTSN,kingdom,rank,vernacular,tsn,nameWOInd,usage';

  const Taxa = Ember.Object.extend({
    style: Ember.computed('status', function () {
      let status = this.status;
      return status === 'valid' || status === 'accepted' ? 'success' : 'danger';
    })
  });

  exports.default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      this.kingdoms = {
        "class": "gov.usgs.itis.itis_service.metadata.SvcKingdomNameList",
        "kingdomNames": [{
          "class": "gov.usgs.itis.itis_service.metadata.SvcKingdomName",
          "kingdomId": "1",
          "kingdomName": "Bacteria",
          "title": "Bacteria",
          "tsn": "50"
        }, {
          "class": "gov.usgs.itis.itis_service.metadata.SvcKingdomName",
          "kingdomId": "2",
          "kingdomName": "Protozoa",
          "title": "Protozoa",
          "tsn": "630577"
        }, {
          "class": "gov.usgs.itis.itis_service.metadata.SvcKingdomName",
          "kingdomId": "3",
          "kingdomName": "Plantae",
          "title": "Plant",
          "tsn": "202422"
        }, {
          "class": "gov.usgs.itis.itis_service.metadata.SvcKingdomName",
          "kingdomId": "4",
          "kingdomName": "Fungi",
          "title": "Fungal",
          "tsn": "555705"
        }, {
          "class": "gov.usgs.itis.itis_service.metadata.SvcKingdomName",
          "kingdomId": "5",
          "kingdomName": "Animalia",
          "title": "Animal",
          "tsn": "202423"
        }, {
          "class": "gov.usgs.itis.itis_service.metadata.SvcKingdomName",
          "kingdomId": "6",
          "kingdomName": "Chromista",
          "title": "Chromista",
          "tsn": "630578"
        }, {
          "class": "gov.usgs.itis.itis_service.metadata.SvcKingdomName",
          "kingdomId": "7",
          "kingdomName": "Archaea",
          "title": "Archaea",
          "tsn": "935939"
        }]
      };

      this.citation = Ember.Object.create({
        "title": "Integrated Taxonomic Information System (ITIS)",
        "date": [
          /*{
                  "date": moment().format('YYYY-MM-DD'),
                  "dateType": "transmitted"
                }*/
        ],
        "presentationForm": ["webService", "webSite"],
        "otherCitationDetails": ["Retrieved from the Integrated Taxonomic Information System on-line database, https://www.itis.gov."],
        "onlineResource": [{
          "uri": "https://www.itis.gov",
          "name": "ITIS website",
          "protocol": "HTTPS",
          "function": "information",
          "description": "ITIS contains taxonomic information on plants, animals, fungi, and microbes of North America and the world."
        }],
        "graphic": [{
          "fileName": "itis_logo.jpg",
          "fileType": "JPEG",
          "fileUri": [{
            "uri": "https://itis.gov/Static/images/itis_logo.jpg"
          }]
        }]
      });
    },

    ajax: Ember.inject.service(),
    flashMessages: Ember.inject.service(),
    isLoading: false,

    sendQuery(searchString, kingdom, limit = 50) {
      let formatted = searchString.replace(/(-| )/g, '*');
      let titleized = (0, _titleize.default)(searchString.replace(/(-)/g, '#')).replace(/( |#)/g, '*');
      let titleized2 = (0, _titleize.default)(searchString).replace(/( )/g, '*');
      let url = proxy + `&rows=${limit}&q=` + `(vernacular:*${formatted}*~0.5%20OR%20vernacular:*${titleized}*~0.5%20OR%20vernacular:*${titleized2}*~0.5` + `%20OR%20nameWOInd:${formatted}*~0.5%20OR%20nameWOInd:*${titleized}*~0.5` + `%20OR%20tsn:${formatted})` + (kingdom ? `%20AND%20kingdom:${kingdom}&` : '');

      return this.ajax.request(url, {
        method: 'GET'
      }).catch(error => {
        if ((0, _errors.isNotFoundError)(error)) {
          // handle 404 errors here
          console.log(error);
          this.flashMessages.warning('No taxa object found.');
          return;
        }

        if ((0, _errors.isForbiddenError)(error)) {
          // handle 403 errors here
          console.log(error);
          this.flashMessages.danger('Access to ITIS web service was denied.');
          return;
        }

        if ((0, _errors.isAjaxError)(error)) {
          // handle all other AjaxErrors here
          console.log(error);
          this.flashMessages.danger('An error occured during the ITIS query request.');
          return;
        }

        // other errors are handled elsewhere
        //throw error;
        console.log(error);
        this.flashMessages.danger('An error occured during the ITIS query request.');
      });
    },
    parseDoc(doc) {
      let ranks = doc.hierarchySoFarWRanks,
          hierarchyTSN = doc.hierarchyTSN,
          kingdom = doc.kingdom,
          name = doc.nameWOInd,
          rank = doc.rank,
          tsn = doc.tsn,
          vernacular = doc.vernacular,
          status = doc.usage;

      let taxonomy = this.parseRanks(ranks, this.parseHierarchyTSN(hierarchyTSN));
      let common = this.parseVernacular(vernacular);

      if (common) {
        taxonomy.forEach(i => {
          let taxa = i.findBy('tsn', tsn);

          if (taxa) {
            Ember.set(taxa, 'common', common.mapBy('name'));
          }
        });
      }

      return Taxa.create({
        kingdom: kingdom,
        name: name,
        rank: rank,
        tsn: tsn,
        taxonomy: taxonomy,
        common: common,
        status: status
      });
    },
    parseHierarchyTSN(tsn) {
      return tsn.map(t => t.slice(1, t.length - 1).split('$'));
    },
    parseVernacular(vernacular) {
      if (!vernacular) {
        return null;
      }

      return vernacular.map(obj => {
        let v = obj.slice(1, obj.length - 1).split('$');

        return {
          name: v[0],
          language: v[1]
        };
      });
    },
    parseRanks(ranks, tsn) {
      return ranks.map((itm, i) => {
        let split = itm.split('$');
        let tsnArray = tsn[i];

        split.shift();
        split.pop();

        return split.map((obj, idx) => {
          let rank = obj.split(':');

          return {
            rank: rank[0],
            value: rank[1],
            order: idx,
            tsn: tsnArray[idx]
          };
        });
      });
    },
    getBranch(taxon, branches) {
      let branch = branches.filterBy('taxonomicLevel', taxon.rank).findBy('taxonomicName', taxon.value);

      if (!branch) {
        return branches.pushObject({
          "taxonomicSystemId": taxon.tsn,
          "taxonomicLevel": taxon.rank,
          "taxonomicName": taxon.value,
          "commonName": taxon.common,
          "subClassification": [],
          "isITIS": true
        });
      }

      return branch;
    },
    mergeTaxa(taxa, tree) {
      taxa.reduce((tree, taxon) => {
        let branch = this.getBranch(taxon, tree);
        let sub = Ember.get(branch, 'subClassification');

        if (!sub) {
          Ember.set(branch, 'subClassification', []);
        }

        return Ember.get(branch, 'subClassification');
      }, tree);
    }
  });
});
;define('mdeditor/services/jsonvalidator', ['exports', 'ajv', 'ajv/lib/refs/json-schema-draft-04'], function (exports, _ajv, _jsonSchemaDraft) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  let validator = new _ajv.default({
    verbose: true,
    allErrors: true,
    removeAdditional: false,
    meta: false,
    schemaId: 'id'
  });

  //support draft-04
  validator.addMetaSchema(_jsonSchemaDraft);
  //add JSON API schema
  validator.addSchema({
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "JSON API Schema",
    "description": "This is a schema for responses in the JSON API format. For more, see http://jsonapi.org",
    "oneOf": [{
      "$ref": "#/definitions/success"
    }, {
      "$ref": "#/definitions/failure"
    }, {
      "$ref": "#/definitions/info"
    }],

    "definitions": {
      "success": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "data": {
            "$ref": "#/definitions/data"
          },
          "included": {
            "description": "To reduce the number of HTTP requests, servers **MAY** allow responses that include related resources along with the requested primary resources. Such responses are called \"compound documents\".",
            "type": "array",
            "items": {
              "$ref": "#/definitions/resource"
            },
            "uniqueItems": true
          },
          "meta": {
            "$ref": "#/definitions/meta"
          },
          "links": {
            "description": "Link members related to the primary data.",
            "allOf": [{
              "$ref": "#/definitions/links"
            }, {
              "$ref": "#/definitions/pagination"
            }]
          },
          "jsonapi": {
            "$ref": "#/definitions/jsonapi"
          }
        },
        "additionalProperties": false
      },
      "failure": {
        "type": "object",
        "required": ["errors"],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/error"
            },
            "uniqueItems": true
          },
          "meta": {
            "$ref": "#/definitions/meta"
          },
          "jsonapi": {
            "$ref": "#/definitions/jsonapi"
          }
        },
        "additionalProperties": false
      },
      "info": {
        "type": "object",
        "required": ["meta"],
        "properties": {
          "meta": {
            "$ref": "#/definitions/meta"
          },
          "links": {
            "$ref": "#/definitions/links"
          },
          "jsonapi": {
            "$ref": "#/definitions/jsonapi"
          }
        },
        "additionalProperties": false
      },

      "meta": {
        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
        "type": "object",
        "additionalProperties": true
      },
      "data": {
        "description": "The document's \"primary data\" is a representation of the resource or collection of resources targeted by a request.",
        "oneOf": [{
          "$ref": "#/definitions/resource"
        }, {
          "description": "An array of resource objects, an array of resource identifier objects, or an empty array ([]), for requests that target resource collections.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/resource"
          },
          "uniqueItems": true
        }, {
          "description": "null if the request is one that might correspond to a single resource, but doesn't currently.",
          "type": "null"
        }]
      },
      "resource": {
        "description": "\"Resource objects\" appear in a JSON API document to represent resources.",
        "type": "object",
        "required": ["type", "id"],
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/definitions/attributes"
          },
          "relationships": {
            "$ref": "#/definitions/relationships"
          },
          "links": {
            "$ref": "#/definitions/links"
          },
          "meta": {
            "$ref": "#/definitions/meta"
          }
        },
        "additionalProperties": false
      },

      "links": {
        "description": "A resource object **MAY** contain references to other resource objects (\"relationships\"). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource's links object.",
        "type": "object",
        "properties": {
          "self": {
            "description": "A `self` member, whose value is a URL for the relationship itself (a \"relationship URL\"). This URL allows the client to directly manipulate the relationship. For example, it would allow a client to remove an `author` from an `article` without deleting the people resource itself.",
            "type": "string",
            "format": "uri"
          },
          "related": {
            "$ref": "#/definitions/link"
          }
        },
        "additionalProperties": true
      },
      "link": {
        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object.",
        "oneOf": [{
          "description": "A string containing the link's URL.",
          "type": "string",
          "format": "uri"
        }, {
          "type": "object",
          "required": ["href"],
          "properties": {
            "href": {
              "description": "A string containing the link's URL.",
              "type": "string",
              "format": "uri"
            },
            "meta": {
              "$ref": "#/definitions/meta"
            }
          }
        }]
      },

      "attributes": {
        "description": "Members of the attributes object (\"attributes\") represent information about the resource object in which it's defined.",
        "type": "object",
        "patternProperties": {
          "^(?!relationships$|links$)\\w[-\\w_]*$": {
            "description": "Attributes may contain any valid JSON value."
          }
        },
        "additionalProperties": false
      },

      "relationships": {
        "description": "Members of the relationships object (\"relationships\") represent references from the resource object in which it's defined to other resource objects.",
        "type": "object",
        "patternProperties": {
          "^\\w[-\\w_]*$": {
            "properties": {
              "links": {
                "$ref": "#/definitions/links"
              },
              "data": {
                "description": "Member, whose value represents \"resource linkage\".",
                "oneOf": [{
                  "$ref": "#/definitions/relationshipToOne"
                }, {
                  "$ref": "#/definitions/relationshipToMany"
                }]
              },
              "meta": {
                "$ref": "#/definitions/meta"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "relationshipToOne": {
        "description": "References to other resource objects in a to-one (\"relationship\"). Relationships can be specified by including a member in a resource's links object.",
        "anyOf": [{
          "$ref": "#/definitions/empty"
        }, {
          "$ref": "#/definitions/linkage"
        }]
      },
      "relationshipToMany": {
        "description": "An array of objects each containing \"type\" and \"id\" members for to-many relationships.",
        "type": "array",
        "items": {
          "$ref": "#/definitions/linkage"
        },
        "uniqueItems": true
      },
      "empty": {
        "description": "Describes an empty to-one relationship.",
        "type": "null"
      },
      "linkage": {
        "description": "The \"type\" and \"id\" to non-empty members.",
        "type": "object",
        "required": ["type", "id"],
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/definitions/meta"
          }
        },
        "additionalProperties": false
      },
      "pagination": {
        "type": "object",
        "properties": {
          "first": {
            "description": "The first page of data",
            "oneOf": [{
              "type": "string",
              "format": "uri"
            }, {
              "type": "null"
            }]
          },
          "last": {
            "description": "The last page of data",
            "oneOf": [{
              "type": "string",
              "format": "uri"
            }, {
              "type": "null"
            }]
          },
          "prev": {
            "description": "The previous page of data",
            "oneOf": [{
              "type": "string",
              "format": "uri"
            }, {
              "type": "null"
            }]
          },
          "next": {
            "description": "The next page of data",
            "oneOf": [{
              "type": "string",
              "format": "uri"
            }, {
              "type": "null"
            }]
          }
        }
      },

      "jsonapi": {
        "description": "An object describing the server's implementation",
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/definitions/meta"
          }
        },
        "additionalProperties": false
      },

      "error": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for this particular occurrence of the problem.",
            "type": "string"
          },
          "links": {
            "$ref": "#/definitions/links"
          },
          "status": {
            "description": "The HTTP status code applicable to this problem, expressed as a string value.",
            "type": "string"
          },
          "code": {
            "description": "An application-specific error code, expressed as a string value.",
            "type": "string"
          },
          "title": {
            "description": "A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "description": "A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/title\" for a specific attribute].",
                "type": "string"
              },
              "parameter": {
                "description": "A string indicating which query parameter caused the error.",
                "type": "string"
              }
            }
          },
          "meta": {
            "$ref": "#/definitions/meta"
          }
        },
        "additionalProperties": false
      }
    }
  }, 'jsonapi');

  exports.default = Ember.Service.extend({
    validator: validator
  });
});
;define('mdeditor/services/keyword', ['exports', 'gcmd-keywords', 'mdkeywords', 'mdcodes/resources/js/iso_topicCategory'], function (exports, _gcmdKeywords, _mdkeywords, _iso_topicCategory) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  let service = Ember.Object.create({
    thesaurus: Ember.A(),
    findById(id) {
      return this.thesaurus.find(function (t) {
        return t.citation.identifier[0].identifier === id;
      });
    }
  });

  let type = {
    'Platforms': 'platform',
    'Instruments': 'instrument'
  };

  Object.keys(_gcmdKeywords.GCMD).forEach(function (key) {
    if (Array.isArray(_gcmdKeywords.GCMD[key])) {
      service.get('thesaurus').pushObject({
        citation: {
          date: [{
            date: _gcmdKeywords.GCMD.version.date,
            dateType: 'revision'
          }],
          title: 'Global Change Master Directory (GCMD) ' + _gcmdKeywords.GCMD[key][0].label,
          edition: 'Version ' + _gcmdKeywords.GCMD.version.edition,
          onlineResource: [{
            uri: 'https://earthdata.nasa.gov/gcmd-forum'
          }],
          identifier: [{
            identifier: _gcmdKeywords.GCMD[key][0].uuid
          }]
        },
        keywords: _gcmdKeywords.GCMD[key][0].children,
        keywordType: type[_gcmdKeywords.GCMD[key][0].label] || 'theme',
        label: 'GCMD ' + _gcmdKeywords.GCMD[key][0].label
      });
    }
  });

  let isoKeywords = _iso_topicCategory.default.codelist.map(topic => {
    return {
      label: topic.codeName,
      definition: topic.description,
      uuid: topic.code
    };
  });

  service.get('thesaurus').pushObject({
    citation: {
      date: [{
        date: '2014-04',
        dateType: 'revision'
      }],
      title: 'ISO 19115 Topic Category',
      edition: 'ISO 19115-1:2014',
      onlineResource: [{
        uri: 'https://doi.org/10.18123/D6RP4M'
      }],
      identifier: [{
        identifier: 'ISO 19115 Topic Category'
      }]
    },
    keywords: isoKeywords,
    keywordType: 'isoTopicCategory',
    label: 'ISO Topic Category'
  });

  service.get('thesaurus').pushObjects(_mdkeywords.default.asArray());

  exports.default = Ember.Service.extend(service);
});
;define("mdeditor/services/liquid-fire-transitions", ["exports", "liquid-fire/transition-map"], function (exports, _transitionMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _transitionMap.default;
});
;define('mdeditor/services/mdjson', ['exports', 'ajv', 'mdjson-schemas/resources/js/schemas', 'mdeditor/pods/components/object/md-citation/component', 'ajv/lib/refs/json-schema-draft-04'], function (exports, _ajv, _schemas, _component, _jsonSchemaDraft) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  Ember.libraries.register('mdJson-schemas', _schemas.default.schema.version);

  const validator = new _ajv.default({
    verbose: true,
    allErrors: true,
    jsonPointers: true,
    removeAdditional: false,
    meta: false,
    schemaId: 'id'
  });

  //support draft-04
  validator.addMetaSchema(_jsonSchemaDraft);

  Object.keys(_schemas.default).forEach(function (key) {
    if (key === 'default') {
      return;
    }
    let val = _schemas.default[key];

    validator.addSchema(val, key);
  });

  const unImplemented = ['metadata.metadataInfo.otherMetadataLocale', 'metadata.resourceInfo.spatialRepresentation', ['metadata.resourceInfo.extent', 'verticalExtent'], ['metadata.resourceInfo.extent', 'temporalExtent'], 'metadata.resourceInfo.coverageDescription',
  //'metadata.resourceInfo.taxonomy',
  'metadata.resourceInfo.otherResourceLocale'];

  exports.default = Ember.Service.extend({
    cleaner: Ember.inject.service(),
    contacts: Ember.inject.service(),
    store: Ember.inject.service(),

    injectCitations(json) {
      let assoc = json.metadata.associatedResource;

      if (assoc) {
        let refs = assoc.reduce((acc, itm) => {
          if (itm.mdRecordId) {
            acc.push(itm);
          }
          return acc;
        }, []);

        let records = this.store.peekAll('record').filterBy('recordId');

        refs.forEach(ref => {
          let record = records.findBy('recordId', ref.mdRecordId);

          if (record) {
            let info = Ember.get(record, 'json.metadata.metadataInfo') || {};
            let metadata = {
              'title': `Metadata for ${Ember.get(record, 'title')}`,
              'responsibleParty': Ember.getWithDefault(info, 'metadataContact', []),
              'date': Ember.getWithDefault(info, 'metadataDate', []),
              'onlineResource': Ember.getWithDefault(info, 'metadataOnlineResource', []),
              'identifier': [Ember.getWithDefault(info, 'metadataIdentifier', {})]
            };

            let citation = Ember.get(record, 'json.metadata.resourceInfo.citation') || {};
            let resourceType = Ember.get(record, 'json.metadata.resourceInfo.resourceType') || [];

            Ember.set(ref, 'resourceCitation', Ember.Object.create((0, _component.formatCitation)(citation)));
            Ember.set(ref, 'metadataCitation', Ember.Object.create((0, _component.formatCitation)(metadata)));
            Ember.set(ref, 'resourceType', resourceType);
            Ember.set(ref, 'mdRecordId', null);

            return;
          }

          Ember.set(ref, 'mdRecordId', null);
        });
      }
    },

    injectDictionaries(rec, json) {
      let ids = rec.get('json.mdDictionary') || [];
      let arr = [];

      if (ids.length) {

        let dicts = this.store.peekAll('dictionary').filterBy('dictionaryId');

        ids.forEach(id => {
          let record = dicts.findBy('dictionaryId', id);

          if (record) {
            arr.pushObject(record.get('json.dataDictionary'));
          }
        });
      }

      Ember.set(json, 'dataDictionary', arr);
    },

    formatRecord(rec, asText) {
      let _contacts = [];
      let conts = this.contacts;

      const _replacer = function _replacer(key, value) {
        let check = {
          contactId: true,
          sourceId: true,
          recipientId: true
        };

        if (key === 'sourceId' && !('amount' in this || 'currency' in this)) {
          //console.log(this);
          return value;
        }

        if (check[key] && !_contacts.includes(value)) {
          let contact = conts.get('contacts').findBy('contactId', value);

          if (!contact) {

            return null;
          }

          let orgs = Ember.isArray(contact.get('json.memberOfOrganization')) ? contact.get('json.memberOfOrganization').slice(0) : null;
          _contacts.push(value);

          if (orgs && orgs.length) {
            orgs.forEach(itm => {
              let org = conts.get('contacts').findBy('contactId', itm);

              if (!org) {
                return;
              }

              if (!_contacts.includes(itm) && org) {
                _contacts.push(itm);
              }

              let iOrgs = org.get('json.memberOfOrganization');

              if (iOrgs.length) {
                iOrgs.forEach(iOrg => {
                  if (!_contacts.includes(iOrg)) {
                    orgs.push(iOrg);
                  }
                });
              }
            });
          }
        }

        return value;
      };

      let cleaner = this.cleaner;
      let clean = cleaner.clean(Ember.get(rec, 'json'));

      this.injectCitations(clean);
      this.injectDictionaries(rec, clean);

      let json = JSON.parse(JSON.stringify(cleaner.clean(clean), _replacer));
      let contacts = this.store.peekAll('contact').mapBy('json');

      json.contact = contacts.filter(item => {
        return _contacts.includes(Ember.get(item, 'contactId'));
      });

      if (unImplemented) {
        unImplemented.forEach(path => {
          let array = Ember.isArray(path);
          let target = array ? Ember.get(json, path[0]) : Ember.get(json, path);

          if (target) {
            if (array) {
              target.forEach(item => {
                Ember.set(item, path[1], undefined);
              });

              return;
            }

            Ember.set(json, path, undefined);
          }
        });
      }

      return asText ? JSON.stringify(cleaner.clean(json)) : cleaner.clean(json);
    },

    validateRecord(record) {
      validator.validate('schema', this.formatRecord(record));

      return validator;
    },

    validateContact(contact) {
      validator.validate('contact', contact.get('cleanJson'));

      return validator;
    },

    validateDictionary(dictionary) {
      validator.validate('dataDictionary', dictionary.get('cleanJson').dataDictionary);

      return validator;
    }
  });
});
;define('mdeditor/services/modal-dialog', ['exports', 'mdeditor/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const computed = Ember.computed,
        Service = Ember.Service;


  function computedFromConfig(prop) {
    return computed(function () {
      return _environment.default['ember-modal-dialog'] && _environment.default['ember-modal-dialog'][prop];
    });
  }

  exports.default = Service.extend({
    hasEmberTether: computedFromConfig('hasEmberTether'),
    hasLiquidWormhole: computedFromConfig('hasLiquidWormhole'),
    hasLiquidTether: computedFromConfig('hasLiquidTether'),
    destinationElementId: computed(function () {
      /*
        everywhere except test, this property will be overwritten
        by the initializer that appends the modal container div
        to the DOM. because initializers don't run in unit/integration
        tests, this is a nice fallback.
      */
      if (_environment.default.environment === 'test') {
        return 'ember-testing';
      }
    })
  });
});
;define('mdeditor/services/moment', ['exports', 'ember-moment/services/moment', 'mdeditor/config/environment'], function (exports, _moment, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const get = Ember.get;
  exports.default = _moment.default.extend({
    defaultFormat: get(_environment.default, 'moment.outputFormat')
  });
});
;define('mdeditor/services/page-title-list', ['exports', 'ember-page-title/services/page-title-list', 'mdeditor/config/environment'], function (exports, _pageTitleList, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  function capitalize(key) {
    return key.charAt(0).toUpperCase() + key.slice(1);
  }

  let defaults = {};
  ['separator', 'prepend', 'replace'].forEach(function (key) {
    if (_environment.default.pageTitle && _environment.default.pageTitle[key]) {
      defaults[`default${capitalize(key)}`] = _environment.default.pageTitle[key];
    }
  });

  exports.default = _pageTitleList.default.extend(defaults);
});
;define('mdeditor/services/patch', ['exports', 'mdjson-schemas/resources/js/schemas'], function (exports, _schemas) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend({
    applyModelPatch(record) {
      let type = record.constructor.modelName;

      switch (type) {
        case 'contact':
          record.get('json.address').forEach(itm => {
            let oldAdm = Ember.get(itm, 'adminstrativeArea');

            if (oldAdm) {
              Ember.set(itm, 'administrativeArea', oldAdm);
              Ember.set(itm, 'adminstrativeArea', null);
            }
          });

          record.set('json.memberOfOrganization', Ember.A(record.get('json.memberOfOrganization')).uniq());
          record.save().then(function () {
            record.notifyPropertyChange('currentHash');
          });

          break;
        case 'record':
          {
            //fix lineage
            let lineage = record.get('json.metadata.resourceLineage');

            if (Ember.isArray(lineage)) {
              lineage.forEach(itm => {
                let source = Ember.get(itm, 'source');

                if (Ember.isArray(source)) {
                  source.forEach(src => {
                    Ember.set(src, 'description', Ember.getWithDefault(src, 'description', Ember.get(src, 'value')));
                    Ember.set(src, 'value', null);
                  });
                  record.save().then(function () {
                    record.notifyPropertyChange('currentHash');
                  });
                }

                let step = Ember.get(itm, 'processStep');

                if (Ember.isArray(step)) {
                  step.forEach(step => {
                    let source = Ember.get(step, 'stepSource');

                    if (Ember.isArray(source)) {
                      source.forEach(src => {
                        Ember.set(src, 'description', Ember.getWithDefault(src, 'description', Ember.get(src, 'value')));
                        Ember.set(src, 'value', null);
                      });
                      record.save().then(function () {
                        record.notifyPropertyChange('currentHash');
                      });
                    }
                  });
                }
              });
            }
            //fix taxonomy
            let taxonomy = record.get('json.metadata.resourceInfo.taxonomy');

            if (taxonomy) {
              if (!Ember.isArray(taxonomy)) {
                taxonomy = [taxonomy];
                record.set('json.metadata.resourceInfo.taxonomy', taxonomy);
              }

              taxonomy.forEach(itm => {
                let classification = Ember.get(itm, 'taxonomicClassification');

                if (classification && !Ember.isArray(classification)) {
                  let fixNames = taxon => {
                    taxon.taxonomicName = taxon.taxonomicName || taxon.latinName;
                    taxon.taxonomicLevel = taxon.taxonomicLevel || taxon.taxonomicRank;

                    if (Ember.isArray(taxon.subClassification)) {
                      taxon.subClassification.forEach(t => fixNames(t));
                    }
                  };

                  fixNames(classification);
                  Ember.set(itm, 'taxonomicClassification', [classification]);

                  let refs = Ember.get(itm, 'identificationReference');

                  if (Ember.isArray(refs)) {
                    let fixedRefs = [];

                    refs.forEach(ref => {
                      fixedRefs.pushObject({
                        "identifier": [ref]
                      });
                    });
                    Ember.set(itm, 'identificationReference', fixedRefs);
                  }
                }
              });
            }

            //fix srs identifiers
            let srs = record.get('json.metadata.resourceInfo.spatialReferenceSystem');

            if (srs) {
              srs.forEach(itm => {
                let projObj = Ember.get(itm, 'referenceSystemParameterSet.projection');
                let geoObj = Ember.get(itm, 'referenceSystemParameterSet.geodetic');
                let vertObj = Ember.get(itm, 'referenceSystemParameterSet.verticalDatum');

                if (projObj) {
                  let projection = projObj.projection,
                      projectionName = projObj.projectionName,
                      projectionIdentifier = projObj.projectionIdentifier;


                  if (!projectionIdentifier || projection) {
                    Ember.set(projObj, 'projectionIdentifier', {
                      identifier: projection,
                      name: projectionName
                    });

                    Ember.setProperties(projObj, {
                      projection: null,
                      projectionName: null
                    });
                  }
                }

                if (geoObj && (geoObj.datumName || geoObj.ellipsoidName)) {
                  if (geoObj.datumName) {
                    Ember.set(geoObj, 'datumIdentifier', {
                      identifier: geoObj.datumName
                    });
                  }

                  if (geoObj.ellipsoidName) {
                    Ember.set(geoObj, 'ellipsoidIdentifier', {
                      identifier: geoObj.ellipsoidName
                    });
                  }

                  Ember.setProperties(geoObj, {
                    datumName: null,
                    ellipsoidName: null
                  });
                }

                if (vertObj && vertObj.datumName) {
                  if (vertObj.datumName) {
                    Ember.set(vertObj, 'datumIdentifier', {
                      identifier: vertObj.datumName
                    });
                  }

                  Ember.set(vertObj, 'datumName', null);
                }
              });
            }

            //fix transfer format edition
            let distribution = record.get('json.metadata.resourceDistribution');

            if (distribution) {
              distribution.forEach(itm => {
                if (itm.distributor) {
                  itm.distributor.forEach(itm => {
                    if (itm.transferOption) {
                      itm.transferOption.forEach(itm => {
                        if (itm.distributionFormat) {
                          itm.distributionFormat.forEach(format => {
                            if (format.amendmentNumber && format.formatSpecification && !format.formatSpecification.edition) {
                              Ember.set(format, 'formatSpecification.edition', format.amendmentNumber);
                              return;
                            }
                            if (format.amendmentNumber && !format.formatSpecification) {
                              Ember.set(format, 'formatSpecification', {
                                edition: format.amendmentNumber
                              });
                              return;
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
            }

            //fix allocation comment
            let funding = record.get('json.metadata.funding');

            if (funding) {
              funding.forEach(itm => {
                if (itm.allocation) {
                  itm.allocation.forEach(itm => {
                    if (itm.description && !itm.comment) {
                      Ember.set(itm, 'comment', itm.description);
                      Ember.set(itm, 'description', null);
                    }
                  });
                }
              });
            }

            record.set('json.schema.version', _schemas.default.schema.version);
            record.save().then(function () {
              record.notifyPropertyChange('currentHash');
            });

            break;
          }
      }
    }
  });
});
;define('mdeditor/services/profile', ['exports', 'ember-ajax/request', 'ember-concurrency', 'ember-ajax/errors', 'semver', 'mdprofiles'], function (exports, _request, _emberConcurrency, _errors, _semver, _mdprofiles) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const coreProfiles = _mdprofiles.default.asArray();

  /**
   * Profile service
   *
   * Service that provides profile configurations for metadata records.
   *
   * @module
   * @augments ember/Service
   */
  exports.default = Ember.Service.extend({
    // profiles: computed('profileRecords.[]', function () {
    //   return this.profileRecords;
    // }),
    profiles: Ember.computed.union('profileRecords', 'coreProfiles'),
    mapById: Ember.computed('profiles.[]', function () {
      return this.profiles.reduce(function (map, profile) {
        map[profile.identifier] = profile;

        return map;
      }, {});
    }),
    init() {
      this._super(...arguments);

      this.profileRecords = this.store.peekAll('profile');
      //this.customProfiles = this.get('store').peekAll('custom-profile');
      this.coreProfiles = coreProfiles;

      this.oldprofiles = {
        full: {
          profile: null,
          description: 'The kitchen sink',
          secondaryNav: [
            /*, {
                    title: 'Coverage',
                    target: 'record.show.edit.coverages'
                   }, {
                    title: 'Grid',
                    target: 'record.show.edit.grid'
                  }*/
          ],
          components: {
            record: {
              main: {
                recordId: true,
                status: true,
                defaultLocale: true,
                resourceType: true,
                pointOfContact: true,
                description: true,
                abstract: true,
                shortAbstract: true,
                supplementalInfo: true,
                purpose: true,
                environmentDescription: true,
                credit: true,
                citation: {
                  title: true,
                  alternateTitle: true,
                  date: true,
                  edition: true,
                  onlineResource: true,
                  responsibleParty: true,
                  presentationForm: true,
                  otherCitationDetails: true,
                  graphic: true,
                  series: {
                    name: true,
                    issue: true,
                    page: true
                  },
                  identifier: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true,
                    authority: {
                      title: true,
                      alternateTitle: true,
                      date: true,
                      responsibleParty: true
                    }
                  }
                }
              },
              metadata: {
                basicInformation: true,
                metadataStatus: true,
                metadataDate: true,
                metadataContact: true,
                defaultLocale: true,
                metadataIdentifier: {
                  identifier: true,
                  namespace: true,
                  version: true,
                  description: true,
                  authority: {
                    title: true,
                    alternateTitle: true,
                    date: true,
                    responsibleParty: true
                  }
                },
                parentMetadata: {
                  title: true,
                  alternateTitle: true,
                  date: true,
                  edition: true,
                  onlineResource: true,
                  responsibleParty: true,
                  presentationForm: true,
                  otherCitationDetails: true,
                  graphic: true,
                  series: {
                    name: true,
                    issue: true,
                    page: true
                  },
                  identifier: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true,
                    authority: {
                      title: true,
                      alternateTitle: true,
                      date: true,
                      responsibleParty: true
                    }
                  }
                },
                alternateMetadata: {
                  title: true,
                  alternateTitle: true,
                  date: true,
                  edition: false,
                  responsibleParty: true,
                  onlineResource: true,
                  presentationForm: true,
                  otherCitationDetails: true,
                  graphic: true,
                  series: {
                    name: true,
                    issue: true,
                    page: true
                  },
                  identifier: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true,
                    authority: {
                      title: true,
                      alternateTitle: true,
                      date: true,
                      responsibleParty: true
                    }
                  }
                },
                maintenance: {
                  frequency: true,
                  date: true,
                  contact: true,
                  note: true,
                  scope: true
                }
              },
              lineage: {
                statement: true,
                processStep: {
                  stepId: true,
                  description: true,
                  processor: true,
                  reference: true,
                  scope: true
                },
                scope: true,
                citation: {
                  title: true,
                  alternateTitle: true,
                  date: true,
                  edition: true,
                  onlineResource: true,
                  responsibleParty: true,
                  presentationForm: true,
                  otherCitationDetails: true,
                  graphic: true,
                  series: {
                    name: true,
                    issue: true,
                    page: true
                  },
                  identifier: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true,
                    authority: {
                      title: true,
                      alternateTitle: true,
                      date: true,
                      responsibleParty: true
                    }
                  }
                }
              },
              documents: {
                resourceType: true,
                citation: {
                  title: true,
                  alternateTitle: true,
                  date: true,
                  edition: true,
                  onlineResource: true,
                  responsibleParty: true,
                  presentationForm: true,
                  otherCitationDetails: true,
                  graphic: true,
                  series: {
                    name: true,
                    issue: true,
                    page: true
                  },
                  identifierSimple: false,
                  identifierShort: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true
                  }
                }
              }
            }
          }
        },
        lccProject: {
          profile: null,
          description: 'Profile for LCC Projects',
          secondaryNav: [{
            title: 'Main',
            target: 'record.show.edit.main',
            tip: 'Basic information about the project.'

          }, {
            title: 'Metadata',
            target: 'record.show.edit.metadata',
            tip: 'Information about the metadata for the project.'

          }, {
            title: 'Keywords',
            target: 'record.show.edit.keywords',
            tip: 'Terms used to describe the project.'

          }, {
            title: 'Extent',
            target: 'record.show.edit.extent',
            tip: 'Information describing the bounds of the project.'

          }, {
            title: 'Taxonomy',
            target: 'record.show.edit.taxonomy',
            tip: 'Information on the taxa associated with the resource.'

          }, {
            title: 'Associated',
            target: 'record.show.edit.associated',
            tip: 'Other records with a defined relationship to the project.'

          }, {
            title: 'Documents',
            target: 'record.show.edit.documents',
            tip: 'Other documents related to, but not defining, the project.'

          }, {
            title: 'Funding',
            target: 'record.show.edit.funding',
            tip: 'Information about funding allocated to development of the project.'

          }],
          components: {
            record: {
              main: {
                recordId: true,
                purpose: false,
                environmentDescription: false,
                credit: false,
                timePeriod: {
                  id: false,
                  description: false,
                  periodName: false,
                  duration: false,
                  interval: false
                },
                citation: {
                  edition: false,
                  onlineResource: {
                    protocol: false
                  },
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphic: false,
                  series: false,
                  identifier: {
                    identifier: true,
                    namespace: true,
                    version: false,
                    description: false,
                    authority: {
                      date: false,
                      alternateTitle: false,
                      identifier: false,
                      onlineResource: false
                    }
                  },
                  graphicOverview: false
                },
                graphicOverview: false
              },
              metadata: {
                identifier: {
                  identifier: true,
                  namespace: true,
                  version: false,
                  description: false,
                  authority: false
                },
                parentMetadata: {
                  title: true,
                  alternateTitle: false,
                  date: false,
                  edition: false,
                  onlineResource: true,
                  responsibleParty: true,
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphicOverview: false,
                  series: false,
                  identifier: false,
                  identifierSimple: {
                    identifier: true,
                    namespace: true,
                    version: false,
                    description: false,
                    authority: false
                  }
                },
                alternateMetadataReference: false,
                defaultLocale: false,
                maintenance: false
              },
              associated: {
                resourceType: true,
                resourceCitation: {
                  alternateTitle: false,
                  edition: false,
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphicOverview: false,
                  series: false,
                  identifierSimple: false,
                  identifierShort: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true
                  }
                },
                metadataCitation: {
                  alternateTitle: false,
                  edition: false,
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphicOverview: false,
                  series: false,
                  identifierSimple: false,
                  identifierShort: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true
                  }
                }
              },
              documents: {
                resourceType: true,
                citation: {
                  title: true,
                  alternateTitle: true,
                  date: true,
                  edition: true,
                  onlineResource: true,
                  responsibleParty: true,
                  presentationForm: true,
                  otherCitationDetails: false,
                  graphicOverview: false,
                  series: {
                    name: true,
                    issue: true,
                    page: true
                  },
                  identifierSimple: false,
                  identifierShort: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true
                  }
                }
              },
              funding: {
                timePeriod: {
                  id: false,
                  description: false,
                  periodName: false,
                  duration: false,
                  interval: false
                }
              }
            }
          }
        },
        lccProduct: {
          profile: null,
          description: 'Profile for LCC Products',
          secondaryNav: [{
            title: 'Main',
            target: 'record.show.edit.main',
            tip: 'Basic information about the product.'

          }, {
            title: 'Metadata',
            target: 'record.show.edit.metadata',
            tip: 'Information about the metadata for the product.'

          }, {
            title: 'Keywords',
            target: 'record.show.edit.keywords',
            tip: 'Terms used to describe the product.'

          }, {
            title: 'Extent',
            target: 'record.show.edit.extent',
            tip: 'Information describing the bounds of the product.'

          }, {
            title: 'Spatial',
            target: 'record.show.edit.spatial',
            tip: 'Information concerning the spatial attributes of the product.'

          }, {
            title: 'Lineage',
            target: 'record.show.edit.lineage',
            tip: 'Information on the history of the product.'

          }, {
            title: 'Taxonomy',
            target: 'record.show.edit.taxonomy',
            tip: 'Information on the taxa associated with the resource.'

          }, {
            title: 'Distribution',
            target: 'record.show.edit.distribution',
            tip: 'Information about obtaining the product.'

          }, {
            title: 'Constraints',
            target: 'record.show.edit.constraint',
            tip: 'Information about constraints applied to the product.'

          }, {
            title: 'Associated',
            target: 'record.show.edit.associated',
            tip: 'Other records with a defined relationship to the product.'

          }, {
            title: 'Documents',
            target: 'record.show.edit.documents',
            tip: 'Other documents related to, but not defining, the product.'

          }, {
            title: 'Dictionaries',
            target: 'record.show.edit.dictionary',
            tip: 'Data dictionaries associated with the resource.'

          }],
          components: {
            record: {
              main: {
                recordId: true,
                purpose: false,
                environmentDescription: false,
                credit: false,
                timePeriod: {
                  id: false,
                  description: false,
                  periodName: false,
                  duration: false,
                  interval: false
                },
                citation: {
                  edition: false,
                  onlineResource: {
                    protocol: false
                  },
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphic: false,
                  series: false,
                  identifier: {
                    identifier: true,
                    namespace: true,
                    version: false,
                    description: false,
                    authority: {
                      date: false,
                      alternateTitle: false,
                      identifier: false,
                      onlineResource: false
                    }
                  },
                  graphicOverview: false
                },
                graphicOverview: false
              },
              metadata: {
                identifier: {
                  identifier: true,
                  namespace: true,
                  version: false,
                  description: false,
                  authority: false
                },
                parentMetadata: {
                  title: true,
                  alternateTitle: false,
                  date: false,
                  edition: false,
                  onlineResource: true,
                  responsibleParty: true,
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphicOverview: false,
                  series: false,
                  identifier: false,
                  identifierSimple: {
                    identifier: true,
                    namespace: true,
                    version: false,
                    description: false,
                    authority: false
                  }
                },
                alternateMetadataReference: false,
                defaultLocale: false,
                maintenance: false
              },
              distribution: {
                distributor: {
                  transferOption: {
                    distributionUnit: false,
                    transferFrequency: false,
                    distributionFormat: false,
                    offlineOption: {
                      identifier: false
                    }
                  },
                  orderProcess: false
                }
              },
              constraints: {
                responsibleParty: false,
                graphic: false
              },
              associated: {
                resourceType: true,
                resourceCitation: {
                  alternateTitle: false,
                  edition: false,
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphicOverview: false,
                  series: false,
                  identifierSimple: false,
                  identifierShort: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true
                  }
                },
                metadataCitation: {
                  alternateTitle: false,
                  edition: false,
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphicOverview: false,
                  series: false,
                  identifierSimple: false,
                  identifierShort: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true
                  }
                }
              },
              documents: {
                resourceType: true,
                citation: {
                  title: true,
                  alternateTitle: true,
                  date: true,
                  edition: true,
                  onlineResource: true,
                  responsibleParty: true,
                  presentationForm: true,
                  otherCitationDetails: false,
                  graphicOverview: false,
                  series: {
                    name: true,
                    issue: true,
                    page: true
                  },
                  identifierSimple: false,
                  identifierShort: {
                    identifier: true,
                    namespace: true,
                    version: true,
                    description: true
                  }
                }
              },
              funding: {
                timePeriod: {
                  id: false,
                  description: false,
                  periodName: false,
                  duration: false,
                  interval: false
                }
              }
            }
          }
        },
        publication: {
          secondaryNav: [{
            title: 'Main',
            target: 'record.show.edit.main'

          }, {
            title: 'Metadata',
            target: 'record.show.edit.metadata'

          }, {
            title: 'Keywords',
            target: 'record.show.edit.keywords'

          }, {
            title: 'Extent',
            target: 'record.show.edit.extent'

          }, {
            title: 'Distribution',
            target: 'record.show.edit.distribution'

          }, {
            title: 'Associated',
            target: 'record.show.edit.associated'

          }, {
            title: 'Documents',
            target: 'record.show.edit.documents'

          }],
          components: {
            record: {
              main: {
                supplementalInfo: false,
                environmentDescription: false
              }
            }
          }
        },
        basic: {
          profile: null,
          secondaryNav: [{
            title: 'Main',
            target: 'record.show.edit.main'

          }, {
            title: 'Metadata',
            target: 'record.show.edit.metadata'

          }, {
            title: 'Keywords',
            target: 'record.show.edit.keywords'

          }, {
            title: 'Extent',
            target: 'record.show.edit.extent'

          }, {
            title: 'Distribution',
            target: 'record.show.edit.distribution'

          }],
          components: {
            record: {
              main: {
                recordId: false,
                purpose: false,
                environmentDescription: false,
                supplementalInfo: false,
                credit: false,
                timePeriod: {
                  id: false,
                  description: false,
                  periodName: false,
                  duration: false,
                  interval: false
                },
                citation: {
                  edition: false,
                  onlineResource: {
                    protocol: false
                  },
                  presentationForm: false,
                  otherCitationDetails: false,
                  graphic: false,
                  series: false,
                  identifier: false,
                  graphicOverview: false
                },
                graphicOverview: false
              },
              metadata: {
                identifier: {
                  identifier: true,
                  namespace: true,
                  version: false,
                  description: false,
                  authority: false
                },
                parentMetadata: false,
                alternateMetadataReference: false,
                defaultLocale: false,
                maintenance: false
              }
            }
          }
        }
        // dictionary: {
        //   secondaryNav: []
        // },
        // settings: {
        //   secondaryNav: [{
        //     title: 'Main',
        //     target: 'settings.main',
        //     tip: 'Main application settings'
        //   }, {
        //     title: 'Profiles',
        //     target: 'settings.profile',
        //     tip: 'Custom profile settings'
        //   }, {
        //     title: 'Validation',
        //     target: 'settings.validation',
        //     tip: 'Custom validation settings'
        //   }]
        // }
      };
    },
    flashMessages: Ember.inject.service(),
    store: Ember.inject.service(),
    /**
     * String identifying the active profile
     *
     * @type {?String}
     */
    // active: null,

    // activeComponents: computed('active', function () {
    //   return this.getActiveProfile().components;
    // }),
    // /**
    //  * Get the active profile.
    //  *
    //  * @function
    //  * @returns {Object}
    //  */
    // getActiveProfile() {
    //   const active = this.active;
    //   const profile = active && typeof active === 'string' ? active : 'full';
    //   const selected = this.mapById[profile];
    //
    //   if(selected) {
    //     return selected;
    //   }
    //
    //   this.flashMessages
    //     .warning(`Profile "${active}" not found. Using "full" profile.`);
    //
    //   return this.mapById.full;
    // },

    // /**
    //  * An object defining the available profiles
    //  *
    //  * @type {Object} profiles
    //  */

    fetchDefinition: (0, _emberConcurrency.task)(function* (uri) {
      try {
        yield (0, _emberConcurrency.timeout)(1000);

        let response = yield (0, _request.default)(uri);

        if (response && !_semver.default.valid(response.version)) {
          throw new Error("Invalid version");
        }

        return response;
      } catch (error) {
        if ((0, _errors.isNotFoundError)(error)) {
          this.flashMessages.danger(`Could not load profile definition from ${uri}. Definition not found.`);
        } else {
          this.flashMessages.danger(`Could not load profile definition from "${uri}". Error: ${error.message}`);
        }
      }
    }).drop(),

    checkForUpdates: (0, _emberConcurrency.task)(function* (records) {
      yield (0, _emberConcurrency.timeout)(1000);

      yield (0, _emberConcurrency.all)(records.map(itm => {
        if (itm.validations.attrs.uri.isInvalid) {
          this.flashMessages.warning(`Did not load definition for "${itm.title}". URL is Invalid.`);
          return;
        }

        return (0, _request.default)(itm.uri).then(response => {
          // `response` is the data from the server
          if (_semver.default.valid(response.version)) {
            itm.set('remoteVersion', response.version);
          } else {
            throw new Error("Invalid version");
          }

          return response;
        }).catch(error => {
          if ((0, _errors.isNotFoundError)(error)) {
            this.flashMessages.danger(`Could not load definition for "${itm.title}". Definition not found.`);
          } else {
            this.flashMessages.danger(`Could not load definition for "${itm.title}". Error: ${error.message}`);
          }
        });
      }));
    }).drop()
  });
});
;define('mdeditor/services/publish', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend({
    catalogs: Ember.A()
  });
});
;define('mdeditor/services/resize', ['exports', 'ember-resize/services/resize'], function (exports, _resize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _resize.default;
    }
  });
});
;define('mdeditor/services/schemas', ['exports', 'json-schema-ref-parser', 'ember-ajax/request', 'ember-concurrency', 'ember-ajax/errors', 'semver'], function (exports, _jsonSchemaRefParser, _request, _emberConcurrency, _errors, _semver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const parser = new _jsonSchemaRefParser.default();

  exports.default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      /**
       * Instance of JSON Schema $Ref Parser
       *
       * @method parser
       * @protected
       * @return {Object}
       */
      this.parser = parser;

      this.schemas = this.store.peekAll('schema');
    },
    store: Ember.inject.service(),
    flashMessages: Ember.inject.service(),
    globalSchemas: Ember.computed.filterBy('schemas', 'isGlobal'),
    fetchSchemas: (0, _emberConcurrency.task)(function* (url) {
      yield (0, _emberConcurrency.timeout)(1000);

      return yield this.parser.resolve(url).then($refs => {
        let paths = $refs.paths();
        let values = parser.$refs.values();

        return paths.map(path => {
          return {
            id: path,
            schema: values[path]
          };
        });
      });
    }).drop(),

    // compileSchemas(schemas) {
    //   let ajv = ajvErrors(new Ajv(options));
    //
    //
    //   ajv.addMetaSchema(draft4);
    //   ajv.addSchema(schemas);
    //
    //   return ajv;
    // },

    checkForUpdates: (0, _emberConcurrency.task)(function* (records) {
      yield (0, _emberConcurrency.timeout)(1000);

      yield (0, _emberConcurrency.all)(records.map(itm => {
        if (itm.validations.attrs.uri.isInvalid) {
          this.flashMessages.warning(`Did not load schema for "${itm.title}". URL is Invalid.`);
          return;
        }

        return (0, _request.default)(itm.uri).then(response => {
          // `response` is the data from the server
          if (_semver.default.valid(response.version)) {
            itm.set('remoteVersion', response.version);
          } else {
            throw new Error("Invalid version");
          }

          return response;
        }).catch(error => {
          if ((0, _errors.isNotFoundError)(error)) {
            this.flashMessages.danger(`Could not load schema for "${itm.title}". Schema not found.`);
          } else {
            this.flashMessages.danger(`Could not load schema for "${itm.title}". Error: ${error.message}`);
          }
        });
      }));
    }).drop()

  });
});
;define('mdeditor/services/settings', ['exports', 'mdeditor/config/environment', 'mdeditor/models/setting'], function (exports, _environment, _setting) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const version = _environment.default.APP.version,
        environment = _environment.default.environment;
  exports.default = Ember.Service.extend({
    store: Ember.inject.service(),
    data: 'null',

    init() {
      this._super(...arguments);

      this.setup();
    },
    setup() {
      let me = this;
      let settings;
      let store = this.store;

      store.findAll('setting').then(function (s) {
        let rec = s.get('firstObject');

        settings = rec ? rec : store.createRecord('setting');

        if (settings.get('lastVersion') !== version) {
          settings.set('showSplash', environment !== 'test');
          settings.set('lastVersion', version);
        }

        Ember.set(settings, 'repositoryDefaults', Ember.getWithDefault(settings, 'repositoryDefaults', []));

        //update mdTranslatorAPI if default is being used
        let isDefaultAPI = Ember.isEmpty(settings.get('mdTranslatorAPI')) || settings.get('mdTranslatorAPI').match('https://mdtranslator.herokuapp.com/api/v(.)/translator');

        if (isDefaultAPI) {
          settings.set('mdTranslatorAPI', _setting.defaultValues.mdTranslatorAPI);
        }

        settings.notifyPropertyChange('hasDirtyAttributes');

        if (!(me.get('isDestroyed') || me.get('isDestroying'))) {
          me.set('data', settings);
        }
      });
    },
    repositoryTemplate: Ember.Object.extend({
      init() {
        this._super(...arguments);
      }
    })
  });
});
;define('mdeditor/services/slider', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      this.get('router.currentRouteName');
    },

    router: Ember.inject.service(),

    showSlider: false,
    fromName: 'md-slider-content',

    routeObserver: Ember.observer('router.currentRouteName', function () {
      this.toggleSlider(false);
      this.set('fromName', 'md-slider-content');
    }),

    onClose() {},

    toggleSlider(state) {
      if (state === undefined) {
        this.toggleProperty('showSlider');

        return;
      }

      this.set('showSlider', !!state);
    }
  });
});
;define('mdeditor/services/spotlight', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend({
    show: false,
    elementId: undefined,

    setTarget(id, onClose, scope) {
      let el = this.elementId;

      if (id === el) {
        this.close();

        return;
      }

      if (id && id !== el) {
        Ember.$('#' + el).removeClass('md-spotlight-target');
      }

      Ember.setProperties(this, {
        show: true,
        elementId: id,
        onClose: onClose,
        scope: scope
      });

      Ember.$('body').addClass('md-no-liquid');
      Ember.$('#' + id).addClass('md-spotlight-target');
    },

    closeTask: (0, _emberConcurrency.task)(function* () {
      let id = this.elementId;
      let onClose = this.onClose;

      Ember.$('.md-spotlight-overlay').addClass('fade-out-fast');

      if (onClose) {
        onClose.call(this.scope || this);
      }

      yield (0, _emberConcurrency.timeout)(250);

      if (Ember.isPresent(id)) {
        Ember.$('body').removeClass('md-no-liquid');
        Ember.$('#' + id).removeClass('md-spotlight-target');
      }

      Ember.setProperties(this, {
        show: false,
        elementId: undefined,
        onClose: undefined,
        scope: undefined
      });
    }).drop(),

    close() {
      this.closeTask.perform();
    }
  });
});
;define('mdeditor/services/text-measurer', ['exports', 'ember-text-measurer/services/text-measurer'], function (exports, _textMeasurer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _textMeasurer.default;
    }
  });
});
;define('mdeditor/shapefile', ['exports', 'shapefile'], function (exports, _shapefile) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.shapefile = undefined;
  exports.shapefile = _shapefile.default;
});
;define("mdeditor/templates/application", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Egcwznhr", "block": "{\"symbols\":[\"title\",\"flash\",\"component\",\"flash\"],\"statements\":[[1,[21,\"head-layout\"],false],[0,\"\\n\\n\"],[7,\"div\"],[11,\"class\",\"md-message-container\"],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"md-message-wrapper\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"flashMessages\",\"queue\"]]],null,{\"statements\":[[4,\"flash-message\",null,[[\"flash\"],[[22,2,[]]]],{\"statements\":[[0,\"    \"],[1,[22,4,[\"message\"]],false],[0,\"\\n\"],[4,\"if\",[[22,4,[\"showProgress\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"progress\"],[9],[0,\"\\n\"],[0,\"      \"],[7,\"div\"],[11,\"class\",\"progress-bar\"],[11,\"role\",\"progressbar\"],[12,\"aria-valuenow\",[22,4,[\"progressValue\"]]],[11,\"aria-valuemin\",\"0\"],[11,\"aria-valuemax\",\"100\"],[12,\"style\",[27,\"html-safe\",[[27,\"concat\",[\"width:\",[22,4,[\"progressValue\"]],\"%;\"],null]],null]],[9],[0,\"\\n        \"],[1,[22,4,[\"progressValue\"]],false],[0,\"%\\n      \"],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[3,4]},null]],\"parameters\":[2]},null],[0,\"  \"],[10],[0,\"\\n\"],[10],[0,\"\\n\\n\"],[4,\"md-title\",null,null,{\"statements\":[[0,\"  \"],[1,[27,\"page-title\",[[22,1,[]]],[[\"replace\"],[false]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[7,\"div\"],[11,\"id\",\"md-wrapper\"],[11,\"class\",\"\"],[9],[0,\"\\n\\n\"],[4,\"layout/md-slider\",null,[[\"visible\",\"fromName\",\"onClose\",\"context\"],[[23,[\"slider\",\"showSlider\"]],[23,[\"slider\",\"fromName\"]],[23,[\"slider\",\"onClose\"]],[23,[\"slider\",\"context\"]]]],{\"statements\":[],\"parameters\":[]},null],[0,\"\\n\"],[0,\"    \"],[1,[27,\"layout/md-nav-sidebar\",null,[[\"items\"],[[23,[\"model\"]]]]],false],[0,\"\\n\"],[0,\"\\n\"],[0,\"  \"],[7,\"div\"],[11,\"id\",\"md-page-content-wrapper\"],[9],[0,\"\\n    \"],[7,\"div\"],[11,\"id\",\"md-navbars\"],[9],[0,\"\\n\"],[4,\"layout/md-nav-main\",null,null,{\"statements\":[[0,\"        \"],[1,[27,\"from-elsewhere\",null,[[\"name\"],[\"nav-main\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"      \"],[1,[21,\"layout/md-breadcrumb\"],false],[0,\"\\n      \"],[1,[27,\"from-elsewhere\",null,[[\"name\"],[\"nav-secondary\"]]],false],[0,\"\\n    \"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"id\",\"md-page-content\"],[11,\"class\",\"container-fluid\"],[9],[0,\"\\n      \"],[1,[21,\"outlet\"],false],[0,\"\\n    \"],[10],[0,\"\\n  \"],[10],[0,\"\\n\"],[0,\"  \"],[1,[27,\"layout/md-footer\",null,[[\"class\"],[\"hidden-print\"]]],false],[0,\"\\n\"],[10],[0,\"\\n\"],[1,[21,\"ember-load-remover\"],false],[0,\"\\n\\n\"],[4,\"control/md-modal\",null,[[\"isShowing\",\"showConfirm\",\"confirmLabel\"],[[23,[\"settings\",\"data\",\"showSplash\"]],true,\"OK\"]],{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"alert alert-info\"],[11,\"role\",\"alert\"],[9],[1,[27,\"fa-icon\",[\"exclamation-triangle\"],null],false],[0,\" Update Alert\"],[10],[0,\"\\n    \"],[7,\"div\"],[11,\"class\",\"alert alert-warning\"],[11,\"role\",\"alert\"],[9],[1,[27,\"fa-icon\",[\"wrench\"],null],false],[0,\"\\n        This application is in beta testing,  \"],[7,\"a\"],[11,\"href\",\"https://github.com/adiwg/mdEditor/issues\"],[11,\"target\",\"_blank\"],[11,\"rel\",\"noopener noreferrer\"],[9],[0,\"please let us know\"],[10],[0,\" if you find any bugs.\\n        Thank-you!\\n    \"],[10],[0,\"\\n    \"],[7,\"p\"],[9],[0,\"\\n        The  md\"],[7,\"span\"],[11,\"class\",\"md-icon-mdeditor\"],[9],[10],[0,\"ditor has been updated\\n        since your last session. Some features may have been added or changed.\\n        Please note the version below (also shown in the \"],[4,\"link-to\",[\"settings\"],null,{\"statements\":[[0,\"Settings\"]],\"parameters\":[]},null],[0,\") when reporting bugs or issues. If you\\n        are having problems, you might want to \"],[4,\"link-to\",[\"settings\"],null,{\"statements\":[[0,\" clear\\n        your localstorage\"]],\"parameters\":[]},null],[0,\" which will delete all records. This\\n        application is in beta but \"],[7,\"strong\"],[11,\"class\",\"text-warning\"],[9],[0,\"SHOULD BE\"],[10],[0,\"\\n        safe for production use.\\n    \"],[10],[0,\"\\n    \"],[7,\"p\"],[9],[0,\"\\n        Current Version: \"],[7,\"span\"],[11,\"class\",\"text-info\"],[9],[1,[21,\"control/md-repo-link\"],false],[10],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"spotlight\",\"show\"]]],null,{\"statements\":[[0,\"  \"],[1,[21,\"control/md-spotlight\"],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"control/md-scroll-spy\",null,[[\"scrollInit\",\"routeName\"],[\"top\",[23,[\"currentRoute\"]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/application.hbs" } });
});
;define("mdeditor/templates/components/draggable-object-target", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "rJ14UI0o", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"enableClicking\"]]],null,{\"statements\":[[0,\"  \"],[7,\"a\"],[11,\"href\",\"#\"],[3,\"action\",[[22,0,[]],\"acceptForDrop\"]],[9],[0,\"\\n    \"],[14,1],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/components/draggable-object-target.hbs" } });
});
;define("mdeditor/templates/components/draggable-object", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iTXeWW2p", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"enableClicking\"]]],null,{\"statements\":[[0,\"  \"],[7,\"a\"],[11,\"href\",\"#\"],[3,\"action\",[[22,0,[]],\"selectForDrag\"]],[9],[0,\"\\n    \"],[14,1],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/components/draggable-object.hbs" } });
});
;define("mdeditor/templates/components/file-picker", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "hJZ/jPHG", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"dropzone\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"file-picker__dropzone\"],[9],[0,\"\\n    \"],[14,1],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,[\"preview\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"file-picker__preview\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,[\"progress\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"showProgress\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"isProgressSupported\"]]],null,{\"statements\":[[0,\"      \"],[7,\"progress\"],[12,\"value\",[21,\"progressValue\"]],[11,\"max\",\"100\"],[11,\"class\",\"file-picker__progress\"],[9],[1,[21,\"progress\"],false],[0,\" %\"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"file-picker__progress\"],[9],[0,\"\\n        \"],[7,\"span\"],[11,\"class\",\"file-picker__progress__value\"],[12,\"style\",[21,\"progressStyle\"]],[9],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[1,[27,\"input\",null,[[\"type\",\"value\",\"accept\",\"multiple\",\"class\"],[\"file\",[23,[\"file\"]],[23,[\"accept\"]],[23,[\"multiple\"]],\"file-picker__input\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/components/file-picker.hbs" } });
});
;define("mdeditor/templates/components/leaflet-table/actions", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "OsjGrgP8", "block": "{\"symbols\":[],\"statements\":[[7,\"button\"],[11,\"class\",\"btn btn-xs btn-success\"],[11,\"title\",\"Zoom to Feature\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"zoomTo\",[23,[\"record\"]]]],[9],[1,[27,\"fa-icon\",[\"search\"],null],false],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-info\"],[11,\"title\",\"Edit Properties\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],[23,[\"showForm\"]],[23,[\"record\"]]]],[9],[1,[27,\"fa-icon\",[\"pencil\"],null],false],[10],[0,\"\\n\"],[7,\"button\"],[11,\"class\",\"btn btn-xs btn-danger\"],[11,\"title\",\"Delete Feature\"],[11,\"type\",\"button\"],[3,\"action\",[[22,0,[]],\"deleteFeature\",[23,[\"record\"]]]],[9],[1,[27,\"fa-icon\",[\"times\"],null],false],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/components/leaflet-table/actions.hbs" } });
});
;define("mdeditor/templates/components/leaflet-table/row", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "hKtJJx7e", "block": "{\"symbols\":[\"column\"],\"statements\":[[7,\"tr\"],[12,\"class\",[23,[\"record\",\"state\"]]],[3,\"action\",[[22,0,[]],\"mouseEnter\",[23,[\"record\"]]],[[\"on\"],[\"mouseEnter\"]]],[3,\"action\",[[22,0,[]],\"mouseLeave\",[23,[\"record\"]]],[[\"on\"],[\"mouseLeave\"]]],[3,\"action\",[[22,0,[]],[27,\"action\",[[22,0,[]],[23,[\"showForm\"]],[23,[\"record\"]]],null]],[[\"on\"],[\"doubleClick\"]]],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"processedColumns\"]]],null,{\"statements\":[[4,\"if\",[[22,1,[\"isVisible\"]]],null,{\"statements\":[[0,\"      \"],[7,\"td\"],[12,\"class\",[22,1,[\"className\"]]],[9],[0,\"\\n\"],[4,\"if\",[[22,1,[\"template\"]]],null,{\"statements\":[[0,\"          \"],[15,[22,1,[\"template\"]],[1]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"          \"],[1,[27,\"get\",[[23,[\"record\"]],[22,1,[\"propertyName\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null],[10],[0,\"\\n\"]],\"hasEval\":true}", "meta": { "moduleName": "mdeditor/templates/components/leaflet-table/row.hbs" } });
});
;define("mdeditor/templates/components/object-bin", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "dvI0c4Pn", "block": "{\"symbols\":[\"obj\",\"&default\"],\"statements\":[[4,\"draggable-object-target\",null,[[\"action\"],[[27,\"action\",[[22,0,[]],\"handleObjectDropped\"],null]]],{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"object-bin-title\"],[9],[1,[21,\"name\"],false],[10],[0,\"\\n  \"],[7,\"br\"],[9],[10],[0,\"\\n\"],[4,\"each\",[[23,[\"model\"]]],null,{\"statements\":[[4,\"draggable-object\",null,[[\"action\",\"content\"],[\"handleObjectDragged\",[22,1,[]]]],{\"statements\":[[0,\"      \"],[14,2,[[22,1,[]]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/components/object-bin.hbs" } });
});
;define("mdeditor/templates/components/sortable-objects", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "f8gAZBRE", "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/components/sortable-objects.hbs" } });
});
;define("mdeditor/templates/head", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "O57Ri94o", "block": "{\"symbols\":[],\"statements\":[[7,\"title\"],[9],[1,[23,[\"model\",\"title\"]],false],[10],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/head.hbs" } });
});
;define("mdeditor/templates/nav-secondary", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/4adWnip", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"layout/md-nav-secondary\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "mdeditor/templates/nav-secondary.hbs" } });
});
;define('mdeditor/templates/publish/sciencebase', ['exports', 'mdeditor-sciencebase/templates/publish/sciencebase'], function (exports, _sciencebase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sciencebase.default;
    }
  });
});
;define('mdeditor/themes/bootstrap3', ['exports', 'ember-models-table/themes/bootstrap3'], function (exports, _bootstrap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _bootstrap.default;
    }
  });
});
;define('mdeditor/themes/bootstrap4', ['exports', 'ember-models-table/themes/bootstrap4'], function (exports, _bootstrap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _bootstrap.default;
    }
  });
});
;define('mdeditor/themes/default', ['exports', 'ember-models-table/themes/default'], function (exports, _default) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _default.default;
    }
  });
});
;define('mdeditor/themes/ember-bootstrap-v3', ['exports', 'ember-models-table/themes/ember-bootstrap-v3'], function (exports, _emberBootstrapV) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberBootstrapV.default;
    }
  });
});
;define('mdeditor/themes/ember-bootstrap-v4', ['exports', 'ember-models-table/themes/ember-bootstrap-v4'], function (exports, _emberBootstrapV) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberBootstrapV.default;
    }
  });
});
;define('mdeditor/themes/ember-semanticui', ['exports', 'ember-models-table/themes/ember-semanticui'], function (exports, _emberSemanticui) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberSemanticui.default;
    }
  });
});
;define('mdeditor/themes/semanticui', ['exports', 'ember-models-table/themes/ember-semanticui'], function (exports, _emberSemanticui) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberSemanticui.default;
    }
  });
});
;define('mdeditor/togeojson', ['exports', '@mapbox/togeojson'], function (exports, _togeojson) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.toGeoJSON = undefined;
  exports.toGeoJSON = _togeojson.default;
});
;define('mdeditor/transforms/json', ['exports', 'ember-data'], function (exports, _emberData) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberData.default.Transform.extend({
    clean: Ember.inject.service('cleaner'),

    deserialize(serialized) {
      let json = JSON.parse(serialized);

      if (Ember.isArray(json)) {
        return Ember.A(json);
      }

      return Ember.Object.create(json);
    },

    serialize(deserialized) {
      let target = Ember.isArray(deserialized) ? [] : {};
      return JSON.stringify(this.clean.clean(deserialized, { target: target }));
    }

  });
});
;define('mdeditor/transitions', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    this.transition(this.toRoute('record.show.edit.main.citation'), this.fromRoute('record.show.edit.main.index'), this.use('toLeft'), this.reverse('toRight')
    //,this.debug()
    );
    this.transition(this.toRoute('record.show.edit.main.citation.identifier'), this.fromRoute('record.show.edit.main.citation.index'), this.use('toLeft'), this.reverse('toRight')
    //,this.debug()
    );
    this.transition(this.toRoute('record.show.edit.metadata.identifier'), this.fromRoute('record.show.edit.metadata.index'), this.use('toLeft'), this.reverse('toRight')
    //,this.debug()
    );
    this.transition(this.toRoute('record.show.edit.metadata.alternate'), this.fromRoute('record.show.edit.metadata.index'), this.use('toLeft'), this.reverse('toRight')
    //,this.debug()
    );
    this.transition(this.toRoute('record.show.edit.metadata.alternate.identifier'), this.fromRoute('record.show.edit.metadata.alternate.index'), this.use('toLeft'), this.reverse('toRight')
    //,this.debug()
    );
    this.transition(this.toRoute('record.show.edit.metadata.parent'), this.fromRoute('record.show.edit.metadata.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.metadata.parent.identifier'), this.fromRoute('record.show.edit.metadata.parent.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.taxonomy.collection'), this.fromRoute('record.show.edit.taxonomy.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.taxonomy.collection.itis'), this.fromRoute('record.show.edit.taxonomy.collection.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.taxonomy.collection.system'), this.fromRoute('record.show.edit.taxonomy.collection.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.lineage.lineageobject'), this.fromRoute('record.show.edit.lineage.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.lineage.lineageobject.citation'), this.fromRoute('record.show.edit.lineage.lineageobject.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.lineage.lineageobject.citation.identifier'), this.fromRoute('record.show.edit.lineage.lineageobject.citation.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.lineage.lineageobject.step'), this.fromRoute('record.show.edit.lineage.lineageobject.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.lineage.lineageobject.step.citation'), this.fromRoute('record.show.edit.lineage.lineageobject.step.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.lineage.lineageobject.source'), this.fromRoute('record.show.edit.lineage.lineageobject.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.associated.resource'), this.fromRoute('record.show.edit.associated.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.documents.citation'), this.fromRoute('record.show.edit.documents.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.funding.allocation'), this.fromRoute('record.show.edit.funding.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('record.show.edit.distribution.distributor'), this.fromRoute('record.show.edit.distribution.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit'), this.fromRoute('dictionary.show.index'), this.use('toLeft'), this.reverse('toRight')
    //this.debug()
    );
    this.transition(this.toRoute('dictionary.show.edit.citation.identifier'), this.fromRoute('dictionary.show.edit.citation.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.domain.edit'), this.fromRoute('dictionary.show.edit.domain.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.domain.edit.item'), this.fromRoute('dictionary.show.edit.domain.edit.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.domain.edit.citation'), this.fromRoute('dictionary.show.edit.domain.edit.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.domain.edit.citation.identifier'), this.fromRoute('dictionary.show.edit.domain.edit.citation.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.entity.edit'), this.fromRoute('dictionary.show.edit.entity.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.entity.edit'), this.fromRoute('dictionary.show.edit.entity.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.entity.edit.citation'), this.fromRoute('dictionary.show.edit.entity.edit.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.entity.edit.citation.identifier'), this.fromRoute('dictionary.show.edit.entity.edit.citation.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.entity.edit.attribute'), this.fromRoute('dictionary.show.edit.entity.edit.index'), this.use('toLeft'), this.reverse('toRight'));
    this.transition(this.toRoute('dictionary.show.edit.entity.import'), this.fromRoute('dictionary.show.edit.entity.index'), this.use('toLeft'), this.reverse('toRight'));

    //non-route transitions
    this.transition(this.hasClass('md-itis-selected'), this.includingInitialRender(), this.toValue(true), this.use('toRight', {
      duration: 250
    }), this.reverse('toLeft', {
      duration: 250
    }) //,
    //this.debug()
    );
    this.transition(this.hasClass('md-itis-unselected'), this.includingInitialRender(), this.toValue(true), this.use('toLeft', {
      duration: 250
    }), this.reverse('toRight', {
      duration: 250
    }) //,
    //this.debug()
    );
  };
});
;define('mdeditor/transitions/cross-fade', ['exports', 'liquid-fire/transitions/cross-fade'], function (exports, _crossFade) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _crossFade.default;
    }
  });
});
;define('mdeditor/transitions/default', ['exports', 'liquid-fire/transitions/default'], function (exports, _default) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _default.default;
    }
  });
});
;define('mdeditor/transitions/explode', ['exports', 'liquid-fire/transitions/explode'], function (exports, _explode) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _explode.default;
    }
  });
});
;define('mdeditor/transitions/fade', ['exports', 'liquid-fire/transitions/fade'], function (exports, _fade) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _fade.default;
    }
  });
});
;define('mdeditor/transitions/flex-grow', ['exports', 'liquid-fire/transitions/flex-grow'], function (exports, _flexGrow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flexGrow.default;
    }
  });
});
;define('mdeditor/transitions/fly-to', ['exports', 'liquid-fire/transitions/fly-to'], function (exports, _flyTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flyTo.default;
    }
  });
});
;define('mdeditor/transitions/move-over', ['exports', 'liquid-fire/transitions/move-over'], function (exports, _moveOver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _moveOver.default;
    }
  });
});
;define('mdeditor/transitions/scale', ['exports', 'liquid-fire/transitions/scale'], function (exports, _scale) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scale.default;
    }
  });
});
;define('mdeditor/transitions/scroll-then', ['exports', 'liquid-fire/transitions/scroll-then'], function (exports, _scrollThen) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scrollThen.default;
    }
  });
});
;define('mdeditor/transitions/to-down', ['exports', 'liquid-fire/transitions/to-down'], function (exports, _toDown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toDown.default;
    }
  });
});
;define('mdeditor/transitions/to-left', ['exports', 'liquid-fire/transitions/to-left'], function (exports, _toLeft) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toLeft.default;
    }
  });
});
;define('mdeditor/transitions/to-right', ['exports', 'liquid-fire/transitions/to-right'], function (exports, _toRight) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toRight.default;
    }
  });
});
;define('mdeditor/transitions/to-up', ['exports', 'liquid-fire/transitions/to-up'], function (exports, _toUp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toUp.default;
    }
  });
});
;define('mdeditor/transitions/wait', ['exports', 'liquid-fire/transitions/wait'], function (exports, _wait) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _wait.default;
    }
  });
});
;define('mdeditor/utils/config', ['exports', 'mdeditor-sciencebase/utils/config'], function (exports, _config) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _config.default;
    }
  });
});
;define('mdeditor/utils/fmt', ['exports', 'ember-models-table/utils/fmt'], function (exports, _fmt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _fmt.default;
    }
  });
});
;define('mdeditor/utils/sb-tree-node', ['exports', 'mdeditor-sciencebase/utils/sb-tree-node'], function (exports, _sbTreeNode) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sbTreeNode.default;
    }
  });
});
;define('mdeditor/utils/titleize', ['exports', 'ember-cli-string-helpers/utils/titleize'], function (exports, _titleize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _titleize.default;
    }
  });
});
;define('mdeditor/uuid', ['exports', 'uuid/v4'], function (exports, _v) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.uuidV4 = undefined;
  exports.uuidV4 = _v.default;
});
;define('mdeditor/validators/alias', ['exports', 'ember-cp-validations/validators/alias'], function (exports, _alias) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _alias.default;
    }
  });
});
;define('mdeditor/validators/array-required', ['exports', 'ember-cp-validations/validators/base'], function (exports, _base) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const ArrayRequired = _base.default.extend({
    validate(value) {
      if (Ember.isArray(value)) {
        if (value.length) {
          return true;
        }
      }
      return 'At least one item is required.';
    }
  });

  ArrayRequired.reopenClass({
    /**
     * Define attribute specific dependent keys for your validator
     *
     * [
     * 	`model.array.@each.${attribute}` --> Dependent is created on the model's context
     * 	`${attribute}.isValid` --> Dependent is created on the `model.validations.attrs` context
     * ]
     *
     * @param {String}  attribute   The attribute being evaluated
     * @param {Unknown} options     Options passed into your validator
     * @return {Array}
     */
    getDependentsFor(attribute, options) {
      //return[];
      let track = [];
      let opts = Ember.get(options, 'track');

      (true && !(Ember.isArray(opts)) && Ember.assert(`[validator:array-valid] [${attribute}] option 'track' must be an array`, Ember.isArray(opts)));


      opts.forEach(itm => {
        track.push(`model.${attribute}.@each.${itm}`);
      });

      return track;
    }
  });

  exports.default = ArrayRequired;
});
;define('mdeditor/validators/array-valid', ['exports', 'ember-cp-validations/validators/base'], function (exports, _base) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const ArrayValid = _base.default.extend({
    validate(value /*, options, model, attribute*/) {
      let check = value.some(itm => {
        return Ember.get(itm, 'validations.isInvalid');
      });
      return check ? 'At least one item is invalid.' : true;
    }
  });

  ArrayValid.reopenClass({
    /**
     * Define attribute specific dependent keys for your validator
     *
     * [
     * 	`model.array.@each.${attribute}` --> Dependent is created on the model's context
     * 	`${attribute}.isValid` --> Dependent is created on the `model.validations.attrs` context
     * ]
     *
     * @param {String}  attribute   The attribute being evaluated
     * @param {Unknown} options     Options passed into your validator
     * @return {Array}
     */
    getDependentsFor(attribute /*, options */) {
      return [`model.${attribute}.@each`];
    }
  });

  exports.default = ArrayValid;
});
;define('mdeditor/validators/belongs-to', ['exports', 'ember-cp-validations/validators/belongs-to'], function (exports, _belongsTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _belongsTo.default;
    }
  });
});
;define('mdeditor/validators/collection', ['exports', 'ember-cp-validations/validators/collection'], function (exports, _collection) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _collection.default;
    }
  });
});
;define('mdeditor/validators/confirmation', ['exports', 'ember-cp-validations/validators/confirmation'], function (exports, _confirmation) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _confirmation.default;
    }
  });
});
;define('mdeditor/validators/date', ['exports', 'ember-cp-validations/validators/date'], function (exports, _date) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _date.default;
    }
  });
});
;define('mdeditor/validators/dependent', ['exports', 'ember-cp-validations/validators/dependent'], function (exports, _dependent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dependent.default;
    }
  });
});
;define('mdeditor/validators/ds-error', ['exports', 'ember-cp-validations/validators/ds-error'], function (exports, _dsError) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dsError.default;
    }
  });
});
;define('mdeditor/validators/exclusion', ['exports', 'ember-cp-validations/validators/exclusion'], function (exports, _exclusion) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _exclusion.default;
    }
  });
});
;define('mdeditor/validators/format', ['exports', 'ember-cp-validations/validators/format'], function (exports, _format) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _format.default;
    }
  });
});
;define('mdeditor/validators/has-many', ['exports', 'ember-cp-validations/validators/has-many'], function (exports, _hasMany) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hasMany.default;
    }
  });
});
;define('mdeditor/validators/inclusion', ['exports', 'ember-cp-validations/validators/inclusion'], function (exports, _inclusion) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _inclusion.default;
    }
  });
});
;define('mdeditor/validators/length', ['exports', 'ember-cp-validations/validators/length'], function (exports, _length) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _length.default;
    }
  });
});
;define('mdeditor/validators/messages', ['exports', 'ember-cp-validations/validators/messages'], function (exports, _messages) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _messages.default;
    }
  });
});
;define('mdeditor/validators/number', ['exports', 'ember-cp-validations/validators/number'], function (exports, _number) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _number.default;
    }
  });
});
;define('mdeditor/validators/presence', ['exports', 'ember-cp-validations/validators/presence'], function (exports, _presence) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _presence.default;
    }
  });
});
;define('mdeditor/views/application', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});
;

;define('mdeditor/config/environment', [], function() {
  var prefix = 'mdeditor';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

;
          if (!runningTests) {
            require("mdeditor/app")["default"].create({"repository":"https://github.com/adiwg/mdEditor","defaultProfileId":"org.adiwg.profile.full","name":"mdeditor","version":"0.9.0-dev.2+b60a2ab6"});
          }
        
//# sourceMappingURL=mdeditor.map
